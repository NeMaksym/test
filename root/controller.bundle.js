(()=>{var t={1926:(t,e,n)=>{n(2526),n(2443),n(1817),n(2401),n(8722),n(2165),n(9007),n(6066),n(3510),n(1840),n(6982),n(2159),n(6649),n(9341),n(543),n(9601),n(8011),n(9070),n(3321),n(9720),n(3371),n(8559),n(5003),n(9337),n(6210),n(489),n(3304),n(1825),n(8410),n(2200),n(7941),n(7227),n(514),n(8304),n(6833),n(1539),n(9595),n(5500),n(4869),n(3952),n(4812),n(8309),n(4855),n(5837),n(1038),n(9753),n(6572),n(2222),n(545),n(6541),n(3290),n(7327),n(9826),n(4553),n(4944),n(6535),n(9554),n(6699),n(2772),n(9600),n(4986),n(1249),n(5827),n(6644),n(5069),n(7042),n(5212),n(2707),n(561),n(8706),n(3792),n(9244),n(6992),n(4953),n(8992),n(9841),n(7852),n(2023),n(4723),n(6373),n(6528),n(3112),n(2481),n(5306),n(4765),n(3123),n(6755),n(3210),n(5674),n(8702),n(8783),n(5218),n(4475),n(7929),n(915),n(9253),n(2125),n(8830),n(8734),n(9254),n(7268),n(7397),n(86),n(623),n(4603),n(4916),n(2087),n(8386),n(7601),n(9714),n(1058),n(4678),n(9653),n(3299),n(5192),n(3161),n(4048),n(8285),n(4363),n(5994),n(1874),n(9494),n(6977),n(5147),n(9752),n(2376),n(3181),n(3484),n(2388),n(8621),n(403),n(4755),n(5438),n(332),n(658),n(197),n(4914),n(2420),n(160),n(970),n(2703),n(3689),n(3843),n(5735),n(5268),n(3710),n(6078),n(8862),n(3706),n(8674),n(7922),n(7727),n(1532),n(189),n(4129),n(8478),n(8264),n(6938),n(9575),n(6716),n(7145),n(2472),n(9743),n(5109),n(8255),n(5125),n(9135),n(4197),n(6495),n(8145),n(5206),n(2990),n(8927),n(3105),n(5035),n(4345),n(7174),n(2846),n(4731),n(7209),n(6319),n(8867),n(7789),n(3739),n(9368),n(4483),n(2056),n(3462),n(678),n(7462),n(3824),n(5021),n(2974),n(5016),n(224),n(2419),n(9596),n(2586),n(4819),n(5683),n(9361),n(1037),n(5898),n(7556),n(4361),n(3593),n(9532);var r=n(857);t.exports=r},3099:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},6077:(t,e,n)=>{var r=n(111);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},1223:(t,e,n)=>{var r=n(5112),i=n(30),o=n(3070),a=r("unscopables"),s=Array.prototype;null==s[a]&&o.f(s,a,{configurable:!0,value:i(null)}),t.exports=function(t){s[a][t]=!0}},1530:(t,e,n)=>{"use strict";var r=n(8710).charAt;t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},5787:t=>{t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},9670:(t,e,n)=>{var r=n(111);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},4019:t=>{t.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},260:(t,e,n)=>{"use strict";var r,i=n(4019),o=n(9781),a=n(7854),s=n(111),c=n(6656),u=n(648),l=n(8880),f=n(1320),d=n(3070).f,h=n(9518),p=n(7674),A=n(5112),g=n(9711),m=a.Int8Array,v=m&&m.prototype,y=a.Uint8ClampedArray,b=y&&y.prototype,C=m&&h(m),w=v&&h(v),x=Object.prototype,k=x.isPrototypeOf,_=A("toStringTag"),I=g("TYPED_ARRAY_TAG"),S=i&&!!p&&"Opera"!==u(a.opera),E=!1,O={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},T=function(t){return s(t)&&c(O,u(t))};for(r in O)a[r]||(S=!1);if((!S||"function"!=typeof C||C===Function.prototype)&&(C=function(){throw TypeError("Incorrect invocation")},S))for(r in O)a[r]&&p(a[r],C);if((!S||!w||w===x)&&(w=C.prototype,S))for(r in O)a[r]&&p(a[r].prototype,w);if(S&&h(b)!==w&&p(b,w),o&&!c(w,_))for(r in E=!0,d(w,_,{get:function(){return s(this)?this[I]:void 0}}),O)a[r]&&l(a[r],I,r);t.exports={NATIVE_ARRAY_BUFFER_VIEWS:S,TYPED_ARRAY_TAG:E&&I,aTypedArray:function(t){if(T(t))return t;throw TypeError("Target is not a typed array")},aTypedArrayConstructor:function(t){if(p){if(k.call(C,t))return t}else for(var e in O)if(c(O,r)){var n=a[e];if(n&&(t===n||k.call(n,t)))return t}throw TypeError("Target is not a typed array constructor")},exportTypedArrayMethod:function(t,e,n){if(o){if(n)for(var r in O){var i=a[r];i&&c(i.prototype,t)&&delete i.prototype[t]}w[t]&&!n||f(w,t,n?e:S&&v[t]||e)}},exportTypedArrayStaticMethod:function(t,e,n){var r,i;if(o){if(p){if(n)for(r in O)(i=a[r])&&c(i,t)&&delete i[t];if(C[t]&&!n)return;try{return f(C,t,n?e:S&&m[t]||e)}catch(t){}}for(r in O)!(i=a[r])||i[t]&&!n||f(i,t,e)}},isView:function(t){var e=u(t);return"DataView"===e||c(O,e)},isTypedArray:T,TypedArray:C,TypedArrayPrototype:w}},3331:(t,e,n)=>{"use strict";var r=n(7854),i=n(9781),o=n(4019),a=n(8880),s=n(2248),c=n(7293),u=n(5787),l=n(9958),f=n(7466),d=n(7067),h=n(1179),p=n(9518),A=n(7674),g=n(8006).f,m=n(3070).f,v=n(1285),y=n(8003),b=n(9909),C=b.get,w=b.set,x="ArrayBuffer",k="DataView",_="prototype",I="Wrong index",S=r[x],E=S,O=r[k],T=O&&O[_],B=Object.prototype,j=r.RangeError,R=h.pack,L=h.unpack,M=function(t){return[255&t]},P=function(t){return[255&t,t>>8&255]},z=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},F=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},U=function(t){return R(t,23,4)},N=function(t){return R(t,52,8)},D=function(t,e){m(t[_],e,{get:function(){return C(this)[e]}})},$=function(t,e,n,r){var i=d(n),o=C(t);if(i+e>o.byteLength)throw j(I);var a=C(o.buffer).bytes,s=i+o.byteOffset,c=a.slice(s,s+e);return r?c:c.reverse()},W=function(t,e,n,r,i,o){var a=d(n),s=C(t);if(a+e>s.byteLength)throw j(I);for(var c=C(s.buffer).bytes,u=a+s.byteOffset,l=r(+i),f=0;f<e;f++)c[u+f]=l[o?f:e-f-1]};if(o){if(!c((function(){S(1)}))||!c((function(){new S(-1)}))||c((function(){return new S,new S(1.5),new S(NaN),S.name!=x}))){for(var Y,G=(E=function(t){return u(this,E),new S(d(t))})[_]=S[_],J=g(S),K=0;J.length>K;)(Y=J[K++])in E||a(E,Y,S[Y]);G.constructor=E}A&&p(T)!==B&&A(T,B);var q=new O(new E(2)),Z=T.setInt8;q.setInt8(0,2147483648),q.setInt8(1,2147483649),!q.getInt8(0)&&q.getInt8(1)||s(T,{setInt8:function(t,e){Z.call(this,t,e<<24>>24)},setUint8:function(t,e){Z.call(this,t,e<<24>>24)}},{unsafe:!0})}else E=function(t){u(this,E,x);var e=d(t);w(this,{bytes:v.call(new Array(e),0),byteLength:e}),i||(this.byteLength=e)},O=function(t,e,n){u(this,O,k),u(t,E,k);var r=C(t).byteLength,o=l(e);if(o<0||o>r)throw j("Wrong offset");if(o+(n=void 0===n?r-o:f(n))>r)throw j("Wrong length");w(this,{buffer:t,byteLength:n,byteOffset:o}),i||(this.buffer=t,this.byteLength=n,this.byteOffset=o)},i&&(D(E,"byteLength"),D(O,"buffer"),D(O,"byteLength"),D(O,"byteOffset")),s(O[_],{getInt8:function(t){return $(this,1,t)[0]<<24>>24},getUint8:function(t){return $(this,1,t)[0]},getInt16:function(t){var e=$(this,2,t,arguments.length>1?arguments[1]:void 0);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=$(this,2,t,arguments.length>1?arguments[1]:void 0);return e[1]<<8|e[0]},getInt32:function(t){return F($(this,4,t,arguments.length>1?arguments[1]:void 0))},getUint32:function(t){return F($(this,4,t,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(t){return L($(this,4,t,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(t){return L($(this,8,t,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(t,e){W(this,1,t,M,e)},setUint8:function(t,e){W(this,1,t,M,e)},setInt16:function(t,e){W(this,2,t,P,e,arguments.length>2?arguments[2]:void 0)},setUint16:function(t,e){W(this,2,t,P,e,arguments.length>2?arguments[2]:void 0)},setInt32:function(t,e){W(this,4,t,z,e,arguments.length>2?arguments[2]:void 0)},setUint32:function(t,e){W(this,4,t,z,e,arguments.length>2?arguments[2]:void 0)},setFloat32:function(t,e){W(this,4,t,U,e,arguments.length>2?arguments[2]:void 0)},setFloat64:function(t,e){W(this,8,t,N,e,arguments.length>2?arguments[2]:void 0)}});y(E,x),y(O,k),t.exports={ArrayBuffer:E,DataView:O}},1048:(t,e,n)=>{"use strict";var r=n(7908),i=n(1400),o=n(7466),a=Math.min;t.exports=[].copyWithin||function(t,e){var n=r(this),s=o(n.length),c=i(t,s),u=i(e,s),l=arguments.length>2?arguments[2]:void 0,f=a((void 0===l?s:i(l,s))-u,s-c),d=1;for(u<c&&c<u+f&&(d=-1,u+=f-1,c+=f-1);f-- >0;)u in n?n[c]=n[u]:delete n[c],c+=d,u+=d;return n}},1285:(t,e,n)=>{"use strict";var r=n(7908),i=n(1400),o=n(7466);t.exports=function(t){for(var e=r(this),n=o(e.length),a=arguments.length,s=i(a>1?arguments[1]:void 0,n),c=a>2?arguments[2]:void 0,u=void 0===c?n:i(c,n);u>s;)e[s++]=t;return e}},8533:(t,e,n)=>{"use strict";var r=n(2092).forEach,i=n(2133),o=n(9207),a=i("forEach"),s=o("forEach");t.exports=a&&s?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},8457:(t,e,n)=>{"use strict";var r=n(9974),i=n(7908),o=n(3411),a=n(7659),s=n(7466),c=n(6135),u=n(1246);t.exports=function(t){var e,n,l,f,d,h,p=i(t),A="function"==typeof this?this:Array,g=arguments.length,m=g>1?arguments[1]:void 0,v=void 0!==m,y=u(p),b=0;if(v&&(m=r(m,g>2?arguments[2]:void 0,2)),null==y||A==Array&&a(y))for(n=new A(e=s(p.length));e>b;b++)h=v?m(p[b],b):p[b],c(n,b,h);else for(d=(f=y.call(p)).next,n=new A;!(l=d.call(f)).done;b++)h=v?o(f,m,[l.value,b],!0):l.value,c(n,b,h);return n.length=b,n}},1318:(t,e,n)=>{var r=n(5656),i=n(7466),o=n(1400),a=function(t){return function(e,n,a){var s,c=r(e),u=i(c.length),l=o(a,u);if(t&&n!=n){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((t||l in c)&&c[l]===n)return t||l||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2092:(t,e,n)=>{var r=n(9974),i=n(8361),o=n(7908),a=n(7466),s=n(5417),c=[].push,u=function(t){var e=1==t,n=2==t,u=3==t,l=4==t,f=6==t,d=5==t||f;return function(h,p,A,g){for(var m,v,y=o(h),b=i(y),C=r(p,A,3),w=a(b.length),x=0,k=g||s,_=e?k(h,w):n?k(h,0):void 0;w>x;x++)if((d||x in b)&&(v=C(m=b[x],x,y),t))if(e)_[x]=v;else if(v)switch(t){case 3:return!0;case 5:return m;case 6:return x;case 2:c.call(_,m)}else if(l)return!1;return f?-1:u||l?l:_}};t.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6)}},6583:(t,e,n)=>{"use strict";var r=n(5656),i=n(9958),o=n(7466),a=n(2133),s=n(9207),c=Math.min,u=[].lastIndexOf,l=!!u&&1/[1].lastIndexOf(1,-0)<0,f=a("lastIndexOf"),d=s("indexOf",{ACCESSORS:!0,1:0}),h=l||!f||!d;t.exports=h?function(t){if(l)return u.apply(this,arguments)||0;var e=r(this),n=o(e.length),a=n-1;for(arguments.length>1&&(a=c(a,i(arguments[1]))),a<0&&(a=n+a);a>=0;a--)if(a in e&&e[a]===t)return a||0;return-1}:u},1194:(t,e,n)=>{var r=n(7293),i=n(5112),o=n(7392),a=i("species");t.exports=function(t){return o>=51||!r((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},2133:(t,e,n)=>{"use strict";var r=n(7293);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},9207:(t,e,n)=>{var r=n(9781),i=n(7293),o=n(6656),a=Object.defineProperty,s={},c=function(t){throw t};t.exports=function(t,e){if(o(s,t))return s[t];e||(e={});var n=[][t],u=!!o(e,"ACCESSORS")&&e.ACCESSORS,l=o(e,0)?e[0]:c,f=o(e,1)?e[1]:void 0;return s[t]=!!n&&!i((function(){if(u&&!r)return!0;var t={length:-1};u?a(t,1,{enumerable:!0,get:c}):t[1]=1,n.call(t,l,f)}))}},3671:(t,e,n)=>{var r=n(3099),i=n(7908),o=n(8361),a=n(7466),s=function(t){return function(e,n,s,c){r(n);var u=i(e),l=o(u),f=a(u.length),d=t?f-1:0,h=t?-1:1;if(s<2)for(;;){if(d in l){c=l[d],d+=h;break}if(d+=h,t?d<0:f<=d)throw TypeError("Reduce of empty array with no initial value")}for(;t?d>=0:f>d;d+=h)d in l&&(c=n(c,l[d],d,u));return c}};t.exports={left:s(!1),right:s(!0)}},5417:(t,e,n)=>{var r=n(111),i=n(3157),o=n(5112)("species");t.exports=function(t,e){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)?r(n)&&null===(n=n[o])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===e?0:e)}},3411:(t,e,n)=>{var r=n(9670);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},7072:(t,e,n)=>{var r=n(5112)("iterator"),i=!1;try{var o=0,a={next:function(){return{done:!!o++}},return:function(){i=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o={};o[r]=function(){return{next:function(){return{done:n=!0}}}},t(o)}catch(t){}return n}},4326:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},648:(t,e,n)=>{var r=n(1694),i=n(4326),o=n(5112)("toStringTag"),a="Arguments"==i(function(){return arguments}());t.exports=r?i:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:a?i(e):"Object"==(r=i(e))&&"function"==typeof e.callee?"Arguments":r}},5631:(t,e,n)=>{"use strict";var r=n(3070).f,i=n(30),o=n(2248),a=n(9974),s=n(5787),c=n(408),u=n(654),l=n(6340),f=n(9781),d=n(2423).fastKey,h=n(9909),p=h.set,A=h.getterFor;t.exports={getConstructor:function(t,e,n,u){var l=t((function(t,r){s(t,l,e),p(t,{type:e,index:i(null),first:void 0,last:void 0,size:0}),f||(t.size=0),null!=r&&c(r,t[u],t,n)})),h=A(e),g=function(t,e,n){var r,i,o=h(t),a=m(t,e);return a?a.value=n:(o.last=a={index:i=d(e,!0),key:e,value:n,previous:r=o.last,next:void 0,removed:!1},o.first||(o.first=a),r&&(r.next=a),f?o.size++:t.size++,"F"!==i&&(o.index[i]=a)),t},m=function(t,e){var n,r=h(t),i=d(e);if("F"!==i)return r.index[i];for(n=r.first;n;n=n.next)if(n.key==e)return n};return o(l.prototype,{clear:function(){for(var t=h(this),e=t.index,n=t.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete e[n.index],n=n.next;t.first=t.last=void 0,f?t.size=0:this.size=0},delete:function(t){var e=this,n=h(e),r=m(e,t);if(r){var i=r.next,o=r.previous;delete n.index[r.index],r.removed=!0,o&&(o.next=i),i&&(i.previous=o),n.first==r&&(n.first=i),n.last==r&&(n.last=o),f?n.size--:e.size--}return!!r},forEach:function(t){for(var e,n=h(this),r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.next:n.first;)for(r(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!m(this,t)}}),o(l.prototype,n?{get:function(t){var e=m(this,t);return e&&e.value},set:function(t,e){return g(this,0===t?0:t,e)}}:{add:function(t){return g(this,t=0===t?0:t,t)}}),f&&r(l.prototype,"size",{get:function(){return h(this).size}}),l},setStrong:function(t,e,n){var r=e+" Iterator",i=A(e),o=A(r);u(t,e,(function(t,e){p(this,{type:r,target:t,state:i(t),kind:e,last:void 0})}),(function(){for(var t=o(this),e=t.kind,n=t.last;n&&n.removed;)n=n.previous;return t.target&&(t.last=n=n?n.next:t.state.first)?"keys"==e?{value:n.key,done:!1}:"values"==e?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),n?"entries":"values",!n,!0),l(e)}}},9320:(t,e,n)=>{"use strict";var r=n(2248),i=n(2423).getWeakData,o=n(9670),a=n(111),s=n(5787),c=n(408),u=n(2092),l=n(6656),f=n(9909),d=f.set,h=f.getterFor,p=u.find,A=u.findIndex,g=0,m=function(t){return t.frozen||(t.frozen=new v)},v=function(){this.entries=[]},y=function(t,e){return p(t.entries,(function(t){return t[0]===e}))};v.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var n=y(this,t);n?n[1]=e:this.entries.push([t,e])},delete:function(t){var e=A(this.entries,(function(e){return e[0]===t}));return~e&&this.entries.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,u){var f=t((function(t,r){s(t,f,e),d(t,{type:e,id:g++,frozen:void 0}),null!=r&&c(r,t[u],t,n)})),p=h(e),A=function(t,e,n){var r=p(t),a=i(o(e),!0);return!0===a?m(r).set(e,n):a[r.id]=n,t};return r(f.prototype,{delete:function(t){var e=p(this);if(!a(t))return!1;var n=i(t);return!0===n?m(e).delete(t):n&&l(n,e.id)&&delete n[e.id]},has:function(t){var e=p(this);if(!a(t))return!1;var n=i(t);return!0===n?m(e).has(t):n&&l(n,e.id)}}),r(f.prototype,n?{get:function(t){var e=p(this);if(a(t)){var n=i(t);return!0===n?m(e).get(t):n?n[e.id]:void 0}},set:function(t,e){return A(this,t,e)}}:{add:function(t){return A(this,t,!0)}}),f}}},7710:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(4705),a=n(1320),s=n(2423),c=n(408),u=n(5787),l=n(111),f=n(7293),d=n(7072),h=n(8003),p=n(9587);t.exports=function(t,e,n){var A=-1!==t.indexOf("Map"),g=-1!==t.indexOf("Weak"),m=A?"set":"add",v=i[t],y=v&&v.prototype,b=v,C={},w=function(t){var e=y[t];a(y,t,"add"==t?function(t){return e.call(this,0===t?0:t),this}:"delete"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!l(t)?void 0:e.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!l(t))&&e.call(this,0===t?0:t)}:function(t,n){return e.call(this,0===t?0:t,n),this})};if(o(t,"function"!=typeof v||!(g||y.forEach&&!f((function(){(new v).entries().next()})))))b=n.getConstructor(e,t,A,m),s.REQUIRED=!0;else if(o(t,!0)){var x=new b,k=x[m](g?{}:-0,1)!=x,_=f((function(){x.has(1)})),I=d((function(t){new v(t)})),S=!g&&f((function(){for(var t=new v,e=5;e--;)t[m](e,e);return!t.has(-0)}));I||((b=e((function(e,n){u(e,b,t);var r=p(new v,e,b);return null!=n&&c(n,r[m],r,A),r}))).prototype=y,y.constructor=b),(_||S)&&(w("delete"),w("has"),A&&w("get")),(S||k)&&w(m),g&&y.clear&&delete y.clear}return C[t]=b,r({global:!0,forced:b!=v},C),h(b,t),g||n.setStrong(b,t,A),b}},9920:(t,e,n)=>{var r=n(6656),i=n(3887),o=n(1236),a=n(3070);t.exports=function(t,e){for(var n=i(e),s=a.f,c=o.f,u=0;u<n.length;u++){var l=n[u];r(t,l)||s(t,l,c(e,l))}}},4964:(t,e,n)=>{var r=n(5112)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,"/./"[t](e)}catch(t){}}return!1}},8544:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},4230:(t,e,n)=>{var r=n(4488),i=/"/g;t.exports=function(t,e,n,o){var a=String(r(t)),s="<"+e;return""!==n&&(s+=" "+n+'="'+String(o).replace(i,"&quot;")+'"'),s+">"+a+"</"+e+">"}},4994:(t,e,n)=>{"use strict";var r=n(3383).IteratorPrototype,i=n(30),o=n(9114),a=n(8003),s=n(7497),c=function(){return this};t.exports=function(t,e,n){var u=e+" Iterator";return t.prototype=i(r,{next:o(1,n)}),a(t,u,!1,!0),s[u]=c,t}},8880:(t,e,n)=>{var r=n(9781),i=n(3070),o=n(9114);t.exports=r?function(t,e,n){return i.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},9114:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},6135:(t,e,n)=>{"use strict";var r=n(7593),i=n(3070),o=n(9114);t.exports=function(t,e,n){var a=r(e);a in t?i.f(t,a,o(0,n)):t[a]=n}},5573:(t,e,n)=>{"use strict";var r=n(7293),i=n(6650).start,o=Math.abs,a=Date.prototype,s=a.getTime,c=a.toISOString;t.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=c.call(new Date(-50000000000001))}))||!r((function(){c.call(new Date(NaN))}))?function(){if(!isFinite(s.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+i(o(e),r?6:4,0)+"-"+i(t.getUTCMonth()+1,2,0)+"-"+i(t.getUTCDate(),2,0)+"T"+i(t.getUTCHours(),2,0)+":"+i(t.getUTCMinutes(),2,0)+":"+i(t.getUTCSeconds(),2,0)+"."+i(n,3,0)+"Z"}:c},8709:(t,e,n)=>{"use strict";var r=n(9670),i=n(7593);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!==t)}},654:(t,e,n)=>{"use strict";var r=n(2109),i=n(4994),o=n(9518),a=n(7674),s=n(8003),c=n(8880),u=n(1320),l=n(5112),f=n(1913),d=n(7497),h=n(3383),p=h.IteratorPrototype,A=h.BUGGY_SAFARI_ITERATORS,g=l("iterator"),m="keys",v="values",y="entries",b=function(){return this};t.exports=function(t,e,n,l,h,C,w){i(n,e,l);var x,k,_,I=function(t){if(t===h&&B)return B;if(!A&&t in O)return O[t];switch(t){case m:case v:case y:return function(){return new n(this,t)}}return function(){return new n(this)}},S=e+" Iterator",E=!1,O=t.prototype,T=O[g]||O["@@iterator"]||h&&O[h],B=!A&&T||I(h),j="Array"==e&&O.entries||T;if(j&&(x=o(j.call(new t)),p!==Object.prototype&&x.next&&(f||o(x)===p||(a?a(x,p):"function"!=typeof x[g]&&c(x,g,b)),s(x,S,!0,!0),f&&(d[S]=b))),h==v&&T&&T.name!==v&&(E=!0,B=function(){return T.call(this)}),f&&!w||O[g]===B||c(O,g,B),d[e]=B,h)if(k={values:I(v),keys:C?B:I(m),entries:I(y)},w)for(_ in k)(A||E||!(_ in O))&&u(O,_,k[_]);else r({target:e,proto:!0,forced:A||E},k);return k}},7235:(t,e,n)=>{var r=n(857),i=n(6656),o=n(6061),a=n(3070).f;t.exports=function(t){var e=r.Symbol||(r.Symbol={});i(e,t)||a(e,t,{value:o.f(t)})}},9781:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(t,e,n)=>{var r=n(7854),i=n(111),o=r.document,a=i(o)&&i(o.createElement);t.exports=function(t){return a?o.createElement(t):{}}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8334:(t,e,n)=>{var r=n(8113);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},8113:(t,e,n)=>{var r=n(5005);t.exports=r("navigator","userAgent")||""},7392:(t,e,n)=>{var r,i,o=n(7854),a=n(8113),s=o.process,c=s&&s.versions,u=c&&c.v8;u?i=(r=u.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(i=r[1]),t.exports=i&&+i},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,e,n)=>{var r=n(7854),i=n(1236).f,o=n(8880),a=n(1320),s=n(3505),c=n(9920),u=n(4705);t.exports=function(t,e){var n,l,f,d,h,p=t.target,A=t.global,g=t.stat;if(n=A?r:g?r[p]||s(p,{}):(r[p]||{}).prototype)for(l in e){if(d=e[l],f=t.noTargetGet?(h=i(n,l))&&h.value:n[l],!u(A?l:p+(g?".":"#")+l,t.forced)&&void 0!==f){if(typeof d==typeof f)continue;c(d,f)}(t.sham||f&&f.sham)&&o(d,"sham",!0),a(n,l,d,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},7007:(t,e,n)=>{"use strict";n(4916);var r=n(1320),i=n(7293),o=n(5112),a=n(2261),s=n(8880),c=o("species"),u=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l="$0"==="a".replace(/./,"$0"),f=o("replace"),d=!!/./[f]&&""===/./[f]("a","$0"),h=!i((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));t.exports=function(t,e,n,f){var p=o(t),A=!i((function(){var e={};return e[p]=function(){return 7},7!=""[t](e)})),g=A&&!i((function(){var e=!1,n=/a/;return"split"===t&&((n={}).constructor={},n.constructor[c]=function(){return n},n.flags="",n[p]=/./[p]),n.exec=function(){return e=!0,null},n[p](""),!e}));if(!A||!g||"replace"===t&&(!u||!l||d)||"split"===t&&!h){var m=/./[p],v=n(p,""[t],(function(t,e,n,r,i){return e.exec===a?A&&!i?{done:!0,value:m.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}),{REPLACE_KEEPS_$0:l,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:d}),y=v[0],b=v[1];r(String.prototype,t,y),r(RegExp.prototype,p,2==e?function(t,e){return b.call(t,this,e)}:function(t){return b.call(t,this)})}f&&s(RegExp.prototype[p],"sham",!0)}},6790:(t,e,n)=>{"use strict";var r=n(3157),i=n(7466),o=n(9974),a=function(t,e,n,s,c,u,l,f){for(var d,h=c,p=0,A=!!l&&o(l,f,3);p<s;){if(p in n){if(d=A?A(n[p],p,e):n[p],u>0&&r(d))h=a(t,e,d,i(d.length),h,u-1)-1;else{if(h>=9007199254740991)throw TypeError("Exceed the acceptable array length");t[h]=d}h++}p++}return h};t.exports=a},6677:(t,e,n)=>{var r=n(7293);t.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},9974:(t,e,n)=>{var r=n(3099);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},7065:(t,e,n)=>{"use strict";var r=n(3099),i=n(111),o=[].slice,a={};t.exports=Function.bind||function(t){var e=r(this),n=o.call(arguments,1),s=function(){var r=n.concat(o.call(arguments));return this instanceof s?function(t,e,n){if(!(e in a)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";a[e]=Function("C,a","return new C("+r.join(",")+")")}return a[e](t,n)}(e,r.length,r):e.apply(t,r)};return i(e.prototype)&&(s.prototype=e.prototype),s}},5005:(t,e,n)=>{var r=n(857),i=n(7854),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(r[t])||o(i[t]):r[t]&&r[t][e]||i[t]&&i[t][e]}},1246:(t,e,n)=>{var r=n(648),i=n(7497),o=n(5112)("iterator");t.exports=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},8554:(t,e,n)=>{var r=n(9670),i=n(1246);t.exports=function(t){var e=i(t);if("function"!=typeof e)throw TypeError(String(t)+" is not iterable");return r(e.call(t))}},7854:(t,e,n)=>{var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||Function("return this")()},6656:t=>{var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},3501:t=>{t.exports={}},842:(t,e,n)=>{var r=n(7854);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},490:(t,e,n)=>{var r=n(5005);t.exports=r("document","documentElement")},4664:(t,e,n)=>{var r=n(9781),i=n(7293),o=n(317);t.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},1179:t=>{var e=1/0,n=Math.abs,r=Math.pow,i=Math.floor,o=Math.log,a=Math.LN2;t.exports={pack:function(t,s,c){var u,l,f,d=new Array(c),h=8*c-s-1,p=(1<<h)-1,A=p>>1,g=23===s?r(2,-24)-r(2,-77):0,m=t<0||0===t&&1/t<0?1:0,v=0;for((t=n(t))!=t||t===e?(l=t!=t?1:0,u=p):(u=i(o(t)/a),t*(f=r(2,-u))<1&&(u--,f*=2),(t+=u+A>=1?g/f:g*r(2,1-A))*f>=2&&(u++,f/=2),u+A>=p?(l=0,u=p):u+A>=1?(l=(t*f-1)*r(2,s),u+=A):(l=t*r(2,A-1)*r(2,s),u=0));s>=8;d[v++]=255&l,l/=256,s-=8);for(u=u<<s|l,h+=s;h>0;d[v++]=255&u,u/=256,h-=8);return d[--v]|=128*m,d},unpack:function(t,n){var i,o=t.length,a=8*o-n-1,s=(1<<a)-1,c=s>>1,u=a-7,l=o-1,f=t[l--],d=127&f;for(f>>=7;u>0;d=256*d+t[l],l--,u-=8);for(i=d&(1<<-u)-1,d>>=-u,u+=n;u>0;i=256*i+t[l],l--,u-=8);if(0===d)d=1-c;else{if(d===s)return i?NaN:f?-1/0:e;i+=r(2,n),d-=c}return(f?-1:1)*i*r(2,d-n)}}},8361:(t,e,n)=>{var r=n(7293),i=n(4326),o="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?o.call(t,""):Object(t)}:Object},9587:(t,e,n)=>{var r=n(111),i=n(7674);t.exports=function(t,e,n){var o,a;return i&&"function"==typeof(o=e.constructor)&&o!==n&&r(a=o.prototype)&&a!==n.prototype&&i(t,a),t}},2788:(t,e,n)=>{var r=n(5465),i=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return i.call(t)}),t.exports=r.inspectSource},2423:(t,e,n)=>{var r=n(3501),i=n(111),o=n(6656),a=n(3070).f,s=n(9711),c=n(6677),u=s("meta"),l=0,f=Object.isExtensible||function(){return!0},d=function(t){a(t,u,{value:{objectID:"O"+ ++l,weakData:{}}})},h=t.exports={REQUIRED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,u)){if(!f(t))return"F";if(!e)return"E";d(t)}return t[u].objectID},getWeakData:function(t,e){if(!o(t,u)){if(!f(t))return!0;if(!e)return!1;d(t)}return t[u].weakData},onFreeze:function(t){return c&&h.REQUIRED&&f(t)&&!o(t,u)&&d(t),t}};r[u]=!0},9909:(t,e,n)=>{var r,i,o,a=n(8536),s=n(7854),c=n(111),u=n(8880),l=n(6656),f=n(6200),d=n(3501),h=s.WeakMap;if(a){var p=new h,A=p.get,g=p.has,m=p.set;r=function(t,e){return m.call(p,t,e),e},i=function(t){return A.call(p,t)||{}},o=function(t){return g.call(p,t)}}else{var v=f("state");d[v]=!0,r=function(t,e){return u(t,v,e),e},i=function(t){return l(t,v)?t[v]:{}},o=function(t){return l(t,v)}}t.exports={set:r,get:i,has:o,enforce:function(t){return o(t)?i(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!c(e)||(n=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},7659:(t,e,n)=>{var r=n(5112),i=n(7497),o=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||a[o]===t)}},3157:(t,e,n)=>{var r=n(4326);t.exports=Array.isArray||function(t){return"Array"==r(t)}},4705:(t,e,n)=>{var r=n(7293),i=/#|\.prototype\./,o=function(t,e){var n=s[a(t)];return n==u||n!=c&&("function"==typeof e?r(e):!!e)},a=o.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=o.data={},c=o.NATIVE="N",u=o.POLYFILL="P";t.exports=o},8730:(t,e,n)=>{var r=n(111),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},111:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},1913:t=>{t.exports=!1},7850:(t,e,n)=>{var r=n(111),i=n(4326),o=n(5112)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},408:(t,e,n)=>{var r=n(9670),i=n(7659),o=n(7466),a=n(9974),s=n(1246),c=n(3411),u=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,n,l,f){var d,h,p,A,g,m,v,y=a(e,n,l?2:1);if(f)d=t;else{if("function"!=typeof(h=s(t)))throw TypeError("Target is not iterable");if(i(h)){for(p=0,A=o(t.length);A>p;p++)if((g=l?y(r(v=t[p])[0],v[1]):y(t[p]))&&g instanceof u)return g;return new u(!1)}d=h.call(t)}for(m=d.next;!(v=m.call(d)).done;)if("object"==typeof(g=c(d,y,v.value,l))&&g&&g instanceof u)return g;return new u(!1)}).stop=function(t){return new u(!0,t)}},3383:(t,e,n)=>{"use strict";var r,i,o,a=n(9518),s=n(8880),c=n(6656),u=n(5112),l=n(1913),f=u("iterator"),d=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(r=i):d=!0),null==r&&(r={}),l||c(r,f)||s(r,f,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},7497:t=>{t.exports={}},6736:t=>{var e=Math.expm1,n=Math.exp;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:n(t)-1}:e},6130:(t,e,n)=>{var r=n(4310),i=Math.abs,o=Math.pow,a=o(2,-52),s=o(2,-23),c=o(2,127)*(2-s),u=o(2,-126);t.exports=Math.fround||function(t){var e,n,o=i(t),l=r(t);return o<u?l*(o/u/s+1/a-1/a)*u*s:(n=(e=(1+s/a)*o)-(e-o))>c||n!=n?l*(1/0):l*n}},6513:t=>{var e=Math.log;t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:e(1+t)}},4310:t=>{t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},5948:(t,e,n)=>{var r,i,o,a,s,c,u,l,f=n(7854),d=n(1236).f,h=n(4326),p=n(261).set,A=n(8334),g=f.MutationObserver||f.WebKitMutationObserver,m=f.process,v=f.Promise,y="process"==h(m),b=d(f,"queueMicrotask"),C=b&&b.value;C||(r=function(){var t,e;for(y&&(t=m.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?a():o=void 0,t}}o=void 0,t&&t.enter()},y?a=function(){m.nextTick(r)}:g&&!A?(s=!0,c=document.createTextNode(""),new g(r).observe(c,{characterData:!0}),a=function(){c.data=s=!s}):v&&v.resolve?(u=v.resolve(void 0),l=u.then,a=function(){l.call(u,r)}):a=function(){p.call(f,r)}),t.exports=C||function(t){var e={fn:t,next:void 0};o&&(o.next=e),i||(i=e,a()),o=e}},3366:(t,e,n)=>{var r=n(7854);t.exports=r.Promise},133:(t,e,n)=>{var r=n(7293);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},590:(t,e,n)=>{var r=n(7293),i=n(5112),o=n(1913),a=i("iterator");t.exports=!r((function(){var t=new URL("b?a=1&b=2&c=3","http://a"),e=t.searchParams,n="";return t.pathname="c%20d",e.forEach((function(t,r){e.delete("b"),n+=r+t})),o&&!t.toJSON||!e.sort||"http://a/c%20d?a=1&c=3"!==t.href||"3"!==e.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!e[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==n||"x"!==new URL("http://x",void 0).host}))},8536:(t,e,n)=>{var r=n(7854),i=n(2788),o=r.WeakMap;t.exports="function"==typeof o&&/native code/.test(i(o))},8523:(t,e,n)=>{"use strict";var r=n(3099),i=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new i(t)}},3929:(t,e,n)=>{var r=n(7850);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},7023:(t,e,n)=>{var r=n(7854).isFinite;t.exports=Number.isFinite||function(t){return"number"==typeof t&&r(t)}},2814:(t,e,n)=>{var r=n(7854),i=n(3111).trim,o=n(1361),a=r.parseFloat,s=1/a(o+"-0")!=-1/0;t.exports=s?function(t){var e=i(String(t)),n=a(e);return 0===n&&"-"==e.charAt(0)?-0:n}:a},3009:(t,e,n)=>{var r=n(7854),i=n(3111).trim,o=n(1361),a=r.parseInt,s=/^[+-]?0[Xx]/,c=8!==a(o+"08")||22!==a(o+"0x16");t.exports=c?function(t,e){var n=i(String(t));return a(n,e>>>0||(s.test(n)?16:10))}:a},1574:(t,e,n)=>{"use strict";var r=n(9781),i=n(7293),o=n(1956),a=n(5181),s=n(5296),c=n(7908),u=n(8361),l=Object.assign,f=Object.defineProperty;t.exports=!l||i((function(){if(r&&1!==l({b:1},l(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},n=Symbol(),i="abcdefghijklmnopqrst";return t[n]=7,i.split("").forEach((function(t){e[t]=t})),7!=l({},t)[n]||o(l({},e)).join("")!=i}))?function(t,e){for(var n=c(t),i=arguments.length,l=1,f=a.f,d=s.f;i>l;)for(var h,p=u(arguments[l++]),A=f?o(p).concat(f(p)):o(p),g=A.length,m=0;g>m;)h=A[m++],r&&!d.call(p,h)||(n[h]=p[h]);return n}:l},30:(t,e,n)=>{var r,i=n(9670),o=n(6048),a=n(748),s=n(3501),c=n(490),u=n(317),l=n(6200),f="prototype",d="script",h=l("IE_PROTO"),p=function(){},A=function(t){return"<"+d+">"+t+"</"+d+">"},g=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e,n;g=r?function(t){t.write(A("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):(e=u("iframe"),n="java"+d+":",e.style.display="none",c.appendChild(e),e.src=String(n),(t=e.contentWindow.document).open(),t.write(A("document.F=Object")),t.close(),t.F);for(var i=a.length;i--;)delete g[f][a[i]];return g()};s[h]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(p[f]=i(t),n=new p,p[f]=null,n[h]=t):n=g(),void 0===e?n:o(n,e)}},6048:(t,e,n)=>{var r=n(9781),i=n(3070),o=n(9670),a=n(1956);t.exports=r?Object.defineProperties:function(t,e){o(t);for(var n,r=a(e),s=r.length,c=0;s>c;)i.f(t,n=r[c++],e[n]);return t}},3070:(t,e,n)=>{var r=n(9781),i=n(4664),o=n(9670),a=n(7593),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(o(t),e=a(e,!0),o(n),i)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},1236:(t,e,n)=>{var r=n(9781),i=n(5296),o=n(9114),a=n(5656),s=n(7593),c=n(6656),u=n(4664),l=Object.getOwnPropertyDescriptor;e.f=r?l:function(t,e){if(t=a(t),e=s(e,!0),u)try{return l(t,e)}catch(t){}if(c(t,e))return o(!i.f.call(t,e),t[e])}},1156:(t,e,n)=>{var r=n(5656),i=n(8006).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},8006:(t,e,n)=>{var r=n(6324),i=n(748).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},5181:(t,e)=>{e.f=Object.getOwnPropertySymbols},9518:(t,e,n)=>{var r=n(6656),i=n(7908),o=n(6200),a=n(8544),s=o("IE_PROTO"),c=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=i(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},6324:(t,e,n)=>{var r=n(6656),i=n(5656),o=n(1318).indexOf,a=n(3501);t.exports=function(t,e){var n,s=i(t),c=0,u=[];for(n in s)!r(a,n)&&r(s,n)&&u.push(n);for(;e.length>c;)r(s,n=e[c++])&&(~o(u,n)||u.push(n));return u}},1956:(t,e,n)=>{var r=n(6324),i=n(748);t.exports=Object.keys||function(t){return r(t,i)}},5296:(t,e)=>{"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,i=r&&!n.call({1:2},1);e.f=i?function(t){var e=r(this,t);return!!e&&e.enumerable}:n},9026:(t,e,n)=>{"use strict";var r=n(1913),i=n(7854),o=n(7293);t.exports=r||!o((function(){var t=Math.random();__defineSetter__.call(null,t,(function(){})),delete i[t]}))},7674:(t,e,n)=>{var r=n(9670),i=n(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,o){return r(n),i(o),e?t.call(n,o):n.__proto__=o,n}}():void 0)},4699:(t,e,n)=>{var r=n(9781),i=n(1956),o=n(5656),a=n(5296).f,s=function(t){return function(e){for(var n,s=o(e),c=i(s),u=c.length,l=0,f=[];u>l;)n=c[l++],r&&!a.call(s,n)||f.push(t?[n,s[n]]:s[n]);return f}};t.exports={entries:s(!0),values:s(!1)}},288:(t,e,n)=>{"use strict";var r=n(1694),i=n(648);t.exports=r?{}.toString:function(){return"[object "+i(this)+"]"}},3887:(t,e,n)=>{var r=n(5005),i=n(8006),o=n(5181),a=n(9670);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(a(t)),n=o.f;return n?e.concat(n(t)):e}},857:(t,e,n)=>{var r=n(7854);t.exports=r},2534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:(t,e,n)=>{var r=n(9670),i=n(111),o=n(8523);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},2248:(t,e,n)=>{var r=n(1320);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},1320:(t,e,n)=>{var r=n(7854),i=n(8880),o=n(6656),a=n(3505),s=n(2788),c=n(9909),u=c.get,l=c.enforce,f=String(String).split("String");(t.exports=function(t,e,n,s){var c=!!s&&!!s.unsafe,u=!!s&&!!s.enumerable,d=!!s&&!!s.noTargetGet;"function"==typeof n&&("string"!=typeof e||o(n,"name")||i(n,"name",e),l(n).source=f.join("string"==typeof e?e:"")),t!==r?(c?!d&&t[e]&&(u=!0):delete t[e],u?t[e]=n:i(t,e,n)):u?t[e]=n:a(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||s(this)}))},7651:(t,e,n)=>{var r=n(4326),i=n(2261);t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var o=n.call(t,e);if("object"!=typeof o)throw TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},2261:(t,e,n)=>{"use strict";var r,i,o=n(7066),a=n(2999),s=RegExp.prototype.exec,c=String.prototype.replace,u=s,l=(r=/a/,i=/b*/g,s.call(r,"a"),s.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),f=a.UNSUPPORTED_Y||a.BROKEN_CARET,d=void 0!==/()??/.exec("")[1];(l||d||f)&&(u=function(t){var e,n,r,i,a=this,u=f&&a.sticky,h=o.call(a),p=a.source,A=0,g=t;return u&&(-1===(h=h.replace("y","")).indexOf("g")&&(h+="g"),g=String(t).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==t[a.lastIndex-1])&&(p="(?: "+p+")",g=" "+g,A++),n=new RegExp("^(?:"+p+")",h)),d&&(n=new RegExp("^"+p+"$(?!\\s)",h)),l&&(e=a.lastIndex),r=s.call(u?n:a,g),u?r?(r.input=r.input.slice(A),r[0]=r[0].slice(A),r.index=a.lastIndex,a.lastIndex+=r[0].length):a.lastIndex=0:l&&r&&(a.lastIndex=a.global?r.index+r[0].length:e),d&&r&&r.length>1&&c.call(r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),t.exports=u},7066:(t,e,n)=>{"use strict";var r=n(9670);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},2999:(t,e,n)=>{"use strict";var r=n(7293);function i(t,e){return RegExp(t,e)}e.UNSUPPORTED_Y=r((function(){var t=i("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=r((function(){var t=i("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},4488:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},1150:t=>{t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},3505:(t,e,n)=>{var r=n(7854),i=n(8880);t.exports=function(t,e){try{i(r,t,e)}catch(n){r[t]=e}return e}},6340:(t,e,n)=>{"use strict";var r=n(5005),i=n(3070),o=n(5112),a=n(9781),s=o("species");t.exports=function(t){var e=r(t),n=i.f;a&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},8003:(t,e,n)=>{var r=n(3070).f,i=n(6656),o=n(5112)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},6200:(t,e,n)=>{var r=n(2309),i=n(9711),o=r("keys");t.exports=function(t){return o[t]||(o[t]=i(t))}},5465:(t,e,n)=>{var r=n(7854),i=n(3505),o="__core-js_shared__",a=r[o]||i(o,{});t.exports=a},2309:(t,e,n)=>{var r=n(1913),i=n(5465);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},6707:(t,e,n)=>{var r=n(9670),i=n(3099),o=n(5112)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},3429:(t,e,n)=>{var r=n(7293);t.exports=function(t){return r((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}))}},8710:(t,e,n)=>{var r=n(9958),i=n(4488),o=function(t){return function(e,n){var o,a,s=String(i(e)),c=r(n),u=s.length;return c<0||c>=u?t?"":void 0:(o=s.charCodeAt(c))<55296||o>56319||c+1===u||(a=s.charCodeAt(c+1))<56320||a>57343?t?s.charAt(c):o:t?s.slice(c,c+2):a-56320+(o-55296<<10)+65536}};t.exports={codeAt:o(!1),charAt:o(!0)}},7061:(t,e,n)=>{var r=n(8113);t.exports=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(r)},6650:(t,e,n)=>{var r=n(7466),i=n(8415),o=n(4488),a=Math.ceil,s=function(t){return function(e,n,s){var c,u,l=String(o(e)),f=l.length,d=void 0===s?" ":String(s),h=r(n);return h<=f||""==d?l:(c=h-f,(u=i.call(d,a(c/d.length))).length>c&&(u=u.slice(0,c)),t?l+u:u+l)}};t.exports={start:s(!1),end:s(!0)}},3197:t=>{"use strict";var e=2147483647,n=/[^\0-\u007E]/,r=/[.\u3002\uFF0E\uFF61]/g,i="Overflow: input needs wider integers to process",o=Math.floor,a=String.fromCharCode,s=function(t){return t+22+75*(t<26)},c=function(t,e,n){var r=0;for(t=n?o(t/700):t>>1,t+=o(t/e);t>455;r+=36)t=o(t/35);return o(r+36*t/(t+38))},u=function(t){var n=[];t=function(t){for(var e=[],n=0,r=t.length;n<r;){var i=t.charCodeAt(n++);if(i>=55296&&i<=56319&&n<r){var o=t.charCodeAt(n++);56320==(64512&o)?e.push(((1023&i)<<10)+(1023&o)+65536):(e.push(i),n--)}else e.push(i)}return e}(t);var r,u,l=t.length,f=128,d=0,h=72;for(r=0;r<t.length;r++)(u=t[r])<128&&n.push(a(u));var p=n.length,A=p;for(p&&n.push("-");A<l;){var g=e;for(r=0;r<t.length;r++)(u=t[r])>=f&&u<g&&(g=u);var m=A+1;if(g-f>o((e-d)/m))throw RangeError(i);for(d+=(g-f)*m,f=g,r=0;r<t.length;r++){if((u=t[r])<f&&++d>e)throw RangeError(i);if(u==f){for(var v=d,y=36;;y+=36){var b=y<=h?1:y>=h+26?26:y-h;if(v<b)break;var C=v-b,w=36-b;n.push(a(s(b+C%w))),v=o(C/w)}n.push(a(s(v))),h=c(d,m,A==p),d=0,++A}}++d,++f}return n.join("")};t.exports=function(t){var e,i,o=[],a=t.toLowerCase().replace(r,".").split(".");for(e=0;e<a.length;e++)i=a[e],o.push(n.test(i)?"xn--"+u(i):i);return o.join(".")}},8415:(t,e,n)=>{"use strict";var r=n(9958),i=n(4488);t.exports="".repeat||function(t){var e=String(i(this)),n="",o=r(t);if(o<0||o==1/0)throw RangeError("Wrong number of repetitions");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(n+=e);return n}},6091:(t,e,n)=>{var r=n(7293),i=n(1361);t.exports=function(t){return r((function(){return!!i[t]()||"​᠎"!="​᠎"[t]()||i[t].name!==t}))}},3111:(t,e,n)=>{var r=n(4488),i="["+n(1361)+"]",o=RegExp("^"+i+i+"*"),a=RegExp(i+i+"*$"),s=function(t){return function(e){var n=String(r(e));return 1&t&&(n=n.replace(o,"")),2&t&&(n=n.replace(a,"")),n}};t.exports={start:s(1),end:s(2),trim:s(3)}},261:(t,e,n)=>{var r,i,o,a=n(7854),s=n(7293),c=n(4326),u=n(9974),l=n(490),f=n(317),d=n(8334),h=a.location,p=a.setImmediate,A=a.clearImmediate,g=a.process,m=a.MessageChannel,v=a.Dispatch,y=0,b={},C="onreadystatechange",w=function(t){if(b.hasOwnProperty(t)){var e=b[t];delete b[t],e()}},x=function(t){return function(){w(t)}},k=function(t){w(t.data)},_=function(t){a.postMessage(t+"",h.protocol+"//"+h.host)};p&&A||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return b[++y]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(y),y},A=function(t){delete b[t]},"process"==c(g)?r=function(t){g.nextTick(x(t))}:v&&v.now?r=function(t){v.now(x(t))}:m&&!d?(o=(i=new m).port2,i.port1.onmessage=k,r=u(o.postMessage,o,1)):!a.addEventListener||"function"!=typeof postMessage||a.importScripts||s(_)||"file:"===h.protocol?r=C in f("script")?function(t){l.appendChild(f("script"))[C]=function(){l.removeChild(this),w(t)}}:function(t){setTimeout(x(t),0)}:(r=_,a.addEventListener("message",k,!1))),t.exports={set:p,clear:A}},863:(t,e,n)=>{var r=n(4326);t.exports=function(t){if("number"!=typeof t&&"Number"!=r(t))throw TypeError("Incorrect invocation");return+t}},1400:(t,e,n)=>{var r=n(9958),i=Math.max,o=Math.min;t.exports=function(t,e){var n=r(t);return n<0?i(n+e,0):o(n,e)}},7067:(t,e,n)=>{var r=n(9958),i=n(7466);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=i(e);if(e!==n)throw RangeError("Wrong length or index");return n}},5656:(t,e,n)=>{var r=n(8361),i=n(4488);t.exports=function(t){return r(i(t))}},9958:t=>{var e=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:e)(t)}},7466:(t,e,n)=>{var r=n(9958),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},7908:(t,e,n)=>{var r=n(4488);t.exports=function(t){return Object(r(t))}},4590:(t,e,n)=>{var r=n(3002);t.exports=function(t,e){var n=r(t);if(n%e)throw RangeError("Wrong offset");return n}},3002:(t,e,n)=>{var r=n(9958);t.exports=function(t){var e=r(t);if(e<0)throw RangeError("The argument can't be less than 0");return e}},7593:(t,e,n)=>{var r=n(111);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},1694:(t,e,n)=>{var r={};r[n(5112)("toStringTag")]="z",t.exports="[object z]"===String(r)},9843:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(9781),a=n(3832),s=n(260),c=n(3331),u=n(5787),l=n(9114),f=n(8880),d=n(7466),h=n(7067),p=n(4590),A=n(7593),g=n(6656),m=n(648),v=n(111),y=n(30),b=n(7674),C=n(8006).f,w=n(7321),x=n(2092).forEach,k=n(6340),_=n(3070),I=n(1236),S=n(9909),E=n(9587),O=S.get,T=S.set,B=_.f,j=I.f,R=Math.round,L=i.RangeError,M=c.ArrayBuffer,P=c.DataView,z=s.NATIVE_ARRAY_BUFFER_VIEWS,F=s.TYPED_ARRAY_TAG,U=s.TypedArray,N=s.TypedArrayPrototype,D=s.aTypedArrayConstructor,$=s.isTypedArray,W="BYTES_PER_ELEMENT",Y="Wrong length",G=function(t,e){for(var n=0,r=e.length,i=new(D(t))(r);r>n;)i[n]=e[n++];return i},J=function(t,e){B(t,e,{get:function(){return O(this)[e]}})},K=function(t){var e;return t instanceof M||"ArrayBuffer"==(e=m(t))||"SharedArrayBuffer"==e},q=function(t,e){return $(t)&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Z=function(t,e){return q(t,e=A(e,!0))?l(2,t[e]):j(t,e)},H=function(t,e,n){return!(q(t,e=A(e,!0))&&v(n)&&g(n,"value"))||g(n,"get")||g(n,"set")||n.configurable||g(n,"writable")&&!n.writable||g(n,"enumerable")&&!n.enumerable?B(t,e,n):(t[e]=n.value,t)};o?(z||(I.f=Z,_.f=H,J(N,"buffer"),J(N,"byteOffset"),J(N,"byteLength"),J(N,"length")),r({target:"Object",stat:!0,forced:!z},{getOwnPropertyDescriptor:Z,defineProperty:H}),t.exports=function(t,e,n){var o=t.match(/\d+$/)[0]/8,s=t+(n?"Clamped":"")+"Array",c="get"+t,l="set"+t,A=i[s],g=A,m=g&&g.prototype,_={},I=function(t,e){B(t,e,{get:function(){return function(t,e){var n=O(t);return n.view[c](e*o+n.byteOffset,!0)}(this,e)},set:function(t){return function(t,e,r){var i=O(t);n&&(r=(r=R(r))<0?0:r>255?255:255&r),i.view[l](e*o+i.byteOffset,r,!0)}(this,e,t)},enumerable:!0})};z?a&&(g=e((function(t,e,n,r){return u(t,g,s),E(v(e)?K(e)?void 0!==r?new A(e,p(n,o),r):void 0!==n?new A(e,p(n,o)):new A(e):$(e)?G(g,e):w.call(g,e):new A(h(e)),t,g)})),b&&b(g,U),x(C(A),(function(t){t in g||f(g,t,A[t])})),g.prototype=m):(g=e((function(t,e,n,r){u(t,g,s);var i,a,c,l=0,f=0;if(v(e)){if(!K(e))return $(e)?G(g,e):w.call(g,e);i=e,f=p(n,o);var A=e.byteLength;if(void 0===r){if(A%o)throw L(Y);if((a=A-f)<0)throw L(Y)}else if((a=d(r)*o)+f>A)throw L(Y);c=a/o}else c=h(e),i=new M(a=c*o);for(T(t,{buffer:i,byteOffset:f,byteLength:a,length:c,view:new P(i)});l<c;)I(t,l++)})),b&&b(g,U),m=g.prototype=y(N)),m.constructor!==g&&f(m,"constructor",g),F&&f(m,F,s),_[s]=g,r({global:!0,forced:g!=A,sham:!z},_),W in g||f(g,W,o),W in m||f(m,W,o),k(s)}):t.exports=function(){}},3832:(t,e,n)=>{var r=n(7854),i=n(7293),o=n(7072),a=n(260).NATIVE_ARRAY_BUFFER_VIEWS,s=r.ArrayBuffer,c=r.Int8Array;t.exports=!a||!i((function(){c(1)}))||!i((function(){new c(-1)}))||!o((function(t){new c,new c(null),new c(1.5),new c(t)}),!0)||i((function(){return 1!==new c(new s(2),1,void 0).length}))},7321:(t,e,n)=>{var r=n(7908),i=n(7466),o=n(1246),a=n(7659),s=n(9974),c=n(260).aTypedArrayConstructor;t.exports=function(t){var e,n,u,l,f,d,h=r(t),p=arguments.length,A=p>1?arguments[1]:void 0,g=void 0!==A,m=o(h);if(null!=m&&!a(m))for(d=(f=m.call(h)).next,h=[];!(l=d.call(f)).done;)h.push(l.value);for(g&&p>2&&(A=s(A,arguments[2],2)),n=i(h.length),u=new(c(this))(n),e=0;n>e;e++)u[e]=g?A(h[e],e):h[e];return u}},9711:t=>{var e=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+n).toString(36)}},3307:(t,e,n)=>{var r=n(133);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:(t,e,n)=>{var r=n(5112);e.f=r},5112:(t,e,n)=>{var r=n(7854),i=n(2309),o=n(6656),a=n(9711),s=n(133),c=n(3307),u=i("wks"),l=r.Symbol,f=c?l:l&&l.withoutSetter||a;t.exports=function(t){return o(u,t)||(s&&o(l,t)?u[t]=l[t]:u[t]=f("Symbol."+t)),u[t]}},1361:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},8264:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(3331),a=n(6340),s="ArrayBuffer",c=o[s];r({global:!0,forced:i[s]!==c},{ArrayBuffer:c}),a(s)},6938:(t,e,n)=>{var r=n(2109),i=n(260);r({target:"ArrayBuffer",stat:!0,forced:!i.NATIVE_ARRAY_BUFFER_VIEWS},{isView:i.isView})},9575:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(3331),a=n(9670),s=n(1400),c=n(7466),u=n(6707),l=o.ArrayBuffer,f=o.DataView,d=l.prototype.slice;r({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:i((function(){return!new l(2).slice(1,void 0).byteLength}))},{slice:function(t,e){if(void 0!==d&&void 0===e)return d.call(a(this),t);for(var n=a(this).byteLength,r=s(t,n),i=s(void 0===e?n:e,n),o=new(u(this,l))(c(i-r)),h=new f(this),p=new f(o),A=0;r<i;)p.setUint8(A++,h.getUint8(r++));return o}})},2222:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(3157),a=n(111),s=n(7908),c=n(7466),u=n(6135),l=n(5417),f=n(1194),d=n(5112),h=n(7392),p=d("isConcatSpreadable"),A=9007199254740991,g="Maximum allowed index exceeded",m=h>=51||!i((function(){var t=[];return t[p]=!1,t.concat()[0]!==t})),v=f("concat"),y=function(t){if(!a(t))return!1;var e=t[p];return void 0!==e?!!e:o(t)};r({target:"Array",proto:!0,forced:!m||!v},{concat:function(t){var e,n,r,i,o,a=s(this),f=l(a,0),d=0;for(e=-1,r=arguments.length;e<r;e++)if(y(o=-1===e?a:arguments[e])){if(d+(i=c(o.length))>A)throw TypeError(g);for(n=0;n<i;n++,d++)n in o&&u(f,d,o[n])}else{if(d>=A)throw TypeError(g);u(f,d++,o)}return f.length=d,f}})},545:(t,e,n)=>{var r=n(2109),i=n(1048),o=n(1223);r({target:"Array",proto:!0},{copyWithin:i}),o("copyWithin")},6541:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).every,o=n(2133),a=n(9207),s=o("every"),c=a("every");r({target:"Array",proto:!0,forced:!s||!c},{every:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},3290:(t,e,n)=>{var r=n(2109),i=n(1285),o=n(1223);r({target:"Array",proto:!0},{fill:i}),o("fill")},7327:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).filter,o=n(1194),a=n(9207),s=o("filter"),c=a("filter");r({target:"Array",proto:!0,forced:!s||!c},{filter:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},4553:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).findIndex,o=n(1223),a=n(9207),s="findIndex",c=!0,u=a(s);s in[]&&Array(1)[s]((function(){c=!1})),r({target:"Array",proto:!0,forced:c||!u},{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o(s)},9826:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).find,o=n(1223),a=n(9207),s="find",c=!0,u=a(s);s in[]&&Array(1)[s]((function(){c=!1})),r({target:"Array",proto:!0,forced:c||!u},{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o(s)},6535:(t,e,n)=>{"use strict";var r=n(2109),i=n(6790),o=n(7908),a=n(7466),s=n(3099),c=n(5417);r({target:"Array",proto:!0},{flatMap:function(t){var e,n=o(this),r=a(n.length);return s(t),(e=c(n,0)).length=i(e,n,n,r,0,1,t,arguments.length>1?arguments[1]:void 0),e}})},4944:(t,e,n)=>{"use strict";var r=n(2109),i=n(6790),o=n(7908),a=n(7466),s=n(9958),c=n(5417);r({target:"Array",proto:!0},{flat:function(){var t=arguments.length?arguments[0]:void 0,e=o(this),n=a(e.length),r=c(e,0);return r.length=i(r,e,e,n,0,void 0===t?1:s(t)),r}})},9554:(t,e,n)=>{"use strict";var r=n(2109),i=n(8533);r({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},1038:(t,e,n)=>{var r=n(2109),i=n(8457);r({target:"Array",stat:!0,forced:!n(7072)((function(t){Array.from(t)}))},{from:i})},6699:(t,e,n)=>{"use strict";var r=n(2109),i=n(1318).includes,o=n(1223);r({target:"Array",proto:!0,forced:!n(9207)("indexOf",{ACCESSORS:!0,1:0})},{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),o("includes")},2772:(t,e,n)=>{"use strict";var r=n(2109),i=n(1318).indexOf,o=n(2133),a=n(9207),s=[].indexOf,c=!!s&&1/[1].indexOf(1,-0)<0,u=o("indexOf"),l=a("indexOf",{ACCESSORS:!0,1:0});r({target:"Array",proto:!0,forced:c||!u||!l},{indexOf:function(t){return c?s.apply(this,arguments)||0:i(this,t,arguments.length>1?arguments[1]:void 0)}})},9753:(t,e,n)=>{n(2109)({target:"Array",stat:!0},{isArray:n(3157)})},6992:(t,e,n)=>{"use strict";var r=n(5656),i=n(1223),o=n(7497),a=n(9909),s=n(654),c="Array Iterator",u=a.set,l=a.getterFor(c);t.exports=s(Array,"Array",(function(t,e){u(this,{type:c,target:r(t),index:0,kind:e})}),(function(){var t=l(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},9600:(t,e,n)=>{"use strict";var r=n(2109),i=n(8361),o=n(5656),a=n(2133),s=[].join,c=i!=Object,u=a("join",",");r({target:"Array",proto:!0,forced:c||!u},{join:function(t){return s.call(o(this),void 0===t?",":t)}})},4986:(t,e,n)=>{var r=n(2109),i=n(6583);r({target:"Array",proto:!0,forced:i!==[].lastIndexOf},{lastIndexOf:i})},1249:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).map,o=n(1194),a=n(9207),s=o("map"),c=a("map");r({target:"Array",proto:!0,forced:!s||!c},{map:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},6572:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(6135);r({target:"Array",stat:!0,forced:i((function(){function t(){}return!(Array.of.call(t)instanceof t)}))},{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)o(n,t,arguments[t++]);return n.length=e,n}})},6644:(t,e,n)=>{"use strict";var r=n(2109),i=n(3671).right,o=n(2133),a=n(9207),s=o("reduceRight"),c=a("reduce",{1:0});r({target:"Array",proto:!0,forced:!s||!c},{reduceRight:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5827:(t,e,n)=>{"use strict";var r=n(2109),i=n(3671).left,o=n(2133),a=n(9207),s=o("reduce"),c=a("reduce",{1:0});r({target:"Array",proto:!0,forced:!s||!c},{reduce:function(t){return i(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5069:(t,e,n)=>{"use strict";var r=n(2109),i=n(3157),o=[].reverse,a=[1,2];r({target:"Array",proto:!0,forced:String(a)===String(a.reverse())},{reverse:function(){return i(this)&&(this.length=this.length),o.call(this)}})},7042:(t,e,n)=>{"use strict";var r=n(2109),i=n(111),o=n(3157),a=n(1400),s=n(7466),c=n(5656),u=n(6135),l=n(5112),f=n(1194),d=n(9207),h=f("slice"),p=d("slice",{ACCESSORS:!0,0:0,1:2}),A=l("species"),g=[].slice,m=Math.max;r({target:"Array",proto:!0,forced:!h||!p},{slice:function(t,e){var n,r,l,f=c(this),d=s(f.length),h=a(t,d),p=a(void 0===e?d:e,d);if(o(f)&&("function"!=typeof(n=f.constructor)||n!==Array&&!o(n.prototype)?i(n)&&null===(n=n[A])&&(n=void 0):n=void 0,n===Array||void 0===n))return g.call(f,h,p);for(r=new(void 0===n?Array:n)(m(p-h,0)),l=0;h<p;h++,l++)h in f&&u(r,l,f[h]);return r.length=l,r}})},5212:(t,e,n)=>{"use strict";var r=n(2109),i=n(2092).some,o=n(2133),a=n(9207),s=o("some"),c=a("some");r({target:"Array",proto:!0,forced:!s||!c},{some:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},2707:(t,e,n)=>{"use strict";var r=n(2109),i=n(3099),o=n(7908),a=n(7293),s=n(2133),c=[],u=c.sort,l=a((function(){c.sort(void 0)})),f=a((function(){c.sort(null)})),d=s("sort");r({target:"Array",proto:!0,forced:l||!f||!d},{sort:function(t){return void 0===t?u.call(o(this)):u.call(o(this),i(t))}})},8706:(t,e,n)=>{n(6340)("Array")},561:(t,e,n)=>{"use strict";var r=n(2109),i=n(1400),o=n(9958),a=n(7466),s=n(7908),c=n(5417),u=n(6135),l=n(1194),f=n(9207),d=l("splice"),h=f("splice",{ACCESSORS:!0,0:0,1:2}),p=Math.max,A=Math.min;r({target:"Array",proto:!0,forced:!d||!h},{splice:function(t,e){var n,r,l,f,d,h,g=s(this),m=a(g.length),v=i(t,m),y=arguments.length;if(0===y?n=r=0:1===y?(n=0,r=m-v):(n=y-2,r=A(p(o(e),0),m-v)),m+n-r>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(l=c(g,r),f=0;f<r;f++)(d=v+f)in g&&u(l,f,g[d]);if(l.length=r,n<r){for(f=v;f<m-r;f++)h=f+n,(d=f+r)in g?g[h]=g[d]:delete g[h];for(f=m;f>m-r+n;f--)delete g[f-1]}else if(n>r)for(f=m-r;f>v;f--)h=f+n-1,(d=f+r-1)in g?g[h]=g[d]:delete g[h];for(f=0;f<n;f++)g[f+v]=arguments[f+2];return g.length=m-r+n,l}})},9244:(t,e,n)=>{n(1223)("flatMap")},3792:(t,e,n)=>{n(1223)("flat")},6716:(t,e,n)=>{var r=n(2109),i=n(3331);r({global:!0,forced:!n(4019)},{DataView:i.DataView})},3843:(t,e,n)=>{n(2109)({target:"Date",stat:!0},{now:function(){return(new Date).getTime()}})},5268:(t,e,n)=>{var r=n(2109),i=n(5573);r({target:"Date",proto:!0,forced:Date.prototype.toISOString!==i},{toISOString:i})},5735:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(7908),a=n(7593);r({target:"Date",proto:!0,forced:i((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(t){var e=o(this),n=a(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},6078:(t,e,n)=>{var r=n(8880),i=n(8709),o=n(5112)("toPrimitive"),a=Date.prototype;o in a||r(a,o,i)},3710:(t,e,n)=>{var r=n(1320),i=Date.prototype,o="Invalid Date",a="toString",s=i[a],c=i.getTime;new Date(NaN)+""!=o&&r(i,a,(function(){var t=c.call(this);return t==t?s.call(this):o}))},4812:(t,e,n)=>{n(2109)({target:"Function",proto:!0},{bind:n(7065)})},4855:(t,e,n)=>{"use strict";var r=n(111),i=n(3070),o=n(9518),a=n(5112)("hasInstance"),s=Function.prototype;a in s||i.f(s,a,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},8309:(t,e,n)=>{var r=n(9781),i=n(3070).f,o=Function.prototype,a=o.toString,s=/^\s*function ([^ (]*)/,c="name";r&&!(c in o)&&i(o,c,{configurable:!0,get:function(){try{return a.call(this).match(s)[1]}catch(t){return""}}})},5837:(t,e,n)=>{n(2109)({global:!0},{globalThis:n(7854)})},8862:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(7293),a=i("JSON","stringify"),s=/[\uD800-\uDFFF]/g,c=/^[\uD800-\uDBFF]$/,u=/^[\uDC00-\uDFFF]$/,l=function(t,e,n){var r=n.charAt(e-1),i=n.charAt(e+1);return c.test(t)&&!u.test(i)||u.test(t)&&!c.test(r)?"\\u"+t.charCodeAt(0).toString(16):t},f=o((function(){return'"\\udf06\\ud834"'!==a("\udf06\ud834")||'"\\udead"'!==a("\udead")}));a&&r({target:"JSON",stat:!0,forced:f},{stringify:function(t,e,n){var r=a.apply(null,arguments);return"string"==typeof r?r.replace(s,l):r}})},3706:(t,e,n)=>{var r=n(7854);n(8003)(r.JSON,"JSON",!0)},1532:(t,e,n)=>{"use strict";var r=n(7710),i=n(5631);t.exports=r("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),i)},9752:(t,e,n)=>{var r=n(2109),i=n(6513),o=Math.acosh,a=Math.log,s=Math.sqrt,c=Math.LN2;r({target:"Math",stat:!0,forced:!o||710!=Math.floor(o(Number.MAX_VALUE))||o(1/0)!=1/0},{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?a(t)+c:i(t-1+s(t-1)*s(t+1))}})},2376:(t,e,n)=>{var r=n(2109),i=Math.asinh,o=Math.log,a=Math.sqrt;r({target:"Math",stat:!0,forced:!(i&&1/i(0)>0)},{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):o(e+a(e*e+1)):e}})},3181:(t,e,n)=>{var r=n(2109),i=Math.atanh,o=Math.log;r({target:"Math",stat:!0,forced:!(i&&1/i(-0)<0)},{atanh:function(t){return 0==(t=+t)?t:o((1+t)/(1-t))/2}})},3484:(t,e,n)=>{var r=n(2109),i=n(4310),o=Math.abs,a=Math.pow;r({target:"Math",stat:!0},{cbrt:function(t){return i(t=+t)*a(o(t),1/3)}})},2388:(t,e,n)=>{var r=n(2109),i=Math.floor,o=Math.log,a=Math.LOG2E;r({target:"Math",stat:!0},{clz32:function(t){return(t>>>=0)?31-i(o(t+.5)*a):32}})},8621:(t,e,n)=>{var r=n(2109),i=n(6736),o=Math.cosh,a=Math.abs,s=Math.E;r({target:"Math",stat:!0,forced:!o||o(710)===1/0},{cosh:function(t){var e=i(a(t)-1)+1;return(e+1/(e*s*s))*(s/2)}})},403:(t,e,n)=>{var r=n(2109),i=n(6736);r({target:"Math",stat:!0,forced:i!=Math.expm1},{expm1:i})},4755:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{fround:n(6130)})},5438:(t,e,n)=>{var r=n(2109),i=Math.hypot,o=Math.abs,a=Math.sqrt;r({target:"Math",stat:!0,forced:!!i&&i(1/0,NaN)!==1/0},{hypot:function(t,e){for(var n,r,i=0,s=0,c=arguments.length,u=0;s<c;)u<(n=o(arguments[s++]))?(i=i*(r=u/n)*r+1,u=n):i+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*a(i)}})},332:(t,e,n)=>{var r=n(2109),i=n(7293),o=Math.imul;r({target:"Math",stat:!0,forced:i((function(){return-5!=o(4294967295,5)||2!=o.length}))},{imul:function(t,e){var n=65535,r=+t,i=+e,o=n&r,a=n&i;return 0|o*a+((n&r>>>16)*a+o*(n&i>>>16)<<16>>>0)}})},658:(t,e,n)=>{var r=n(2109),i=Math.log,o=Math.LOG10E;r({target:"Math",stat:!0},{log10:function(t){return i(t)*o}})},197:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{log1p:n(6513)})},4914:(t,e,n)=>{var r=n(2109),i=Math.log,o=Math.LN2;r({target:"Math",stat:!0},{log2:function(t){return i(t)/o}})},2420:(t,e,n)=>{n(2109)({target:"Math",stat:!0},{sign:n(4310)})},160:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(6736),a=Math.abs,s=Math.exp,c=Math.E;r({target:"Math",stat:!0,forced:i((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(t){return a(t=+t)<1?(o(t)-o(-t))/2:(s(t-1)-s(-t-1))*(c/2)}})},970:(t,e,n)=>{var r=n(2109),i=n(6736),o=Math.exp;r({target:"Math",stat:!0},{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(o(t)+o(-t))}})},2703:(t,e,n)=>{n(8003)(Math,"Math",!0)},3689:(t,e,n)=>{var r=n(2109),i=Math.ceil,o=Math.floor;r({target:"Math",stat:!0},{trunc:function(t){return(t>0?o:i)(t)}})},9653:(t,e,n)=>{"use strict";var r=n(9781),i=n(7854),o=n(4705),a=n(1320),s=n(6656),c=n(4326),u=n(9587),l=n(7593),f=n(7293),d=n(30),h=n(8006).f,p=n(1236).f,A=n(3070).f,g=n(3111).trim,m="Number",v=i[m],y=v.prototype,b=c(d(y))==m,C=function(t){var e,n,r,i,o,a,s,c,u=l(t,!1);if("string"==typeof u&&u.length>2)if(43===(e=(u=g(u)).charCodeAt(0))||45===e){if(88===(n=u.charCodeAt(2))||120===n)return NaN}else if(48===e){switch(u.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+u}for(a=(o=u.slice(2)).length,s=0;s<a;s++)if((c=o.charCodeAt(s))<48||c>i)return NaN;return parseInt(o,r)}return+u};if(o(m,!v(" 0o1")||!v("0b1")||v("+0x1"))){for(var w,x=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof x&&(b?f((function(){y.valueOf.call(n)})):c(n)!=m)?u(new v(C(e)),n,x):C(e)},k=r?h(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),_=0;k.length>_;_++)s(v,w=k[_])&&!s(x,w)&&A(x,w,p(v,w));x.prototype=y,y.constructor=x,a(i,m,x)}},3299:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},5192:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isFinite:n(7023)})},3161:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isInteger:n(8730)})},4048:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{isNaN:function(t){return t!=t}})},8285:(t,e,n)=>{var r=n(2109),i=n(8730),o=Math.abs;r({target:"Number",stat:!0},{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},4363:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},5994:(t,e,n)=>{n(2109)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},1874:(t,e,n)=>{var r=n(2109),i=n(2814);r({target:"Number",stat:!0,forced:Number.parseFloat!=i},{parseFloat:i})},9494:(t,e,n)=>{var r=n(2109),i=n(3009);r({target:"Number",stat:!0,forced:Number.parseInt!=i},{parseInt:i})},6977:(t,e,n)=>{"use strict";var r=n(2109),i=n(9958),o=n(863),a=n(8415),s=n(7293),c=1..toFixed,u=Math.floor,l=function(t,e,n){return 0===e?n:e%2==1?l(t,e-1,n*t):l(t*t,e/2,n)};r({target:"Number",proto:!0,forced:c&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!s((function(){c.call({})}))},{toFixed:function(t){var e,n,r,s,c=o(this),f=i(t),d=[0,0,0,0,0,0],h="",p="0",A=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*d[n],d[n]=r%1e7,r=u(r/1e7)},g=function(t){for(var e=6,n=0;--e>=0;)n+=d[e],d[e]=u(n/t),n=n%t*1e7},m=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==d[t]){var n=String(d[t]);e=""===e?n:e+a.call("0",7-n.length)+n}return e};if(f<0||f>20)throw RangeError("Incorrect fraction digits");if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(h="-",c=-c),c>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(c*l(2,69,1))-69)<0?c*l(2,-e,1):c/l(2,e,1),n*=4503599627370496,(e=52-e)>0){for(A(0,n),r=f;r>=7;)A(1e7,0),r-=7;for(A(l(10,r,1),0),r=e-1;r>=23;)g(1<<23),r-=23;g(1<<r),A(1,1),g(2),p=m()}else A(0,n),A(1<<-e,0),p=m()+a.call("0",f);return f>0?h+((s=p.length)<=f?"0."+a.call("0",f-s)+p:p.slice(0,s-f)+"."+p.slice(s-f)):h+p}})},5147:(t,e,n)=>{"use strict";var r=n(2109),i=n(7293),o=n(863),a=1..toPrecision;r({target:"Number",proto:!0,forced:i((function(){return"1"!==a.call(1,void 0)}))||!i((function(){a.call({})}))},{toPrecision:function(t){return void 0===t?a.call(o(this)):a.call(o(this),t)}})},9601:(t,e,n)=>{var r=n(2109),i=n(1574);r({target:"Object",stat:!0,forced:Object.assign!==i},{assign:i})},8011:(t,e,n)=>{n(2109)({target:"Object",stat:!0,sham:!n(9781)},{create:n(30)})},9595:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(3099),c=n(3070);i&&r({target:"Object",proto:!0,forced:o},{__defineGetter__:function(t,e){c.f(a(this),t,{get:s(e),enumerable:!0,configurable:!0})}})},3321:(t,e,n)=>{var r=n(2109),i=n(9781);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperties:n(6048)})},9070:(t,e,n)=>{var r=n(2109),i=n(9781);r({target:"Object",stat:!0,forced:!i,sham:!i},{defineProperty:n(3070).f})},5500:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(3099),c=n(3070);i&&r({target:"Object",proto:!0,forced:o},{__defineSetter__:function(t,e){c.f(a(this),t,{set:s(e),enumerable:!0,configurable:!0})}})},9720:(t,e,n)=>{var r=n(2109),i=n(4699).entries;r({target:"Object",stat:!0},{entries:function(t){return i(t)}})},3371:(t,e,n)=>{var r=n(2109),i=n(6677),o=n(7293),a=n(111),s=n(2423).onFreeze,c=Object.freeze;r({target:"Object",stat:!0,forced:o((function(){c(1)})),sham:!i},{freeze:function(t){return c&&a(t)?c(s(t)):t}})},8559:(t,e,n)=>{var r=n(2109),i=n(408),o=n(6135);r({target:"Object",stat:!0},{fromEntries:function(t){var e={};return i(t,(function(t,n){o(e,t,n)}),void 0,!0),e}})},5003:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(5656),a=n(1236).f,s=n(9781),c=i((function(){a(1)}));r({target:"Object",stat:!0,forced:!s||c,sham:!s},{getOwnPropertyDescriptor:function(t,e){return a(o(t),e)}})},9337:(t,e,n)=>{var r=n(2109),i=n(9781),o=n(3887),a=n(5656),s=n(1236),c=n(6135);r({target:"Object",stat:!0,sham:!i},{getOwnPropertyDescriptors:function(t){for(var e,n,r=a(t),i=s.f,u=o(r),l={},f=0;u.length>f;)void 0!==(n=i(r,e=u[f++]))&&c(l,e,n);return l}})},6210:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(1156).f;r({target:"Object",stat:!0,forced:i((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:o})},489:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(7908),a=n(9518),s=n(8544);r({target:"Object",stat:!0,forced:i((function(){a(1)})),sham:!s},{getPrototypeOf:function(t){return a(o(t))}})},1825:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(111),a=Object.isExtensible;r({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isExtensible:function(t){return!!o(t)&&(!a||a(t))}})},8410:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(111),a=Object.isFrozen;r({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isFrozen:function(t){return!o(t)||!!a&&a(t)}})},2200:(t,e,n)=>{var r=n(2109),i=n(7293),o=n(111),a=Object.isSealed;r({target:"Object",stat:!0,forced:i((function(){a(1)}))},{isSealed:function(t){return!o(t)||!!a&&a(t)}})},3304:(t,e,n)=>{n(2109)({target:"Object",stat:!0},{is:n(1150)})},7941:(t,e,n)=>{var r=n(2109),i=n(7908),o=n(1956);r({target:"Object",stat:!0,forced:n(7293)((function(){o(1)}))},{keys:function(t){return o(i(t))}})},4869:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(7593),c=n(9518),u=n(1236).f;i&&r({target:"Object",proto:!0,forced:o},{__lookupGetter__:function(t){var e,n=a(this),r=s(t,!0);do{if(e=u(n,r))return e.get}while(n=c(n))}})},3952:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(9026),a=n(7908),s=n(7593),c=n(9518),u=n(1236).f;i&&r({target:"Object",proto:!0,forced:o},{__lookupSetter__:function(t){var e,n=a(this),r=s(t,!0);do{if(e=u(n,r))return e.set}while(n=c(n))}})},7227:(t,e,n)=>{var r=n(2109),i=n(111),o=n(2423).onFreeze,a=n(6677),s=n(7293),c=Object.preventExtensions;r({target:"Object",stat:!0,forced:s((function(){c(1)})),sham:!a},{preventExtensions:function(t){return c&&i(t)?c(o(t)):t}})},514:(t,e,n)=>{var r=n(2109),i=n(111),o=n(2423).onFreeze,a=n(6677),s=n(7293),c=Object.seal;r({target:"Object",stat:!0,forced:s((function(){c(1)})),sham:!a},{seal:function(t){return c&&i(t)?c(o(t)):t}})},8304:(t,e,n)=>{n(2109)({target:"Object",stat:!0},{setPrototypeOf:n(7674)})},1539:(t,e,n)=>{var r=n(1694),i=n(1320),o=n(288);r||i(Object.prototype,"toString",o,{unsafe:!0})},6833:(t,e,n)=>{var r=n(2109),i=n(4699).values;r({target:"Object",stat:!0},{values:function(t){return i(t)}})},4678:(t,e,n)=>{var r=n(2109),i=n(2814);r({global:!0,forced:parseFloat!=i},{parseFloat:i})},1058:(t,e,n)=>{var r=n(2109),i=n(3009);r({global:!0,forced:parseInt!=i},{parseInt:i})},7922:(t,e,n)=>{"use strict";var r=n(2109),i=n(3099),o=n(8523),a=n(2534),s=n(408);r({target:"Promise",stat:!0},{allSettled:function(t){var e=this,n=o.f(e),r=n.resolve,c=n.reject,u=a((function(){var n=i(e.resolve),o=[],a=0,c=1;s(t,(function(t){var i=a++,s=!1;o.push(void 0),c++,n.call(e,t).then((function(t){s||(s=!0,o[i]={status:"fulfilled",value:t},--c||r(o))}),(function(t){s||(s=!0,o[i]={status:"rejected",reason:t},--c||r(o))}))})),--c||r(o)}));return u.error&&c(u.value),n.promise}})},7727:(t,e,n)=>{"use strict";var r=n(2109),i=n(1913),o=n(3366),a=n(7293),s=n(5005),c=n(6707),u=n(9478),l=n(1320);r({target:"Promise",proto:!0,real:!0,forced:!!o&&a((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=c(this,s("Promise")),n="function"==typeof t;return this.then(n?function(n){return u(e,t()).then((function(){return n}))}:t,n?function(n){return u(e,t()).then((function(){throw n}))}:t)}}),i||"function"!=typeof o||o.prototype.finally||l(o.prototype,"finally",s("Promise").prototype.finally)},8674:(t,e,n)=>{"use strict";var r,i,o,a,s=n(2109),c=n(1913),u=n(7854),l=n(5005),f=n(3366),d=n(1320),h=n(2248),p=n(8003),A=n(6340),g=n(111),m=n(3099),v=n(5787),y=n(4326),b=n(2788),C=n(408),w=n(7072),x=n(6707),k=n(261).set,_=n(5948),I=n(9478),S=n(842),E=n(8523),O=n(2534),T=n(9909),B=n(4705),j=n(5112),R=n(7392),L=j("species"),M="Promise",P=T.get,z=T.set,F=T.getterFor(M),U=f,N=u.TypeError,D=u.document,$=u.process,W=l("fetch"),Y=E.f,G=Y,J="process"==y($),K=!!(D&&D.createEvent&&u.dispatchEvent),q="unhandledrejection",Z=B(M,(function(){if(b(U)===String(U)){if(66===R)return!0;if(!J&&"function"!=typeof PromiseRejectionEvent)return!0}if(c&&!U.prototype.finally)return!0;if(R>=51&&/native code/.test(U))return!1;var t=U.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[L]=e,!(t.then((function(){}))instanceof e)})),H=Z||!w((function(t){U.all(t).catch((function(){}))})),V=function(t){var e;return!(!g(t)||"function"!=typeof(e=t.then))&&e},X=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;_((function(){for(var i=e.value,o=1==e.state,a=0;r.length>a;){var s,c,u,l=r[a++],f=o?l.ok:l.fail,d=l.resolve,h=l.reject,p=l.domain;try{f?(o||(2===e.rejection&&nt(t,e),e.rejection=1),!0===f?s=i:(p&&p.enter(),s=f(i),p&&(p.exit(),u=!0)),s===l.promise?h(N("Promise-chain cycle")):(c=V(s))?c.call(s,d,h):d(s)):h(i)}catch(t){p&&!u&&p.exit(),h(t)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&tt(t,e)}))}},Q=function(t,e,n){var r,i;K?((r=D.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},(i=u["on"+t])?i(r):t===q&&S("Unhandled promise rejection",n)},tt=function(t,e){k.call(u,(function(){var n,r=e.value;if(et(e)&&(n=O((function(){J?$.emit("unhandledRejection",r,t):Q(q,t,r)})),e.rejection=J||et(e)?2:1,n.error))throw n.value}))},et=function(t){return 1!==t.rejection&&!t.parent},nt=function(t,e){k.call(u,(function(){J?$.emit("rejectionHandled",t):Q("rejectionhandled",t,e.value)}))},rt=function(t,e,n,r){return function(i){t(e,n,i,r)}},it=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,X(t,e,!0))},ot=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw N("Promise can't be resolved itself");var i=V(n);i?_((function(){var r={done:!1};try{i.call(n,rt(ot,t,r,e),rt(it,t,r,e))}catch(n){it(t,r,n,e)}})):(e.value=n,e.state=1,X(t,e,!1))}catch(n){it(t,{done:!1},n,e)}}};Z&&(U=function(t){v(this,U,M),m(t),r.call(this);var e=P(this);try{t(rt(ot,this,e),rt(it,this,e))}catch(t){it(this,e,t)}},(r=function(t){z(this,{type:M,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(U.prototype,{then:function(t,e){var n=F(this),r=Y(x(this,U));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=J?$.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&X(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r,e=P(t);this.promise=t,this.resolve=rt(ot,t,e),this.reject=rt(it,t,e)},E.f=Y=function(t){return t===U||t===o?new i(t):G(t)},c||"function"!=typeof f||(a=f.prototype.then,d(f.prototype,"then",(function(t,e){var n=this;return new U((function(t,e){a.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof W&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return I(U,W.apply(u,arguments))}}))),s({global:!0,wrap:!0,forced:Z},{Promise:U}),p(U,M,!1,!0),A(M),o=l(M),s({target:M,stat:!0,forced:Z},{reject:function(t){var e=Y(this);return e.reject.call(void 0,t),e.promise}}),s({target:M,stat:!0,forced:c||Z},{resolve:function(t){return I(c&&this===o?U:this,t)}}),s({target:M,stat:!0,forced:H},{all:function(t){var e=this,n=Y(e),r=n.resolve,i=n.reject,o=O((function(){var n=m(e.resolve),o=[],a=0,s=1;C(t,(function(t){var c=a++,u=!1;o.push(void 0),s++,n.call(e,t).then((function(t){u||(u=!0,o[c]=t,--s||r(o))}),i)})),--s||r(o)}));return o.error&&i(o.value),n.promise},race:function(t){var e=this,n=Y(e),r=n.reject,i=O((function(){var i=m(e.resolve);C(t,(function(t){i.call(e,t).then(n.resolve,r)}))}));return i.error&&r(i.value),n.promise}})},224:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(3099),a=n(9670),s=n(7293),c=i("Reflect","apply"),u=Function.apply;r({target:"Reflect",stat:!0,forced:!s((function(){c((function(){}))}))},{apply:function(t,e,n){return o(t),a(n),c?c(t,e,n):u.call(t,e,n)}})},2419:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(3099),a=n(9670),s=n(111),c=n(30),u=n(7065),l=n(7293),f=i("Reflect","construct"),d=l((function(){function t(){}return!(f((function(){}),[],t)instanceof t)})),h=!l((function(){f((function(){}))})),p=d||h;r({target:"Reflect",stat:!0,forced:p,sham:p},{construct:function(t,e){o(t),a(e);var n=arguments.length<3?t:o(arguments[2]);if(h&&!d)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(u.apply(t,r))}var i=n.prototype,l=c(s(i)?i:Object.prototype),p=Function.apply.call(t,l,e);return s(p)?p:l}})},9596:(t,e,n)=>{var r=n(2109),i=n(9781),o=n(9670),a=n(7593),s=n(3070);r({target:"Reflect",stat:!0,forced:n(7293)((function(){Reflect.defineProperty(s.f({},1,{value:1}),1,{value:2})})),sham:!i},{defineProperty:function(t,e,n){o(t);var r=a(e,!0);o(n);try{return s.f(t,r,n),!0}catch(t){return!1}}})},2586:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(1236).f;r({target:"Reflect",stat:!0},{deleteProperty:function(t,e){var n=o(i(t),e);return!(n&&!n.configurable)&&delete t[e]}})},5683:(t,e,n)=>{var r=n(2109),i=n(9781),o=n(9670),a=n(1236);r({target:"Reflect",stat:!0,sham:!i},{getOwnPropertyDescriptor:function(t,e){return a.f(o(t),e)}})},9361:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(9518);r({target:"Reflect",stat:!0,sham:!n(8544)},{getPrototypeOf:function(t){return o(i(t))}})},4819:(t,e,n)=>{var r=n(2109),i=n(111),o=n(9670),a=n(6656),s=n(1236),c=n(9518);r({target:"Reflect",stat:!0},{get:function t(e,n){var r,u,l=arguments.length<3?e:arguments[2];return o(e)===l?e[n]:(r=s.f(e,n))?a(r,"value")?r.value:void 0===r.get?void 0:r.get.call(l):i(u=c(e))?t(u,n,l):void 0}})},1037:(t,e,n)=>{n(2109)({target:"Reflect",stat:!0},{has:function(t,e){return e in t}})},5898:(t,e,n)=>{var r=n(2109),i=n(9670),o=Object.isExtensible;r({target:"Reflect",stat:!0},{isExtensible:function(t){return i(t),!o||o(t)}})},7556:(t,e,n)=>{n(2109)({target:"Reflect",stat:!0},{ownKeys:n(3887)})},4361:(t,e,n)=>{var r=n(2109),i=n(5005),o=n(9670);r({target:"Reflect",stat:!0,sham:!n(6677)},{preventExtensions:function(t){o(t);try{var e=i("Object","preventExtensions");return e&&e(t),!0}catch(t){return!1}}})},9532:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(6077),a=n(7674);a&&r({target:"Reflect",stat:!0},{setPrototypeOf:function(t,e){i(t),o(e);try{return a(t,e),!0}catch(t){return!1}}})},3593:(t,e,n)=>{var r=n(2109),i=n(9670),o=n(111),a=n(6656),s=n(7293),c=n(3070),u=n(1236),l=n(9518),f=n(9114);r({target:"Reflect",stat:!0,forced:s((function(){var t=c.f({},"a",{configurable:!0});return!1!==Reflect.set(l(t),"a",1,t)}))},{set:function t(e,n,r){var s,d,h=arguments.length<4?e:arguments[3],p=u.f(i(e),n);if(!p){if(o(d=l(e)))return t(d,n,r,h);p=f(0)}if(a(p,"value")){if(!1===p.writable||!o(h))return!1;if(s=u.f(h,n)){if(s.get||s.set||!1===s.writable)return!1;s.value=r,c.f(h,n,s)}else c.f(h,n,f(0,r));return!0}return void 0!==p.set&&(p.set.call(h,r),!0)}})},4603:(t,e,n)=>{var r=n(9781),i=n(7854),o=n(4705),a=n(9587),s=n(3070).f,c=n(8006).f,u=n(7850),l=n(7066),f=n(2999),d=n(1320),h=n(7293),p=n(9909).set,A=n(6340),g=n(5112)("match"),m=i.RegExp,v=m.prototype,y=/a/g,b=/a/g,C=new m(y)!==y,w=f.UNSUPPORTED_Y;if(r&&o("RegExp",!C||w||h((function(){return b[g]=!1,m(y)!=y||m(b)==b||"/a/i"!=m(y,"i")})))){for(var x=function(t,e){var n,r=this instanceof x,i=u(t),o=void 0===e;if(!r&&i&&t.constructor===x&&o)return t;C?i&&!o&&(t=t.source):t instanceof x&&(o&&(e=l.call(t)),t=t.source),w&&(n=!!e&&e.indexOf("y")>-1)&&(e=e.replace(/y/g,""));var s=a(C?new m(t,e):m(t,e),r?this:v,x);return w&&n&&p(s,{sticky:n}),s},k=function(t){t in x||s(x,t,{configurable:!0,get:function(){return m[t]},set:function(e){m[t]=e}})},_=c(m),I=0;_.length>I;)k(_[I++]);v.constructor=x,x.prototype=v,d(i,"RegExp",x)}A("RegExp")},4916:(t,e,n)=>{"use strict";var r=n(2109),i=n(2261);r({target:"RegExp",proto:!0,forced:/./.exec!==i},{exec:i})},2087:(t,e,n)=>{var r=n(9781),i=n(3070),o=n(7066),a=n(2999).UNSUPPORTED_Y;r&&("g"!=/./g.flags||a)&&i.f(RegExp.prototype,"flags",{configurable:!0,get:o})},8386:(t,e,n)=>{var r=n(9781),i=n(2999).UNSUPPORTED_Y,o=n(3070).f,a=n(9909).get,s=RegExp.prototype;r&&i&&o(RegExp.prototype,"sticky",{configurable:!0,get:function(){if(this!==s){if(this instanceof RegExp)return!!a(this).sticky;throw TypeError("Incompatible receiver, RegExp required")}}})},7601:(t,e,n)=>{"use strict";n(4916);var r,i,o=n(2109),a=n(111),s=(r=!1,(i=/[ac]/).exec=function(){return r=!0,/./.exec.apply(this,arguments)},!0===i.test("abc")&&r),c=/./.test;o({target:"RegExp",proto:!0,forced:!s},{test:function(t){if("function"!=typeof this.exec)return c.call(this,t);var e=this.exec(t);if(null!==e&&!a(e))throw new Error("RegExp exec method returned something other than an Object or null");return!!e}})},9714:(t,e,n)=>{"use strict";var r=n(1320),i=n(9670),o=n(7293),a=n(7066),s="toString",c=RegExp.prototype,u=c[s],l=o((function(){return"/a/b"!=u.call({source:"a",flags:"b"})})),f=u.name!=s;(l||f)&&r(RegExp.prototype,s,(function(){var t=i(this),e=String(t.source),n=t.flags;return"/"+e+"/"+String(void 0===n&&t instanceof RegExp&&!("flags"in c)?a.call(t):n)}),{unsafe:!0})},189:(t,e,n)=>{"use strict";var r=n(7710),i=n(5631);t.exports=r("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),i)},5218:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("anchor")},{anchor:function(t){return i(this,"a","name",t)}})},4475:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("big")},{big:function(){return i(this,"big","","")}})},7929:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("blink")},{blink:function(){return i(this,"blink","","")}})},915:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("bold")},{bold:function(){return i(this,"b","","")}})},9841:(t,e,n)=>{"use strict";var r=n(2109),i=n(8710).codeAt;r({target:"String",proto:!0},{codePointAt:function(t){return i(this,t)}})},7852:(t,e,n)=>{"use strict";var r,i=n(2109),o=n(1236).f,a=n(7466),s=n(3929),c=n(4488),u=n(4964),l=n(1913),f="".endsWith,d=Math.min,h=u("endsWith");i({target:"String",proto:!0,forced:!(!l&&!h&&(r=o(String.prototype,"endsWith"),r&&!r.writable)||h)},{endsWith:function(t){var e=String(c(this));s(t);var n=arguments.length>1?arguments[1]:void 0,r=a(e.length),i=void 0===n?r:d(a(n),r),o=String(t);return f?f.call(e,o,i):e.slice(i-o.length,i)===o}})},9253:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("fixed")},{fixed:function(){return i(this,"tt","","")}})},2125:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("fontcolor")},{fontcolor:function(t){return i(this,"font","color",t)}})},8830:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("fontsize")},{fontsize:function(t){return i(this,"font","size",t)}})},4953:(t,e,n)=>{var r=n(2109),i=n(1400),o=String.fromCharCode,a=String.fromCodePoint;r({target:"String",stat:!0,forced:!!a&&1!=a.length},{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},2023:(t,e,n)=>{"use strict";var r=n(2109),i=n(3929),o=n(4488);r({target:"String",proto:!0,forced:!n(4964)("includes")},{includes:function(t){return!!~String(o(this)).indexOf(i(t),arguments.length>1?arguments[1]:void 0)}})},8734:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("italics")},{italics:function(){return i(this,"i","","")}})},8783:(t,e,n)=>{"use strict";var r=n(8710).charAt,i=n(9909),o=n(654),a="String Iterator",s=i.set,c=i.getterFor(a);o(String,"String",(function(t){s(this,{type:a,string:String(t),index:0})}),(function(){var t,e=c(this),n=e.string,i=e.index;return i>=n.length?{value:void 0,done:!0}:(t=r(n,i),e.index+=t.length,{value:t,done:!1})}))},9254:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("link")},{link:function(t){return i(this,"a","href",t)}})},6373:(t,e,n)=>{"use strict";var r=n(2109),i=n(4994),o=n(4488),a=n(7466),s=n(3099),c=n(9670),u=n(4326),l=n(7850),f=n(7066),d=n(8880),h=n(7293),p=n(5112),A=n(6707),g=n(1530),m=n(9909),v=n(1913),y=p("matchAll"),b="RegExp String",C=b+" Iterator",w=m.set,x=m.getterFor(C),k=RegExp.prototype,_=k.exec,I="".matchAll,S=!!I&&!h((function(){"a".matchAll(/./)})),E=i((function(t,e,n,r){w(this,{type:C,regexp:t,string:e,global:n,unicode:r,done:!1})}),b,(function(){var t=x(this);if(t.done)return{value:void 0,done:!0};var e=t.regexp,n=t.string,r=function(t,e){var n,r=t.exec;if("function"==typeof r){if("object"!=typeof(n=r.call(t,e)))throw TypeError("Incorrect exec result");return n}return _.call(t,e)}(e,n);return null===r?{value:void 0,done:t.done=!0}:t.global?(""==String(r[0])&&(e.lastIndex=g(n,a(e.lastIndex),t.unicode)),{value:r,done:!1}):(t.done=!0,{value:r,done:!1})})),O=function(t){var e,n,r,i,o,s,u=c(this),l=String(t);return e=A(u,RegExp),void 0===(n=u.flags)&&u instanceof RegExp&&!("flags"in k)&&(n=f.call(u)),r=void 0===n?"":String(n),i=new e(e===RegExp?u.source:u,r),o=!!~r.indexOf("g"),s=!!~r.indexOf("u"),i.lastIndex=a(u.lastIndex),new E(i,l,o,s)};r({target:"String",proto:!0,forced:S},{matchAll:function(t){var e,n,r,i=o(this);if(null!=t){if(l(t)&&!~String(o("flags"in k?t.flags:f.call(t))).indexOf("g"))throw TypeError("`.matchAll` does not allow non-global regexes");if(S)return I.apply(i,arguments);if(void 0===(n=t[y])&&v&&"RegExp"==u(t)&&(n=O),null!=n)return s(n).call(t,i)}else if(S)return I.apply(i,arguments);return e=String(i),r=new RegExp(t,"g"),v?O.call(r,e):r[y](e)}}),v||y in k||d(k,y,O)},4723:(t,e,n)=>{"use strict";var r=n(7007),i=n(9670),o=n(7466),a=n(4488),s=n(1530),c=n(7651);r("match",1,(function(t,e,n){return[function(e){var n=a(this),r=null==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](String(n))},function(t){var r=n(e,t,this);if(r.done)return r.value;var a=i(t),u=String(this);if(!a.global)return c(a,u);var l=a.unicode;a.lastIndex=0;for(var f,d=[],h=0;null!==(f=c(a,u));){var p=String(f[0]);d[h]=p,""===p&&(a.lastIndex=s(u,o(a.lastIndex),l)),h++}return 0===h?null:d}]}))},6528:(t,e,n)=>{"use strict";var r=n(2109),i=n(6650).end;r({target:"String",proto:!0,forced:n(7061)},{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},3112:(t,e,n)=>{"use strict";var r=n(2109),i=n(6650).start;r({target:"String",proto:!0,forced:n(7061)},{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}})},8992:(t,e,n)=>{var r=n(2109),i=n(5656),o=n(7466);r({target:"String",stat:!0},{raw:function(t){for(var e=i(t.raw),n=o(e.length),r=arguments.length,a=[],s=0;n>s;)a.push(String(e[s++])),s<r&&a.push(String(arguments[s]));return a.join("")}})},2481:(t,e,n)=>{n(2109)({target:"String",proto:!0},{repeat:n(8415)})},5306:(t,e,n)=>{"use strict";var r=n(7007),i=n(9670),o=n(7908),a=n(7466),s=n(9958),c=n(4488),u=n(1530),l=n(7651),f=Math.max,d=Math.min,h=Math.floor,p=/\$([$&'`]|\d\d?|<[^>]*>)/g,A=/\$([$&'`]|\d\d?)/g;r("replace",2,(function(t,e,n,r){var g=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,m=r.REPLACE_KEEPS_$0,v=g?"$":"$0";return[function(n,r){var i=c(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,i,r):e.call(String(i),n,r)},function(t,r){if(!g&&m||"string"==typeof r&&-1===r.indexOf(v)){var o=n(e,t,this,r);if(o.done)return o.value}var c=i(t),h=String(this),p="function"==typeof r;p||(r=String(r));var A=c.global;if(A){var b=c.unicode;c.lastIndex=0}for(var C=[];;){var w=l(c,h);if(null===w)break;if(C.push(w),!A)break;""===String(w[0])&&(c.lastIndex=u(h,a(c.lastIndex),b))}for(var x,k="",_=0,I=0;I<C.length;I++){w=C[I];for(var S=String(w[0]),E=f(d(s(w.index),h.length),0),O=[],T=1;T<w.length;T++)O.push(void 0===(x=w[T])?x:String(x));var B=w.groups;if(p){var j=[S].concat(O,E,h);void 0!==B&&j.push(B);var R=String(r.apply(void 0,j))}else R=y(S,h,E,O,B,r);E>=_&&(k+=h.slice(_,E)+R,_=E+S.length)}return k+h.slice(_)}];function y(t,n,r,i,a,s){var c=r+t.length,u=i.length,l=A;return void 0!==a&&(a=o(a),l=p),e.call(s,l,(function(e,o){var s;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":s=a[o.slice(1,-1)];break;default:var l=+o;if(0===l)return e;if(l>u){var f=h(l/10);return 0===f?e:f<=u?void 0===i[f-1]?o.charAt(1):i[f-1]+o.charAt(1):e}s=i[l-1]}return void 0===s?"":s}))}}))},4765:(t,e,n)=>{"use strict";var r=n(7007),i=n(9670),o=n(4488),a=n(1150),s=n(7651);r("search",1,(function(t,e,n){return[function(e){var n=o(this),r=null==e?void 0:e[t];return void 0!==r?r.call(e,n):new RegExp(e)[t](String(n))},function(t){var r=n(e,t,this);if(r.done)return r.value;var o=i(t),c=String(this),u=o.lastIndex;a(u,0)||(o.lastIndex=0);var l=s(o,c);return a(o.lastIndex,u)||(o.lastIndex=u),null===l?-1:l.index}]}))},7268:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("small")},{small:function(){return i(this,"small","","")}})},3123:(t,e,n)=>{"use strict";var r=n(7007),i=n(7850),o=n(9670),a=n(4488),s=n(6707),c=n(1530),u=n(7466),l=n(7651),f=n(2261),d=n(7293),h=[].push,p=Math.min,A=4294967295,g=!d((function(){return!RegExp(A,"y")}));r("split",2,(function(t,e,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var r=String(a(this)),o=void 0===n?A:n>>>0;if(0===o)return[];if(void 0===t)return[r];if(!i(t))return e.call(r,t,o);for(var s,c,u,l=[],d=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),p=0,g=new RegExp(t.source,d+"g");(s=f.call(g,r))&&!((c=g.lastIndex)>p&&(l.push(r.slice(p,s.index)),s.length>1&&s.index<r.length&&h.apply(l,s.slice(1)),u=s[0].length,p=c,l.length>=o));)g.lastIndex===s.index&&g.lastIndex++;return p===r.length?!u&&g.test("")||l.push(""):l.push(r.slice(p)),l.length>o?l.slice(0,o):l}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,n){var i=a(this),o=null==e?void 0:e[t];return void 0!==o?o.call(e,i,n):r.call(String(i),e,n)},function(t,i){var a=n(r,t,this,i,r!==e);if(a.done)return a.value;var f=o(t),d=String(this),h=s(f,RegExp),m=f.unicode,v=(f.ignoreCase?"i":"")+(f.multiline?"m":"")+(f.unicode?"u":"")+(g?"y":"g"),y=new h(g?f:"^(?:"+f.source+")",v),b=void 0===i?A:i>>>0;if(0===b)return[];if(0===d.length)return null===l(y,d)?[d]:[];for(var C=0,w=0,x=[];w<d.length;){y.lastIndex=g?w:0;var k,_=l(y,g?d:d.slice(w));if(null===_||(k=p(u(y.lastIndex+(g?0:w)),d.length))===C)w=c(d,w,m);else{if(x.push(d.slice(C,w)),x.length===b)return x;for(var I=1;I<=_.length-1;I++)if(x.push(_[I]),x.length===b)return x;w=C=k}}return x.push(d.slice(C)),x}]}),!g)},6755:(t,e,n)=>{"use strict";var r,i=n(2109),o=n(1236).f,a=n(7466),s=n(3929),c=n(4488),u=n(4964),l=n(1913),f="".startsWith,d=Math.min,h=u("startsWith");i({target:"String",proto:!0,forced:!(!l&&!h&&(r=o(String.prototype,"startsWith"),r&&!r.writable)||h)},{startsWith:function(t){var e=String(c(this));s(t);var n=a(d(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return f?f.call(e,r,n):e.slice(n,n+r.length)===r}})},7397:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("strike")},{strike:function(){return i(this,"strike","","")}})},86:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("sub")},{sub:function(){return i(this,"sub","","")}})},623:(t,e,n)=>{"use strict";var r=n(2109),i=n(4230);r({target:"String",proto:!0,forced:n(3429)("sup")},{sup:function(){return i(this,"sup","","")}})},8702:(t,e,n)=>{"use strict";var r=n(2109),i=n(3111).end,o=n(6091)("trimEnd"),a=o?function(){return i(this)}:"".trimEnd;r({target:"String",proto:!0,forced:o},{trimEnd:a,trimRight:a})},5674:(t,e,n)=>{"use strict";var r=n(2109),i=n(3111).start,o=n(6091)("trimStart"),a=o?function(){return i(this)}:"".trimStart;r({target:"String",proto:!0,forced:o},{trimStart:a,trimLeft:a})},3210:(t,e,n)=>{"use strict";var r=n(2109),i=n(3111).trim;r({target:"String",proto:!0,forced:n(6091)("trim")},{trim:function(){return i(this)}})},2443:(t,e,n)=>{n(7235)("asyncIterator")},1817:(t,e,n)=>{"use strict";var r=n(2109),i=n(9781),o=n(7854),a=n(6656),s=n(111),c=n(3070).f,u=n(9920),l=o.Symbol;if(i&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var f={},d=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof d?new l(t):void 0===t?l():l(t);return""===t&&(f[e]=!0),e};u(d,l);var h=d.prototype=l.prototype;h.constructor=d;var p=h.toString,A="Symbol(test)"==String(l("test")),g=/^Symbol\((.*)\)[^)]+$/;c(h,"description",{configurable:!0,get:function(){var t=s(this)?this.valueOf():this,e=p.call(t);if(a(f,t))return"";var n=A?e.slice(7,-1):e.replace(g,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:d})}},2401:(t,e,n)=>{n(7235)("hasInstance")},8722:(t,e,n)=>{n(7235)("isConcatSpreadable")},2165:(t,e,n)=>{n(7235)("iterator")},2526:(t,e,n)=>{"use strict";var r=n(2109),i=n(7854),o=n(5005),a=n(1913),s=n(9781),c=n(133),u=n(3307),l=n(7293),f=n(6656),d=n(3157),h=n(111),p=n(9670),A=n(7908),g=n(5656),m=n(7593),v=n(9114),y=n(30),b=n(1956),C=n(8006),w=n(1156),x=n(5181),k=n(1236),_=n(3070),I=n(5296),S=n(8880),E=n(1320),O=n(2309),T=n(6200),B=n(3501),j=n(9711),R=n(5112),L=n(6061),M=n(7235),P=n(8003),z=n(9909),F=n(2092).forEach,U=T("hidden"),N="Symbol",D="prototype",$=R("toPrimitive"),W=z.set,Y=z.getterFor(N),G=Object[D],J=i.Symbol,K=o("JSON","stringify"),q=k.f,Z=_.f,H=w.f,V=I.f,X=O("symbols"),Q=O("op-symbols"),tt=O("string-to-symbol-registry"),et=O("symbol-to-string-registry"),nt=O("wks"),rt=i.QObject,it=!rt||!rt[D]||!rt[D].findChild,ot=s&&l((function(){return 7!=y(Z({},"a",{get:function(){return Z(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=q(G,e);r&&delete G[e],Z(t,e,n),r&&t!==G&&Z(G,e,r)}:Z,at=function(t,e){var n=X[t]=y(J[D]);return W(n,{type:N,tag:t,description:e}),s||(n.description=e),n},st=u?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof J},ct=function(t,e,n){t===G&&ct(Q,e,n),p(t);var r=m(e,!0);return p(n),f(X,r)?(n.enumerable?(f(t,U)&&t[U][r]&&(t[U][r]=!1),n=y(n,{enumerable:v(0,!1)})):(f(t,U)||Z(t,U,v(1,{})),t[U][r]=!0),ot(t,r,n)):Z(t,r,n)},ut=function(t,e){p(t);var n=g(e),r=b(n).concat(ht(n));return F(r,(function(e){s&&!lt.call(n,e)||ct(t,e,n[e])})),t},lt=function(t){var e=m(t,!0),n=V.call(this,e);return!(this===G&&f(X,e)&&!f(Q,e))&&(!(n||!f(this,e)||!f(X,e)||f(this,U)&&this[U][e])||n)},ft=function(t,e){var n=g(t),r=m(e,!0);if(n!==G||!f(X,r)||f(Q,r)){var i=q(n,r);return!i||!f(X,r)||f(n,U)&&n[U][r]||(i.enumerable=!0),i}},dt=function(t){var e=H(g(t)),n=[];return F(e,(function(t){f(X,t)||f(B,t)||n.push(t)})),n},ht=function(t){var e=t===G,n=H(e?Q:g(t)),r=[];return F(n,(function(t){!f(X,t)||e&&!f(G,t)||r.push(X[t])})),r};c||(E((J=function(){if(this instanceof J)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,e=j(t),n=function(t){this===G&&n.call(Q,t),f(this,U)&&f(this[U],e)&&(this[U][e]=!1),ot(this,e,v(1,t))};return s&&it&&ot(G,e,{configurable:!0,set:n}),at(e,t)})[D],"toString",(function(){return Y(this).tag})),E(J,"withoutSetter",(function(t){return at(j(t),t)})),I.f=lt,_.f=ct,k.f=ft,C.f=w.f=dt,x.f=ht,L.f=function(t){return at(R(t),t)},s&&(Z(J[D],"description",{configurable:!0,get:function(){return Y(this).description}}),a||E(G,"propertyIsEnumerable",lt,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!c,sham:!c},{Symbol:J}),F(b(nt),(function(t){M(t)})),r({target:N,stat:!0,forced:!c},{for:function(t){var e=String(t);if(f(tt,e))return tt[e];var n=J(e);return tt[e]=n,et[n]=e,n},keyFor:function(t){if(!st(t))throw TypeError(t+" is not a symbol");if(f(et,t))return et[t]},useSetter:function(){it=!0},useSimple:function(){it=!1}}),r({target:"Object",stat:!0,forced:!c,sham:!s},{create:function(t,e){return void 0===e?y(t):ut(y(t),e)},defineProperty:ct,defineProperties:ut,getOwnPropertyDescriptor:ft}),r({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:dt,getOwnPropertySymbols:ht}),r({target:"Object",stat:!0,forced:l((function(){x.f(1)}))},{getOwnPropertySymbols:function(t){return x.f(A(t))}}),K&&r({target:"JSON",stat:!0,forced:!c||l((function(){var t=J();return"[null]"!=K([t])||"{}"!=K({a:t})||"{}"!=K(Object(t))}))},{stringify:function(t,e,n){for(var r,i=[t],o=1;arguments.length>o;)i.push(arguments[o++]);if(r=e,(h(e)||void 0!==t)&&!st(t))return d(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!st(e))return e}),i[1]=e,K.apply(null,i)}}),J[D][$]||S(J[D],$,J[D].valueOf),P(J,N),B[U]=!0},6066:(t,e,n)=>{n(7235)("matchAll")},9007:(t,e,n)=>{n(7235)("match")},3510:(t,e,n)=>{n(7235)("replace")},1840:(t,e,n)=>{n(7235)("search")},6982:(t,e,n)=>{n(7235)("species")},2159:(t,e,n)=>{n(7235)("split")},6649:(t,e,n)=>{n(7235)("toPrimitive")},9341:(t,e,n)=>{n(7235)("toStringTag")},543:(t,e,n)=>{n(7235)("unscopables")},2990:(t,e,n)=>{"use strict";var r=n(260),i=n(1048),o=r.aTypedArray;(0,r.exportTypedArrayMethod)("copyWithin",(function(t,e){return i.call(o(this),t,e,arguments.length>2?arguments[2]:void 0)}))},8927:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).every,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("every",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},3105:(t,e,n)=>{"use strict";var r=n(260),i=n(1285),o=r.aTypedArray;(0,r.exportTypedArrayMethod)("fill",(function(t){return i.apply(o(this),arguments)}))},5035:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).filter,o=n(6707),a=r.aTypedArray,s=r.aTypedArrayConstructor;(0,r.exportTypedArrayMethod)("filter",(function(t){for(var e=i(a(this),t,arguments.length>1?arguments[1]:void 0),n=o(this,this.constructor),r=0,c=e.length,u=new(s(n))(c);c>r;)u[r]=e[r++];return u}))},7174:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).findIndex,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("findIndex",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},4345:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).find,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("find",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},4197:(t,e,n)=>{n(9843)("Float32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},6495:(t,e,n)=>{n(9843)("Float64",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},2846:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).forEach,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("forEach",(function(t){i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},8145:(t,e,n)=>{"use strict";var r=n(3832);(0,n(260).exportTypedArrayStaticMethod)("from",n(7321),r)},4731:(t,e,n)=>{"use strict";var r=n(260),i=n(1318).includes,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("includes",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},7209:(t,e,n)=>{"use strict";var r=n(260),i=n(1318).indexOf,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("indexOf",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},5109:(t,e,n)=>{n(9843)("Int16",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},5125:(t,e,n)=>{n(9843)("Int32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},7145:(t,e,n)=>{n(9843)("Int8",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},6319:(t,e,n)=>{"use strict";var r=n(7854),i=n(260),o=n(6992),a=n(5112)("iterator"),s=r.Uint8Array,c=o.values,u=o.keys,l=o.entries,f=i.aTypedArray,d=i.exportTypedArrayMethod,h=s&&s.prototype[a],p=!!h&&("values"==h.name||null==h.name),A=function(){return c.call(f(this))};d("entries",(function(){return l.call(f(this))})),d("keys",(function(){return u.call(f(this))})),d("values",A,!p),d(a,A,!p)},8867:(t,e,n)=>{"use strict";var r=n(260),i=r.aTypedArray,o=r.exportTypedArrayMethod,a=[].join;o("join",(function(t){return a.apply(i(this),arguments)}))},7789:(t,e,n)=>{"use strict";var r=n(260),i=n(6583),o=r.aTypedArray;(0,r.exportTypedArrayMethod)("lastIndexOf",(function(t){return i.apply(o(this),arguments)}))},3739:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).map,o=n(6707),a=r.aTypedArray,s=r.aTypedArrayConstructor;(0,r.exportTypedArrayMethod)("map",(function(t){return i(a(this),t,arguments.length>1?arguments[1]:void 0,(function(t,e){return new(s(o(t,t.constructor)))(e)}))}))},5206:(t,e,n)=>{"use strict";var r=n(260),i=n(3832),o=r.aTypedArrayConstructor;(0,r.exportTypedArrayStaticMethod)("of",(function(){for(var t=0,e=arguments.length,n=new(o(this))(e);e>t;)n[t]=arguments[t++];return n}),i)},4483:(t,e,n)=>{"use strict";var r=n(260),i=n(3671).right,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("reduceRight",(function(t){return i(o(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},9368:(t,e,n)=>{"use strict";var r=n(260),i=n(3671).left,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("reduce",(function(t){return i(o(this),t,arguments.length,arguments.length>1?arguments[1]:void 0)}))},2056:(t,e,n)=>{"use strict";var r=n(260),i=r.aTypedArray,o=r.exportTypedArrayMethod,a=Math.floor;o("reverse",(function(){for(var t,e=this,n=i(e).length,r=a(n/2),o=0;o<r;)t=e[o],e[o++]=e[--n],e[n]=t;return e}))},3462:(t,e,n)=>{"use strict";var r=n(260),i=n(7466),o=n(4590),a=n(7908),s=n(7293),c=r.aTypedArray;(0,r.exportTypedArrayMethod)("set",(function(t){c(this);var e=o(arguments.length>1?arguments[1]:void 0,1),n=this.length,r=a(t),s=i(r.length),u=0;if(s+e>n)throw RangeError("Wrong length");for(;u<s;)this[e+u]=r[u++]}),s((function(){new Int8Array(1).set({})})))},678:(t,e,n)=>{"use strict";var r=n(260),i=n(6707),o=n(7293),a=r.aTypedArray,s=r.aTypedArrayConstructor,c=r.exportTypedArrayMethod,u=[].slice;c("slice",(function(t,e){for(var n=u.call(a(this),t,e),r=i(this,this.constructor),o=0,c=n.length,l=new(s(r))(c);c>o;)l[o]=n[o++];return l}),o((function(){new Int8Array(1).slice()})))},7462:(t,e,n)=>{"use strict";var r=n(260),i=n(2092).some,o=r.aTypedArray;(0,r.exportTypedArrayMethod)("some",(function(t){return i(o(this),t,arguments.length>1?arguments[1]:void 0)}))},3824:(t,e,n)=>{"use strict";var r=n(260),i=r.aTypedArray,o=r.exportTypedArrayMethod,a=[].sort;o("sort",(function(t){return a.call(i(this),t)}))},5021:(t,e,n)=>{"use strict";var r=n(260),i=n(7466),o=n(1400),a=n(6707),s=r.aTypedArray;(0,r.exportTypedArrayMethod)("subarray",(function(t,e){var n=s(this),r=n.length,c=o(t,r);return new(a(n,n.constructor))(n.buffer,n.byteOffset+c*n.BYTES_PER_ELEMENT,i((void 0===e?r:o(e,r))-c))}))},2974:(t,e,n)=>{"use strict";var r=n(7854),i=n(260),o=n(7293),a=r.Int8Array,s=i.aTypedArray,c=i.exportTypedArrayMethod,u=[].toLocaleString,l=[].slice,f=!!a&&o((function(){u.call(new a(1))}));c("toLocaleString",(function(){return u.apply(f?l.call(s(this)):s(this),arguments)}),o((function(){return[1,2].toLocaleString()!=new a([1,2]).toLocaleString()}))||!o((function(){a.prototype.toLocaleString.call([1,2])})))},5016:(t,e,n)=>{"use strict";var r=n(260).exportTypedArrayMethod,i=n(7293),o=n(7854).Uint8Array,a=o&&o.prototype||{},s=[].toString,c=[].join;i((function(){s.call({})}))&&(s=function(){return c.call(this)});var u=a.toString!=s;r("toString",s,u)},8255:(t,e,n)=>{n(9843)("Uint16",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},9135:(t,e,n)=>{n(9843)("Uint32",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},2472:(t,e,n)=>{n(9843)("Uint8",(function(t){return function(e,n,r){return t(this,e,n,r)}}))},9743:(t,e,n)=>{n(9843)("Uint8",(function(t){return function(e,n,r){return t(this,e,n,r)}}),!0)},4129:(t,e,n)=>{"use strict";var r,i=n(7854),o=n(2248),a=n(2423),s=n(7710),c=n(9320),u=n(111),l=n(9909).enforce,f=n(8536),d=!i.ActiveXObject&&"ActiveXObject"in i,h=Object.isExtensible,p=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},A=t.exports=s("WeakMap",p,c);if(f&&d){r=c.getConstructor(p,"WeakMap",!0),a.REQUIRED=!0;var g=A.prototype,m=g.delete,v=g.has,y=g.get,b=g.set;o(g,{delete:function(t){if(u(t)&&!h(t)){var e=l(this);return e.frozen||(e.frozen=new r),m.call(this,t)||e.frozen.delete(t)}return m.call(this,t)},has:function(t){if(u(t)&&!h(t)){var e=l(this);return e.frozen||(e.frozen=new r),v.call(this,t)||e.frozen.has(t)}return v.call(this,t)},get:function(t){if(u(t)&&!h(t)){var e=l(this);return e.frozen||(e.frozen=new r),v.call(this,t)?y.call(this,t):e.frozen.get(t)}return y.call(this,t)},set:function(t,e){if(u(t)&&!h(t)){var n=l(this);n.frozen||(n.frozen=new r),v.call(this,t)?b.call(this,t,e):n.frozen.set(t,e)}else b.call(this,t,e);return this}})}},8478:(t,e,n)=>{"use strict";n(7710)("WeakSet",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),n(9320))},4747:(t,e,n)=>{var r=n(7854),i=n(8324),o=n(8533),a=n(8880);for(var s in i){var c=r[s],u=c&&c.prototype;if(u&&u.forEach!==o)try{a(u,"forEach",o)}catch(t){u.forEach=o}}},3948:(t,e,n)=>{var r=n(7854),i=n(8324),o=n(6992),a=n(8880),s=n(5112),c=s("iterator"),u=s("toStringTag"),l=o.values;for(var f in i){var d=r[f],h=d&&d.prototype;if(h){if(h[c]!==l)try{a(h,c,l)}catch(t){h[c]=l}if(h[u]||a(h,u,f),i[f])for(var p in o)if(h[p]!==o[p])try{a(h,p,o[p])}catch(t){h[p]=o[p]}}}},4633:(t,e,n)=>{var r=n(2109),i=n(7854),o=n(261);r({global:!0,bind:!0,enumerable:!0,forced:!i.setImmediate||!i.clearImmediate},{setImmediate:o.set,clearImmediate:o.clear})},5844:(t,e,n)=>{var r=n(2109),i=n(7854),o=n(5948),a=n(4326),s=i.process,c="process"==a(s);r({global:!0,enumerable:!0,noTargetGet:!0},{queueMicrotask:function(t){var e=c&&s.domain;o(e?e.bind(t):t)}})},2564:(t,e,n)=>{var r=n(2109),i=n(7854),o=n(8113),a=[].slice,s=function(t){return function(e,n){var r=arguments.length>2,i=r?a.call(arguments,2):void 0;return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,n)}};r({global:!0,bind:!0,forced:/MSIE .\./.test(o)},{setTimeout:s(i.setTimeout),setInterval:s(i.setInterval)})},1637:(t,e,n)=>{"use strict";n(6992);var r=n(2109),i=n(5005),o=n(590),a=n(1320),s=n(2248),c=n(8003),u=n(4994),l=n(9909),f=n(5787),d=n(6656),h=n(9974),p=n(648),A=n(9670),g=n(111),m=n(30),v=n(9114),y=n(8554),b=n(1246),C=n(5112),w=i("fetch"),x=i("Headers"),k=C("iterator"),_="URLSearchParams",I=_+"Iterator",S=l.set,E=l.getterFor(_),O=l.getterFor(I),T=/\+/g,B=Array(4),j=function(t){return B[t-1]||(B[t-1]=RegExp("((?:%[\\da-f]{2}){"+t+"})","gi"))},R=function(t){try{return decodeURIComponent(t)}catch(e){return t}},L=function(t){var e=t.replace(T," "),n=4;try{return decodeURIComponent(e)}catch(t){for(;n;)e=e.replace(j(n--),R);return e}},M=/[!'()~]|%20/g,P={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},z=function(t){return P[t]},F=function(t){return encodeURIComponent(t).replace(M,z)},U=function(t,e){if(e)for(var n,r,i=e.split("&"),o=0;o<i.length;)(n=i[o++]).length&&(r=n.split("="),t.push({key:L(r.shift()),value:L(r.join("="))}))},N=function(t){this.entries.length=0,U(this.entries,t)},D=function(t,e){if(t<e)throw TypeError("Not enough arguments")},$=u((function(t,e){S(this,{type:I,iterator:y(E(t).entries),kind:e})}),"Iterator",(function(){var t=O(this),e=t.kind,n=t.iterator.next(),r=n.value;return n.done||(n.value="keys"===e?r.key:"values"===e?r.value:[r.key,r.value]),n})),W=function(){f(this,W,_);var t,e,n,r,i,o,a,s,c,u=arguments.length>0?arguments[0]:void 0,l=[];if(S(this,{type:_,entries:l,updateURL:function(){},updateSearchParams:N}),void 0!==u)if(g(u))if("function"==typeof(t=b(u)))for(n=(e=t.call(u)).next;!(r=n.call(e)).done;){if((a=(o=(i=y(A(r.value))).next).call(i)).done||(s=o.call(i)).done||!o.call(i).done)throw TypeError("Expected sequence with length 2");l.push({key:a.value+"",value:s.value+""})}else for(c in u)d(u,c)&&l.push({key:c,value:u[c]+""});else U(l,"string"==typeof u?"?"===u.charAt(0)?u.slice(1):u:u+"")},Y=W.prototype;s(Y,{append:function(t,e){D(arguments.length,2);var n=E(this);n.entries.push({key:t+"",value:e+""}),n.updateURL()},delete:function(t){D(arguments.length,1);for(var e=E(this),n=e.entries,r=t+"",i=0;i<n.length;)n[i].key===r?n.splice(i,1):i++;e.updateURL()},get:function(t){D(arguments.length,1);for(var e=E(this).entries,n=t+"",r=0;r<e.length;r++)if(e[r].key===n)return e[r].value;return null},getAll:function(t){D(arguments.length,1);for(var e=E(this).entries,n=t+"",r=[],i=0;i<e.length;i++)e[i].key===n&&r.push(e[i].value);return r},has:function(t){D(arguments.length,1);for(var e=E(this).entries,n=t+"",r=0;r<e.length;)if(e[r++].key===n)return!0;return!1},set:function(t,e){D(arguments.length,1);for(var n,r=E(this),i=r.entries,o=!1,a=t+"",s=e+"",c=0;c<i.length;c++)(n=i[c]).key===a&&(o?i.splice(c--,1):(o=!0,n.value=s));o||i.push({key:a,value:s}),r.updateURL()},sort:function(){var t,e,n,r=E(this),i=r.entries,o=i.slice();for(i.length=0,n=0;n<o.length;n++){for(t=o[n],e=0;e<n;e++)if(i[e].key>t.key){i.splice(e,0,t);break}e===n&&i.push(t)}r.updateURL()},forEach:function(t){for(var e,n=E(this).entries,r=h(t,arguments.length>1?arguments[1]:void 0,3),i=0;i<n.length;)r((e=n[i++]).value,e.key,this)},keys:function(){return new $(this,"keys")},values:function(){return new $(this,"values")},entries:function(){return new $(this,"entries")}},{enumerable:!0}),a(Y,k,Y.entries),a(Y,"toString",(function(){for(var t,e=E(this).entries,n=[],r=0;r<e.length;)t=e[r++],n.push(F(t.key)+"="+F(t.value));return n.join("&")}),{enumerable:!0}),c(W,_),r({global:!0,forced:!o},{URLSearchParams:W}),o||"function"!=typeof w||"function"!=typeof x||r({global:!0,enumerable:!0,forced:!0},{fetch:function(t){var e,n,r,i=[t];return arguments.length>1&&(g(e=arguments[1])&&(n=e.body,p(n)===_&&((r=e.headers?new x(e.headers):new x).has("content-type")||r.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),e=m(e,{body:v(0,String(n)),headers:v(0,r)}))),i.push(e)),w.apply(this,i)}}),t.exports={URLSearchParams:W,getState:E}},285:(t,e,n)=>{"use strict";n(8783);var r,i=n(2109),o=n(9781),a=n(590),s=n(7854),c=n(6048),u=n(1320),l=n(5787),f=n(6656),d=n(1574),h=n(8457),p=n(8710).codeAt,A=n(3197),g=n(8003),m=n(1637),v=n(9909),y=s.URL,b=m.URLSearchParams,C=m.getState,w=v.set,x=v.getterFor("URL"),k=Math.floor,_=Math.pow,I="Invalid scheme",S="Invalid host",E="Invalid port",O=/[A-Za-z]/,T=/[\d+-.A-Za-z]/,B=/\d/,j=/^(0x|0X)/,R=/^[0-7]+$/,L=/^\d+$/,M=/^[\dA-Fa-f]+$/,P=/[\u0000\u0009\u000A\u000D #%/:?@[\\]]/,z=/[\u0000\u0009\u000A\u000D #/:?@[\\]]/,F=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,U=/[\u0009\u000A\u000D]/g,N=function(t,e){var n,r,i;if("["==e.charAt(0)){if("]"!=e.charAt(e.length-1))return S;if(!(n=$(e.slice(1,-1))))return S;t.host=n}else if(H(t)){if(e=A(e),P.test(e))return S;if(null===(n=D(e)))return S;t.host=n}else{if(z.test(e))return S;for(n="",r=h(e),i=0;i<r.length;i++)n+=q(r[i],Y);t.host=n}},D=function(t){var e,n,r,i,o,a,s,c=t.split(".");if(c.length&&""==c[c.length-1]&&c.pop(),(e=c.length)>4)return t;for(n=[],r=0;r<e;r++){if(""==(i=c[r]))return t;if(o=10,i.length>1&&"0"==i.charAt(0)&&(o=j.test(i)?16:8,i=i.slice(8==o?1:2)),""===i)a=0;else{if(!(10==o?L:8==o?R:M).test(i))return t;a=parseInt(i,o)}n.push(a)}for(r=0;r<e;r++)if(a=n[r],r==e-1){if(a>=_(256,5-e))return null}else if(a>255)return null;for(s=n.pop(),r=0;r<n.length;r++)s+=n[r]*_(256,3-r);return s},$=function(t){var e,n,r,i,o,a,s,c=[0,0,0,0,0,0,0,0],u=0,l=null,f=0,d=function(){return t.charAt(f)};if(":"==d()){if(":"!=t.charAt(1))return;f+=2,l=++u}for(;d();){if(8==u)return;if(":"!=d()){for(e=n=0;n<4&&M.test(d());)e=16*e+parseInt(d(),16),f++,n++;if("."==d()){if(0==n)return;if(f-=n,u>6)return;for(r=0;d();){if(i=null,r>0){if(!("."==d()&&r<4))return;f++}if(!B.test(d()))return;for(;B.test(d());){if(o=parseInt(d(),10),null===i)i=o;else{if(0==i)return;i=10*i+o}if(i>255)return;f++}c[u]=256*c[u]+i,2!=++r&&4!=r||u++}if(4!=r)return;break}if(":"==d()){if(f++,!d())return}else if(d())return;c[u++]=e}else{if(null!==l)return;f++,l=++u}}if(null!==l)for(a=u-l,u=7;0!=u&&a>0;)s=c[u],c[u--]=c[l+a-1],c[l+--a]=s;else if(8!=u)return;return c},W=function(t){var e,n,r,i;if("number"==typeof t){for(e=[],n=0;n<4;n++)e.unshift(t%256),t=k(t/256);return e.join(".")}if("object"==typeof t){for(e="",r=function(t){for(var e=null,n=1,r=null,i=0,o=0;o<8;o++)0!==t[o]?(i>n&&(e=r,n=i),r=null,i=0):(null===r&&(r=o),++i);return i>n&&(e=r,n=i),e}(t),n=0;n<8;n++)i&&0===t[n]||(i&&(i=!1),r===n?(e+=n?":":"::",i=!0):(e+=t[n].toString(16),n<7&&(e+=":")));return"["+e+"]"}return t},Y={},G=d({},Y,{" ":1,'"':1,"<":1,">":1,"`":1}),J=d({},G,{"#":1,"?":1,"{":1,"}":1}),K=d({},J,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),q=function(t,e){var n=p(t,0);return n>32&&n<127&&!f(e,t)?t:encodeURIComponent(t)},Z={ftp:21,file:null,http:80,https:443,ws:80,wss:443},H=function(t){return f(Z,t.scheme)},V=function(t){return""!=t.username||""!=t.password},X=function(t){return!t.host||t.cannotBeABaseURL||"file"==t.scheme},Q=function(t,e){var n;return 2==t.length&&O.test(t.charAt(0))&&(":"==(n=t.charAt(1))||!e&&"|"==n)},tt=function(t){var e;return t.length>1&&Q(t.slice(0,2))&&(2==t.length||"/"===(e=t.charAt(2))||"\\"===e||"?"===e||"#"===e)},et=function(t){var e=t.path,n=e.length;!n||"file"==t.scheme&&1==n&&Q(e[0],!0)||e.pop()},nt=function(t){return"."===t||"%2e"===t.toLowerCase()},rt={},it={},ot={},at={},st={},ct={},ut={},lt={},ft={},dt={},ht={},pt={},At={},gt={},mt={},vt={},yt={},bt={},Ct={},wt={},xt={},kt=function(t,e,n,i){var o,a,s,c,u,l=n||rt,d=0,p="",A=!1,g=!1,m=!1;for(n||(t.scheme="",t.username="",t.password="",t.host=null,t.port=null,t.path=[],t.query=null,t.fragment=null,t.cannotBeABaseURL=!1,e=e.replace(F,"")),e=e.replace(U,""),o=h(e);d<=o.length;){switch(a=o[d],l){case rt:if(!a||!O.test(a)){if(n)return I;l=ot;continue}p+=a.toLowerCase(),l=it;break;case it:if(a&&(T.test(a)||"+"==a||"-"==a||"."==a))p+=a.toLowerCase();else{if(":"!=a){if(n)return I;p="",l=ot,d=0;continue}if(n&&(H(t)!=f(Z,p)||"file"==p&&(V(t)||null!==t.port)||"file"==t.scheme&&!t.host))return;if(t.scheme=p,n)return void(H(t)&&Z[t.scheme]==t.port&&(t.port=null));p="","file"==t.scheme?l=gt:H(t)&&i&&i.scheme==t.scheme?l=at:H(t)?l=lt:"/"==o[d+1]?(l=st,d++):(t.cannotBeABaseURL=!0,t.path.push(""),l=Ct)}break;case ot:if(!i||i.cannotBeABaseURL&&"#"!=a)return I;if(i.cannotBeABaseURL&&"#"==a){t.scheme=i.scheme,t.path=i.path.slice(),t.query=i.query,t.fragment="",t.cannotBeABaseURL=!0,l=xt;break}l="file"==i.scheme?gt:ct;continue;case at:if("/"!=a||"/"!=o[d+1]){l=ct;continue}l=ft,d++;break;case st:if("/"==a){l=dt;break}l=bt;continue;case ct:if(t.scheme=i.scheme,a==r)t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query=i.query;else if("/"==a||"\\"==a&&H(t))l=ut;else if("?"==a)t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query="",l=wt;else{if("#"!=a){t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.path.pop(),l=bt;continue}t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,t.path=i.path.slice(),t.query=i.query,t.fragment="",l=xt}break;case ut:if(!H(t)||"/"!=a&&"\\"!=a){if("/"!=a){t.username=i.username,t.password=i.password,t.host=i.host,t.port=i.port,l=bt;continue}l=dt}else l=ft;break;case lt:if(l=ft,"/"!=a||"/"!=p.charAt(d+1))continue;d++;break;case ft:if("/"!=a&&"\\"!=a){l=dt;continue}break;case dt:if("@"==a){A&&(p="%40"+p),A=!0,s=h(p);for(var v=0;v<s.length;v++){var y=s[v];if(":"!=y||m){var b=q(y,K);m?t.password+=b:t.username+=b}else m=!0}p=""}else if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&H(t)){if(A&&""==p)return"Invalid authority";d-=h(p).length+1,p="",l=ht}else p+=a;break;case ht:case pt:if(n&&"file"==t.scheme){l=vt;continue}if(":"!=a||g){if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&H(t)){if(H(t)&&""==p)return S;if(n&&""==p&&(V(t)||null!==t.port))return;if(c=N(t,p))return c;if(p="",l=yt,n)return;continue}"["==a?g=!0:"]"==a&&(g=!1),p+=a}else{if(""==p)return S;if(c=N(t,p))return c;if(p="",l=At,n==pt)return}break;case At:if(!B.test(a)){if(a==r||"/"==a||"?"==a||"#"==a||"\\"==a&&H(t)||n){if(""!=p){var C=parseInt(p,10);if(C>65535)return E;t.port=H(t)&&C===Z[t.scheme]?null:C,p=""}if(n)return;l=yt;continue}return E}p+=a;break;case gt:if(t.scheme="file","/"==a||"\\"==a)l=mt;else{if(!i||"file"!=i.scheme){l=bt;continue}if(a==r)t.host=i.host,t.path=i.path.slice(),t.query=i.query;else if("?"==a)t.host=i.host,t.path=i.path.slice(),t.query="",l=wt;else{if("#"!=a){tt(o.slice(d).join(""))||(t.host=i.host,t.path=i.path.slice(),et(t)),l=bt;continue}t.host=i.host,t.path=i.path.slice(),t.query=i.query,t.fragment="",l=xt}}break;case mt:if("/"==a||"\\"==a){l=vt;break}i&&"file"==i.scheme&&!tt(o.slice(d).join(""))&&(Q(i.path[0],!0)?t.path.push(i.path[0]):t.host=i.host),l=bt;continue;case vt:if(a==r||"/"==a||"\\"==a||"?"==a||"#"==a){if(!n&&Q(p))l=bt;else if(""==p){if(t.host="",n)return;l=yt}else{if(c=N(t,p))return c;if("localhost"==t.host&&(t.host=""),n)return;p="",l=yt}continue}p+=a;break;case yt:if(H(t)){if(l=bt,"/"!=a&&"\\"!=a)continue}else if(n||"?"!=a)if(n||"#"!=a){if(a!=r&&(l=bt,"/"!=a))continue}else t.fragment="",l=xt;else t.query="",l=wt;break;case bt:if(a==r||"/"==a||"\\"==a&&H(t)||!n&&("?"==a||"#"==a)){if(".."===(u=(u=p).toLowerCase())||"%2e."===u||".%2e"===u||"%2e%2e"===u?(et(t),"/"==a||"\\"==a&&H(t)||t.path.push("")):nt(p)?"/"==a||"\\"==a&&H(t)||t.path.push(""):("file"==t.scheme&&!t.path.length&&Q(p)&&(t.host&&(t.host=""),p=p.charAt(0)+":"),t.path.push(p)),p="","file"==t.scheme&&(a==r||"?"==a||"#"==a))for(;t.path.length>1&&""===t.path[0];)t.path.shift();"?"==a?(t.query="",l=wt):"#"==a&&(t.fragment="",l=xt)}else p+=q(a,J);break;case Ct:"?"==a?(t.query="",l=wt):"#"==a?(t.fragment="",l=xt):a!=r&&(t.path[0]+=q(a,Y));break;case wt:n||"#"!=a?a!=r&&("'"==a&&H(t)?t.query+="%27":t.query+="#"==a?"%23":q(a,Y)):(t.fragment="",l=xt);break;case xt:a!=r&&(t.fragment+=q(a,G))}d++}},_t=function(t){var e,n,r=l(this,_t,"URL"),i=arguments.length>1?arguments[1]:void 0,a=String(t),s=w(r,{type:"URL"});if(void 0!==i)if(i instanceof _t)e=x(i);else if(n=kt(e={},String(i)))throw TypeError(n);if(n=kt(s,a,null,e))throw TypeError(n);var c=s.searchParams=new b,u=C(c);u.updateSearchParams(s.query),u.updateURL=function(){s.query=String(c)||null},o||(r.href=St.call(r),r.origin=Et.call(r),r.protocol=Ot.call(r),r.username=Tt.call(r),r.password=Bt.call(r),r.host=jt.call(r),r.hostname=Rt.call(r),r.port=Lt.call(r),r.pathname=Mt.call(r),r.search=Pt.call(r),r.searchParams=zt.call(r),r.hash=Ft.call(r))},It=_t.prototype,St=function(){var t=x(this),e=t.scheme,n=t.username,r=t.password,i=t.host,o=t.port,a=t.path,s=t.query,c=t.fragment,u=e+":";return null!==i?(u+="//",V(t)&&(u+=n+(r?":"+r:"")+"@"),u+=W(i),null!==o&&(u+=":"+o)):"file"==e&&(u+="//"),u+=t.cannotBeABaseURL?a[0]:a.length?"/"+a.join("/"):"",null!==s&&(u+="?"+s),null!==c&&(u+="#"+c),u},Et=function(){var t=x(this),e=t.scheme,n=t.port;if("blob"==e)try{return new URL(e.path[0]).origin}catch(t){return"null"}return"file"!=e&&H(t)?e+"://"+W(t.host)+(null!==n?":"+n:""):"null"},Ot=function(){return x(this).scheme+":"},Tt=function(){return x(this).username},Bt=function(){return x(this).password},jt=function(){var t=x(this),e=t.host,n=t.port;return null===e?"":null===n?W(e):W(e)+":"+n},Rt=function(){var t=x(this).host;return null===t?"":W(t)},Lt=function(){var t=x(this).port;return null===t?"":String(t)},Mt=function(){var t=x(this),e=t.path;return t.cannotBeABaseURL?e[0]:e.length?"/"+e.join("/"):""},Pt=function(){var t=x(this).query;return t?"?"+t:""},zt=function(){return x(this).searchParams},Ft=function(){var t=x(this).fragment;return t?"#"+t:""},Ut=function(t,e){return{get:t,set:e,configurable:!0,enumerable:!0}};if(o&&c(It,{href:Ut(St,(function(t){var e=x(this),n=String(t),r=kt(e,n);if(r)throw TypeError(r);C(e.searchParams).updateSearchParams(e.query)})),origin:Ut(Et),protocol:Ut(Ot,(function(t){var e=x(this);kt(e,String(t)+":",rt)})),username:Ut(Tt,(function(t){var e=x(this),n=h(String(t));if(!X(e)){e.username="";for(var r=0;r<n.length;r++)e.username+=q(n[r],K)}})),password:Ut(Bt,(function(t){var e=x(this),n=h(String(t));if(!X(e)){e.password="";for(var r=0;r<n.length;r++)e.password+=q(n[r],K)}})),host:Ut(jt,(function(t){var e=x(this);e.cannotBeABaseURL||kt(e,String(t),ht)})),hostname:Ut(Rt,(function(t){var e=x(this);e.cannotBeABaseURL||kt(e,String(t),pt)})),port:Ut(Lt,(function(t){var e=x(this);X(e)||(""==(t=String(t))?e.port=null:kt(e,t,At))})),pathname:Ut(Mt,(function(t){var e=x(this);e.cannotBeABaseURL||(e.path=[],kt(e,t+"",yt))})),search:Ut(Pt,(function(t){var e=x(this);""==(t=String(t))?e.query=null:("?"==t.charAt(0)&&(t=t.slice(1)),e.query="",kt(e,t,wt)),C(e.searchParams).updateSearchParams(e.query)})),searchParams:Ut(zt),hash:Ut(Ft,(function(t){var e=x(this);""!=(t=String(t))?("#"==t.charAt(0)&&(t=t.slice(1)),e.fragment="",kt(e,t,xt)):e.fragment=null}))}),u(It,"toJSON",(function(){return St.call(this)}),{enumerable:!0}),u(It,"toString",(function(){return St.call(this)}),{enumerable:!0}),y){var Nt=y.createObjectURL,Dt=y.revokeObjectURL;Nt&&u(_t,"createObjectURL",(function(t){return Nt.apply(y,arguments)})),Dt&&u(_t,"revokeObjectURL",(function(t){return Dt.apply(y,arguments)}))}g(_t,"URL"),i({global:!0,forced:!a,sham:!o},{URL:_t})},3753:(t,e,n)=>{"use strict";n(2109)({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return URL.prototype.toString.call(this)}})},8594:(t,e,n)=>{n(1926),n(6337);var r=n(857);t.exports=r},6337:(t,e,n)=>{n(4747),n(3948),n(4633),n(5844),n(2564),n(285),n(3753),n(1637);var r=n(857);t.exports=r},9151:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(7537),i=n.n(r),o=n(3645),a=n.n(o)()(i());a.push([t.id,'*{margin:0;padding:0}*,*::before,*::after{box-sizing:inherit}html{box-sizing:border-box;font-size:62.5%}@media only screen and (max-width: 61.25em){html{font-size:50%}}body{font-family:"Nunito Sans",sans-serif;font-weight:400;line-height:1.6;color:#615551;background-image:linear-gradient(to right bottom, #fbdb89, #f48982);background-size:cover;background-repeat:no-repeat;min-height:calc(100vh - 8vw)}.container{max-width:120rem;min-height:117rem;margin:4vw auto;background-color:#fff;border-radius:9px;overflow:hidden;box-shadow:0 2rem 6rem .5rem rgba(97,85,81,.2);display:grid;grid-template-rows:10rem minmax(100rem, auto);grid-template-columns:1fr 2fr;grid-template-areas:"head head" "list recipe"}@media only screen and (max-width: 78.15em){.container{max-width:100%;margin:0;border-radius:0}}.btn--small,.btn--small:link,.btn--small:visited,.btn{background-image:linear-gradient(to right bottom, #fbdb89, #f48982);border-radius:10rem;border:none;text-transform:uppercase;color:#fff;cursor:pointer;display:flex;align-items:center;transition:all .2s}.btn--small:hover,.btn:hover{transform:scale(1.05)}.btn--small:focus,.btn:focus{outline:none}.btn--small>*:first-child,.btn>*:first-child{margin-right:1rem}.btn{padding:1.5rem 4rem;font-size:1.5rem;font-weight:600}.btn svg{height:2.25rem;width:2.25rem;fill:currentColor}.btn--small,.btn--small:link,.btn--small:visited{font-size:1.4rem;font-weight:600;padding:1.25rem 2.25rem;text-decoration:none}.btn--small svg,.btn--small:link svg,.btn--small:visited svg{height:1.75rem;width:1.75rem;fill:currentColor}.btn--inline{color:#f38e82;font-size:1.3rem;font-weight:600;border:none;background-color:#f9f5f3;padding:.8rem 1.2rem;border-radius:10rem;cursor:pointer;display:flex;align-items:center;transition:all .2s}.btn--inline svg{height:1.6rem;width:1.6rem;fill:currentColor;margin:0 .2rem}.btn--inline span{margin:0 .4rem}.btn--inline:hover{color:#f48982;background-color:#f2efee}.btn--inline:focus{outline:none}.btn--round{background-image:linear-gradient(to right bottom, #fbdb89, #f48982);border-radius:50%;border:none;cursor:pointer;height:4.5rem;width:4.5rem;margin-left:1.6rem;transition:all .2s;display:flex;align-items:center;justify-content:center}.btn--round:hover{transform:scale(1.07)}.btn--round:focus{outline:none}.btn--round svg{height:2.5rem;width:2.5rem;fill:#fff}.btn--round .hidden{display:none}.btn--tiny{height:2rem;width:2rem;border:none;background:none;cursor:pointer}.btn--tiny svg{height:100%;width:100%;fill:#f38e82;transition:all .3s}.btn--tiny:focus{outline:none}.btn--tiny:hover svg{fill:#f48982;transform:translateY(-1px)}.btn--tiny:active svg{fill:#f48982;transform:translateY(0)}.btn--tiny:not(:last-child){margin-right:.3rem}.heading--2{font-size:2rem;font-weight:700;color:#f38e82;text-transform:uppercase;margin-bottom:2.5rem;text-align:center}.link:link,.link:visited{color:#918581}.spinner{margin:5rem auto;text-align:center}.spinner svg{height:6rem;width:6rem;fill:#f38e82;animation:rotate 2s infinite linear}@keyframes rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}.message,.error{max-width:50rem;margin:0 auto;padding:5rem 4rem;display:flex}.message svg,.error svg{height:3rem;width:3rem;fill:#f38e82;transform:translateY(-0.3rem)}.message p,.error p{margin-left:1.5rem;font-size:1.8rem;line-height:1.5;font-weight:600}.header{grid-area:head;background-color:#f9f5f3;display:flex;align-items:center;justify-content:space-between}.header__logo{margin-left:4rem;height:4.6rem;display:block}.search{background-color:#fff;border-radius:10rem;display:flex;align-items:center;padding-left:3rem;transition:all .3s}.search:focus-within{transform:translateY(-2px);box-shadow:0 .7rem 3rem rgba(97,85,81,.08)}.search__field{border:none;background:none;font-family:inherit;color:inherit;font-size:1.7rem;width:30rem}.search__field:focus{outline:none}.search__field::placeholder{color:#d3c7c3}@media only screen and (max-width: 61.25em){.search__field{width:auto}.search__field::placeholder{color:#fff}}.search__btn{font-weight:600;font-family:inherit}.nav{align-self:stretch;margin-right:2.5rem}.nav__list{list-style:none;display:flex;height:100%}.nav__item{position:relative}.nav__btn{height:100%;font-family:inherit;color:inherit;font-size:1.4rem;font-weight:700;text-transform:uppercase;background:none;border:none;cursor:pointer;padding:0 1.5rem;transition:all .3s;display:flex;align-items:center}.nav__btn svg{height:2.4rem;width:2.4rem;fill:#f38e82;margin-right:.7rem;transform:translateY(-1px)}.nav__btn:focus{outline:none}.nav__btn:hover{background-color:#f2efee}.nav .hidden{display:none}.bookmarks{padding:1rem 0;position:absolute;right:-2.5rem;z-index:10;width:40rem;background-color:#fff;box-shadow:0 .8rem 5rem 2rem rgba(97,85,81,.1);visibility:hidden;opacity:0;transition:all .5s .2s}.bookmarks__list{list-style:none}.bookmarks__field{cursor:pointer;padding:0 4rem;display:flex;align-items:center;height:100%;transition:all .3s}.bookmarks__field:hover{background-color:#f2efee}.bookmarks:hover,.nav__btn--bookmarks:hover+.bookmarks{visibility:visible;opacity:1}.preview__link:link,.preview__link:visited{display:flex;align-items:center;padding:1.5rem 3.25rem;transition:all .3s;border-right:1px solid #fff;text-decoration:none}.preview__link:hover{background-color:#f9f5f3;transform:translateY(-2px)}.preview__link--active{background-color:#f9f5f3}.preview__fig{flex:0 0 5.8rem;border-radius:50%;overflow:hidden;height:5.8rem;margin-right:2rem;position:relative;backface-visibility:hidden}.preview__fig::before{content:"";display:block;height:100%;width:100%;position:absolute;top:0;left:0;background-image:linear-gradient(to right bottom, #fbdb89, #f48982);opacity:.4}.preview__fig img{display:block;width:100%;height:100%;object-fit:cover;transition:all .3s}.preview__data{display:grid;width:100%;grid-template-columns:1fr 2rem;row-gap:.1rem;align-items:center}.preview__title{grid-column:1/-1;font-size:1.45rem;color:#f38e82;text-transform:uppercase;font-weight:600;text-overflow:ellipsis;max-width:25rem;white-space:nowrap;overflow:hidden}.preview__publisher{font-size:1.15rem;color:#918581;text-transform:uppercase;font-weight:600}.preview__user-generated{background-color:#eeeae8;display:flex;align-items:center;justify-content:center;height:2rem;width:2rem;border-radius:10rem;margin-left:auto;margin-right:1.75rem}.preview__user-generated svg{height:1.2rem;width:1.2rem;fill:#f38e82}.search-results{padding:3rem 0;display:flex;flex-direction:column}.results{list-style:none;margin-bottom:2rem}.pagination{margin-top:auto;padding:0 3.5rem}.pagination::after{content:"";display:table;clear:both}.pagination__btn--prev{float:left}.pagination__btn--next{float:right}.copyright{color:#918581;font-size:1.2rem;padding:0 3.5rem;margin-top:4rem}.copyright .twitter-link:link,.copyright .twitter-link:visited{color:#918581}.recipe{background-color:#f9f5f3}.recipe__fig{height:32rem;position:relative;transform-origin:top}.recipe__fig::before{content:"";display:block;height:100%;width:100%;position:absolute;top:0;left:0;background-image:linear-gradient(to right bottom, #fbdb89, #f48982);opacity:.6}.recipe__img{width:100%;display:block;height:100%;object-fit:cover}.recipe__title{position:absolute;bottom:0;left:50%;transform:translate(-50%, 20%) skewY(-6deg);color:#fff;font-weight:700;font-size:3.25rem;text-transform:uppercase;width:50%;line-height:1.95;text-align:center}.recipe__title span{-webkit-box-decoration-break:clone;box-decoration-break:clone;padding:1.3rem 2rem;background-image:linear-gradient(to right bottom, #fbdb89, #f48982)}@media only screen and (max-width: 61.25em){.recipe__title{width:70%}}.recipe__details{display:flex;align-items:center;padding:7.5rem 8rem 3.5rem 8rem}.recipe__info{font-size:1.65rem;text-transform:uppercase;display:flex;align-items:center}.recipe__info:not(:last-child){margin-right:4.5rem}.recipe__info-icon{height:2.35rem;width:2.35rem;fill:#f38e82;margin-right:1.15rem}.recipe__info-data{margin-right:.5rem;font-weight:700}.recipe__info-buttons{display:flex;margin-left:1.6rem;transform:translateY(-1px)}.recipe__user-generated{background-color:#eeeae8;display:flex;align-items:center;justify-content:center;height:4rem;width:4rem;border-radius:10rem;margin-left:auto;margin-right:1.75rem}.recipe__user-generated svg{height:2.25rem;width:2.25rem;fill:#f38e82}.recipe__ingredients{padding:5rem 8rem;font-size:1.6rem;line-height:1.4;background-color:#f2efee;display:flex;flex-direction:column;align-items:center}.recipe__ingredient-list{display:grid;grid-template-columns:1fr 1fr;gap:2.5rem 3rem;list-style:none}.recipe__ingredient{display:flex}.recipe__icon{height:2rem;width:2rem;fill:#f38e82;margin-right:1.1rem;flex:0 0 auto;margin-top:.1rem}.recipe__quantity{margin-right:.5rem;flex:0 0 auto}.recipe__directions{padding:5rem 10rem;padding-bottom:5rem;display:flex;flex-direction:column;align-items:center}.recipe__directions-text{font-size:1.7rem;text-align:center;margin-bottom:3.5rem;color:#918581}.recipe__publisher{font-weight:700}.add-recipe-window{position:fixed;top:50%;left:50%;transform:translate(-50%, -50%);width:100rem;background-color:#fff;border-radius:9px;padding:5rem 6rem;box-shadow:0 4rem 6rem rgba(0,0,0,.25);z-index:1000;transition:all .5s}.add-recipe-window .btn--close-modal{font-family:inherit;color:inherit;position:absolute;top:.5rem;right:1.6rem;font-size:3.5rem;cursor:pointer;border:none;background:none}.overlay{position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,.4);backdrop-filter:blur(4px);z-index:100;transition:all .5s}.hidden{visibility:hidden;opacity:0}.upload{display:grid;grid-template-columns:1fr 1fr;gap:4rem 6rem}.upload__column{display:grid;grid-template-columns:1fr 2.8fr;align-items:center;gap:1.5rem}.upload__column label{font-size:1.5rem;font-weight:600;color:inherit}.upload__column input,.upload__column textarea{font-size:1.5rem;padding:.8rem 1rem;border:1px solid #ddd;border-radius:.5rem;transition:all .2s}.upload__column input::placeholder,.upload__column textarea::placeholder{color:#d3c7c3}.upload__column input:focus,.upload__column textarea:focus{outline:none;border:1px solid #f38e82;background-color:#f9f5f3}.upload__column button{grid-column:1/span 2;justify-self:center;margin-top:1rem}.upload__heading{font-size:2.25rem;font-weight:700;text-transform:uppercase;margin-bottom:1rem;grid-column:1/-1}.upload__btn{grid-column:1/-1;justify-self:center}',"",{version:3,sources:["webpack://./src/sass/_base.scss","webpack://./src/sass/_components.scss","webpack://./src/sass/_header.scss","webpack://./src/sass/_preview.scss","webpack://./src/sass/_searchResults.scss","webpack://./src/sass/_recipe.scss","webpack://./src/sass/_upload.scss"],names:[],mappings:"AAkBA,EACI,QAAA,CACA,SAAA,CAGJ,qBAGI,kBAAA,CAGJ,KACI,qBAAA,CACA,eAAA,CAEA,4CAJJ,KAKQ,aAAA,CAAA,CAIR,KACI,oCAAA,CACA,eAAA,CACA,eAAA,CACA,aAlCgB,CAmChB,mEAhCO,CAiCP,qBAAA,CACA,2BAAA,CACA,4BAAA,CAGJ,WACI,gBAAA,CACA,iBAAA,CACA,eAAA,CACA,qBAAA,CACA,iBAAA,CACA,eAAA,CACA,8CAAA,CAEA,YAAA,CACA,6CAAA,CACA,6BAAA,CACA,6CACI,CAGJ,4CAhBJ,WAiBQ,cAAA,CACA,QAAA,CACA,eAAA,CAAA,CCpER,sDACI,mEDUO,CCTP,mBAAA,CACA,WAAA,CACA,wBAAA,CACA,UAAA,CACA,cAAA,CACA,YAAA,CACA,kBAAA,CACA,kBAAA,CAEA,6BACI,qBAAA,CAGJ,6BACI,YAAA,CAGJ,6CACI,iBAAA,CAIR,KAGI,mBAAA,CACA,gBAAA,CACA,eAAA,CAEA,SACI,cAAA,CACA,aAAA,CACA,iBAAA,CAKJ,iDAKI,gBAAA,CACA,eAAA,CACA,uBAAA,CACA,oBAAA,CAEA,6DACI,cAAA,CACA,aAAA,CACA,iBAAA,CAKZ,aACI,aDzDY,CC0DZ,gBAAA,CACA,eAAA,CACA,WAAA,CACA,wBDzDiB,CC0DjB,oBAAA,CACA,mBAAA,CACA,cAAA,CAEA,YAAA,CACA,kBAAA,CACA,kBAAA,CAEA,iBACI,aAAA,CACA,YAAA,CACA,iBAAA,CACA,cAAA,CAGJ,kBACI,cAAA,CAGJ,mBACI,aDhFO,CCiFP,wBD9Ea,CCiFjB,mBACI,YAAA,CAIR,YACI,mEDlFO,CCmFP,iBAAA,CACA,WAAA,CACA,cAAA,CACA,aAAA,CACA,YAAA,CACA,kBAAA,CACA,kBAAA,CAEA,YAAA,CACA,kBAAA,CACA,sBAAA,CAEA,kBACI,qBAAA,CAGJ,kBACI,YAAA,CAGJ,gBACI,aAAA,CACA,YAAA,CACA,SAAA,CAGJ,oBACI,YAAA,CAIR,WACI,WAAA,CACA,UAAA,CACA,WAAA,CACA,eAAA,CACA,cAAA,CAEA,eACI,WAAA,CACA,UAAA,CACA,YDtIQ,CCuIR,kBAAA,CAGJ,iBACI,YAAA,CAGJ,qBACI,YD7IO,CC8IP,0BAAA,CAGJ,sBACI,YDlJO,CCmJP,uBAAA,CAGJ,4BACI,kBAAA,CAIR,YACI,cAAA,CACA,eAAA,CACA,aDhKY,CCiKZ,wBAAA,CACA,oBAAA,CACA,iBAAA,CAIJ,yBAEI,aDjKgB,CCoKpB,SACI,gBAAA,CACA,iBAAA,CAEA,aACI,WAAA,CACA,UAAA,CACA,YDnLQ,CCoLR,mCAAA,CAIR,kBACI,GACI,mBAAA,CAGJ,KACI,wBAAA,CAAA,CAIR,gBAEI,eAAA,CACA,aAAA,CACA,iBAAA,CAEA,YAAA,CAEA,wBACI,WAAA,CACA,UAAA,CACA,YD7MQ,CC8MR,6BAAA,CAGJ,oBACI,kBAAA,CACA,gBAAA,CACA,eAAA,CACA,eAAA,CCtNR,QACI,cAAA,CACA,wBFGiB,CEFjB,YAAA,CACA,kBAAA,CACA,6BAAA,CAEA,cACI,gBAAA,CACA,aAAA,CACA,aAAA,CAIR,QACI,qBAAA,CACA,mBAAA,CACA,YAAA,CACA,kBAAA,CACA,iBAAA,CACA,kBAAA,CAEA,qBACI,0BAAA,CACA,0CAAA,CAGJ,eACI,WAAA,CACA,eAAA,CACA,mBAAA,CACA,aAAA,CACA,gBAAA,CACA,WAAA,CAEA,qBACI,YAAA,CAGJ,4BACI,aFjCS,CEoCb,4CAhBJ,eAiBQ,UAAA,CAEA,4BACI,UAAA,CAAA,CAKZ,aACI,eAAA,CACA,mBAAA,CAIR,KACI,kBAAA,CACA,mBAAA,CAEA,WACI,eAAA,CACA,YAAA,CACA,WAAA,CAGJ,WACI,iBAAA,CAGJ,UACI,WAAA,CACA,mBAAA,CACA,aAAA,CACA,gBAAA,CACA,eAAA,CACA,wBAAA,CACA,eAAA,CACA,WAAA,CACA,cAAA,CACA,gBAAA,CACA,kBAAA,CAEA,YAAA,CACA,kBAAA,CAEA,cACI,aAAA,CACA,YAAA,CACA,YF1FI,CE2FJ,kBAAA,CACA,0BAAA,CAGJ,gBACI,YAAA,CAGJ,gBACI,wBF/FS,CEmGjB,aACI,YAAA,CAIR,WACI,cAAA,CACA,iBAAA,CAEA,aAAA,CACA,UAAA,CACA,WAAA,CACA,qBAAA,CACA,8CAAA,CAEA,iBAAA,CACA,SAAA,CACA,sBAAA,CAEA,iBACI,eAAA,CAGJ,kBACI,cAAA,CACA,cAAA,CAEA,YAAA,CACA,kBAAA,CACA,WAAA,CACA,kBAAA,CAEA,wBACI,wBFpIS,CEwIjB,uDAEI,kBAAA,CACA,SAAA,CC/IA,2CAEI,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,kBAAA,CACA,2BAAA,CACA,oBAAA,CAGJ,qBACI,wBHRS,CGST,0BAAA,CAGJ,uBACI,wBHbS,CGiBjB,cACI,eAAA,CACA,iBAAA,CACA,eAAA,CACA,aAAA,CACA,iBAAA,CACA,iBAAA,CACA,0BAAA,CAEA,sBACI,UAAA,CACA,aAAA,CACA,WAAA,CACA,UAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,mEAAA,CAKA,UAAA,CAGJ,kBACI,aAAA,CACA,UAAA,CACA,WAAA,CACA,gBAAA,CACA,kBAAA,CAIR,eACI,YAAA,CACA,UAAA,CACA,8BAAA,CACA,aAAA,CACA,kBAAA,CAGJ,gBACI,gBAAA,CACA,iBAAA,CACA,aHlEQ,CGmER,wBAAA,CACA,eAAA,CAGA,sBAAA,CACA,eAAA,CACA,kBAAA,CACA,eAAA,CAGJ,oBACI,iBAAA,CACA,aHvEY,CGwEZ,wBAAA,CACA,eAAA,CAGJ,yBACI,wBAAA,CAEA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,WAAA,CACA,UAAA,CACA,mBAAA,CAEA,gBAAA,CACA,oBAAA,CAEA,6BACI,aAAA,CACA,YAAA,CACA,YHpGI,CIDhB,gBACI,cAAA,CACA,YAAA,CACA,qBAAA,CAGJ,SACI,eAAA,CACA,kBAAA,CAGJ,YACI,eAAA,CACA,gBAAA,CAEA,mBACI,UAAA,CACA,aAAA,CACA,UAAA,CAIA,uBACI,UAAA,CAEJ,uBACI,WAAA,CAKZ,WACI,aJvBgB,CIwBhB,gBAAA,CACA,gBAAA,CACA,eAAA,CAEA,+DAEI,aJ9BY,CKTpB,QACI,wBLIiB,CAAA,aKCb,YAAA,CACA,iBAAA,CAEA,oBAAA,CAEA,qBACI,UAAA,CACA,aAAA,CACA,WAAA,CACA,UAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,mEAAA,CAKA,UAAA,CAIR,aACI,UAAA,CACA,aAAA,CACA,WAAA,CACA,gBAAA,CAGJ,eACI,iBAAA,CACA,QAAA,CACA,QAAA,CACA,2CAAA,CACA,UAAA,CACA,eAAA,CACA,iBAAA,CACA,wBAAA,CACA,SAAA,CACA,gBAAA,CACA,iBAAA,CAEA,oBACI,kCAAA,CACA,0BAAA,CACA,mBAAA,CACA,mEAAA,CAOJ,4CAxBJ,eAyBQ,SAAA,CAAA,CAMR,iBACI,YAAA,CACA,kBAAA,CACA,+BAAA,CAGJ,cACI,iBAAA,CACA,wBAAA,CACA,YAAA,CACA,kBAAA,CAEA,+BACI,mBAAA,CAIR,mBACI,cAAA,CACA,aAAA,CACA,YLrFQ,CKsFR,oBAAA,CAGJ,mBACI,kBAAA,CACA,eAAA,CAGJ,sBACI,YAAA,CACA,kBAAA,CACA,0BAAA,CAGJ,wBACI,wBAAA,CAEA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,WAAA,CACA,UAAA,CACA,mBAAA,CAEA,gBAAA,CACA,oBAAA,CAEA,4BACI,cAAA,CACA,aAAA,CACA,YLpHI,CK0HZ,qBACI,iBAAA,CACA,gBAAA,CACA,eAAA,CACA,wBLzHa,CK0Hb,YAAA,CACA,qBAAA,CACA,kBAAA,CAGJ,yBACI,YAAA,CACA,6BAAA,CACA,eAAA,CACA,eAAA,CAGJ,oBACI,YAAA,CAGJ,cACI,WAAA,CACA,UAAA,CACA,YLlJQ,CKmJR,mBAAA,CACA,aAAA,CACA,gBAAA,CAGJ,kBACI,kBAAA,CACA,aAAA,CAKJ,oBACI,kBAAA,CACA,mBAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CAGJ,yBACI,gBAAA,CACA,iBAAA,CACA,oBAAA,CACA,aLnKY,CKsKhB,mBACI,eAAA,CChLR,mBACI,cAAA,CACA,OAAA,CACA,QAAA,CACA,+BAAA,CACA,YAAA,CACA,qBAAA,CACA,iBAAA,CAEA,iBAAA,CACA,sCAAA,CACA,YAAA,CACA,kBAAA,CAEA,qCACI,mBAAA,CACA,aAAA,CACA,iBAAA,CACA,SAAA,CACA,YAAA,CACA,gBAAA,CACA,cAAA,CACA,WAAA,CACA,eAAA,CAIR,SACI,cAAA,CACA,KAAA,CACA,MAAA,CACA,UAAA,CACA,WAAA,CACA,+BAAA,CACA,yBAAA,CACA,WAAA,CACA,kBAAA,CAGJ,QACI,iBAAA,CACA,SAAA,CAGJ,QACI,YAAA,CACA,6BAAA,CACA,aAAA,CAEA,gBACI,YAAA,CACA,+BAAA,CACA,kBAAA,CACA,UAAA,CAEA,sBACI,gBAAA,CACA,eAAA,CACA,aAAA,CAGJ,+CAEI,gBAAA,CACA,kBAAA,CACA,qBAAA,CACA,mBAAA,CACA,kBAAA,CAEA,yEACI,aN/DK,CMkET,2DACI,YAAA,CACA,wBAAA,CACA,wBNvEK,CM2Eb,uBACI,oBAAA,CACA,mBAAA,CACA,eAAA,CAIR,iBACI,iBAAA,CACA,eAAA,CACA,wBAAA,CACA,kBAAA,CACA,gBAAA,CAGJ,aACI,gBAAA,CACA,mBAAA",sourcesContent:["// $color-primary: #f59a83;\n$color-primary: #f38e82;\n$color-grad-1: #fbdb89;\n$color-grad-2: #f48982;\n\n$color-grey-light-1: #f9f5f3; // Light background\n$color-grey-light-2: #f2efee; // Light lines\n$color-grey-light-3: #d3c7c3; // Light text (placeholder)\n$color-grey-dark-1: #615551; // Normal text\n$color-grey-dark-2: #918581; // Lighter text\n\n$gradient: linear-gradient(to right bottom, $color-grad-1, $color-grad-2);\n\n$bp-large: 78.15em; // 1250px\n$bp-medium: 61.25em; // 980px\n$bp-small: 37.5em; // 600px\n$bp-smallest: 31.25em; // 500px\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\n*,\n*::before,\n*::after {\n    box-sizing: inherit;\n}\n\nhtml {\n    box-sizing: border-box;\n    font-size: 62.5%;\n\n    @media only screen and (max-width: $bp-medium) {\n        font-size: 50%;\n    }\n}\n\nbody {\n    font-family: 'Nunito Sans', sans-serif;\n    font-weight: 400;\n    line-height: 1.6;\n    color: $color-grey-dark-1;\n    background-image: $gradient;\n    background-size: cover;\n    background-repeat: no-repeat;\n    min-height: calc(100vh - 2 * 4vw);\n}\n\n.container {\n    max-width: 120rem;\n    min-height: 117rem;\n    margin: 4vw auto;\n    background-color: #fff;\n    border-radius: 9px;\n    overflow: hidden;\n    box-shadow: 0 2rem 6rem 0.5rem rgba($color-grey-dark-1, 0.2);\n\n    display: grid;\n    grid-template-rows: 10rem minmax(100rem, auto);\n    grid-template-columns: 1fr 2fr;\n    grid-template-areas:\n        'head head'\n        'list recipe';\n\n    @media only screen and (max-width: $bp-large) {\n        max-width: 100%;\n        margin: 0;\n        border-radius: 0;\n    }\n}\n","%btn {\n    background-image: $gradient;\n    border-radius: 10rem;\n    border: none;\n    text-transform: uppercase;\n    color: #fff;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    transition: all 0.2s;\n\n    &:hover {\n        transform: scale(1.05);\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    & > *:first-child {\n        margin-right: 1rem;\n    }\n}\n\n.btn {\n    @extend %btn;\n\n    padding: 1.5rem 4rem;\n    font-size: 1.5rem;\n    font-weight: 600;\n\n    svg {\n        height: 2.25rem;\n        width: 2.25rem;\n        fill: currentColor;\n    }\n}\n\n.btn--small {\n    &,\n    &:link,\n    &:visited {\n        @extend %btn;\n\n        font-size: 1.4rem;\n        font-weight: 600;\n        padding: 1.25rem 2.25rem;\n        text-decoration: none;\n\n        svg {\n            height: 1.75rem;\n            width: 1.75rem;\n            fill: currentColor;\n        }\n    }\n}\n\n.btn--inline {\n    color: $color-primary;\n    font-size: 1.3rem;\n    font-weight: 600;\n    border: none;\n    background-color: $color-grey-light-1;\n    padding: 0.8rem 1.2rem;\n    border-radius: 10rem;\n    cursor: pointer;\n\n    display: flex;\n    align-items: center;\n    transition: all 0.2s;\n\n    svg {\n        height: 1.6rem;\n        width: 1.6rem;\n        fill: currentColor;\n        margin: 0 0.2rem;\n    }\n\n    span {\n        margin: 0 0.4rem;\n    }\n\n    &:hover {\n        color: $color-grad-2;\n        background-color: $color-grey-light-2;\n    }\n\n    &:focus {\n        outline: none;\n    }\n}\n\n.btn--round {\n    background-image: $gradient;\n    border-radius: 50%;\n    border: none;\n    cursor: pointer;\n    height: 4.5rem;\n    width: 4.5rem;\n    margin-left: 1.6rem;\n    transition: all 0.2s;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:hover {\n        transform: scale(1.07);\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    svg {\n        height: 2.5rem;\n        width: 2.5rem;\n        fill: #fff;\n    }\n\n    .hidden {\n        display: none;\n    }\n}\n\n.btn--tiny {\n    height: 2rem;\n    width: 2rem;\n    border: none;\n    background: none;\n    cursor: pointer;\n\n    svg {\n        height: 100%;\n        width: 100%;\n        fill: $color-primary;\n        transition: all 0.3s;\n    }\n\n    &:focus {\n        outline: none;\n    }\n\n    &:hover svg {\n        fill: $color-grad-2;\n        transform: translateY(-1px);\n    }\n\n    &:active svg {\n        fill: $color-grad-2;\n        transform: translateY(0);\n    }\n\n    &:not(:last-child) {\n        margin-right: 0.3rem;\n    }\n}\n\n.heading--2 {\n    font-size: 2rem;\n    font-weight: 700;\n    color: $color-primary;\n    text-transform: uppercase;\n    margin-bottom: 2.5rem;\n    text-align: center;\n    // transform: skewY(-3deg);\n}\n\n.link:link,\n.link:visited {\n    color: $color-grey-dark-2;\n}\n\n.spinner {\n    margin: 5rem auto;\n    text-align: center;\n\n    svg {\n        height: 6rem;\n        width: 6rem;\n        fill: $color-primary;\n        animation: rotate 2s infinite linear;\n    }\n}\n\n@keyframes rotate {\n    0% {\n        transform: rotate(0);\n    }\n\n    100% {\n        transform: rotate(360deg);\n    }\n}\n\n.message,\n.error {\n    max-width: 50rem;\n    margin: 0 auto;\n    padding: 5rem 4rem;\n\n    display: flex;\n\n    svg {\n        height: 3rem;\n        width: 3rem;\n        fill: $color-primary;\n        transform: translateY(-0.3rem);\n    }\n\n    p {\n        margin-left: 1.5rem;\n        font-size: 1.8rem;\n        line-height: 1.5;\n        font-weight: 600;\n    }\n}\n",".header {\n    grid-area: head;\n    background-color: $color-grey-light-1;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    &__logo {\n        margin-left: 4rem;\n        height: 4.6rem;\n        display: block;\n    }\n}\n\n.search {\n    background-color: #fff;\n    border-radius: 10rem;\n    display: flex;\n    align-items: center;\n    padding-left: 3rem;\n    transition: all 0.3s;\n\n    &:focus-within {\n        transform: translateY(-2px);\n        box-shadow: 0 0.7rem 3rem rgba($color-grey-dark-1, 0.08);\n    }\n\n    &__field {\n        border: none;\n        background: none;\n        font-family: inherit;\n        color: inherit;\n        font-size: 1.7rem;\n        width: 30rem;\n\n        &:focus {\n            outline: none;\n        }\n\n        &::placeholder {\n            color: $color-grey-light-3;\n        }\n\n        @media only screen and (max-width: $bp-medium) {\n            width: auto;\n\n            &::placeholder {\n                color: white;\n            }\n        }\n    }\n\n    &__btn {\n        font-weight: 600;\n        font-family: inherit;\n    }\n}\n\n.nav {\n    align-self: stretch;\n    margin-right: 2.5rem;\n\n    &__list {\n        list-style: none;\n        display: flex;\n        height: 100%;\n    }\n\n    &__item {\n        position: relative;\n    }\n\n    &__btn {\n        height: 100%;\n        font-family: inherit;\n        color: inherit;\n        font-size: 1.4rem;\n        font-weight: 700;\n        text-transform: uppercase;\n        background: none;\n        border: none;\n        cursor: pointer;\n        padding: 0 1.5rem;\n        transition: all 0.3s;\n\n        display: flex;\n        align-items: center;\n\n        svg {\n            height: 2.4rem;\n            width: 2.4rem;\n            fill: $color-primary;\n            margin-right: 0.7rem;\n            transform: translateY(-1px);\n        }\n\n        &:focus {\n            outline: none;\n        }\n\n        &:hover {\n            background-color: $color-grey-light-2;\n        }\n    }\n\n    .hidden {\n        display: none;\n    }\n}\n\n.bookmarks {\n    padding: 1rem 0;\n    position: absolute;\n    // right: 0;\n    right: -2.5rem;\n    z-index: 10;\n    width: 40rem;\n    background-color: #fff;\n    box-shadow: 0 0.8rem 5rem 2rem rgba($color-grey-dark-1, 0.1);\n\n    visibility: hidden;\n    opacity: 0;\n    transition: all 0.5s 0.2s;\n\n    &__list {\n        list-style: none;\n    }\n\n    &__field {\n        cursor: pointer;\n        padding: 0 4rem;\n\n        display: flex;\n        align-items: center;\n        height: 100%;\n        transition: all 0.3s;\n\n        &:hover {\n            background-color: $color-grey-light-2;\n        }\n    }\n\n    &:hover,\n    .nav__btn--bookmarks:hover + & {\n        visibility: visible;\n        opacity: 1;\n    }\n}\n",".preview {\n    &__link {\n        &:link,\n        &:visited {\n            display: flex;\n            align-items: center;\n            padding: 1.5rem 3.25rem;\n            transition: all 0.3s;\n            border-right: 1px solid #fff;\n            text-decoration: none;\n        }\n\n        &:hover {\n            background-color: $color-grey-light-1;\n            transform: translateY(-2px);\n        }\n\n        &--active {\n            background-color: $color-grey-light-1;\n        }\n    }\n\n    &__fig {\n        flex: 0 0 5.8rem;\n        border-radius: 50%;\n        overflow: hidden;\n        height: 5.8rem;\n        margin-right: 2rem;\n        position: relative;\n        backface-visibility: hidden;\n\n        &::before {\n            content: '';\n            display: block;\n            height: 100%;\n            width: 100%;\n            position: absolute;\n            top: 0;\n            left: 0;\n            background-image: linear-gradient(\n                to right bottom,\n                $color-grad-1,\n                $color-grad-2\n            );\n            opacity: 0.4;\n        }\n\n        img {\n            display: block;\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n            transition: all 0.3s;\n        }\n    }\n\n    &__data {\n        display: grid;\n        width: 100%;\n        grid-template-columns: 1fr 2rem;\n        row-gap: 0.1rem;\n        align-items: center;\n    }\n\n    &__title {\n        grid-column: 1/-1;\n        font-size: 1.45rem;\n        color: $color-primary;\n        text-transform: uppercase;\n        font-weight: 600;\n\n        // This is how text is truncated!\n        text-overflow: ellipsis;\n        max-width: 25rem;\n        white-space: nowrap;\n        overflow: hidden;\n    }\n\n    &__publisher {\n        font-size: 1.15rem;\n        color: $color-grey-dark-2;\n        text-transform: uppercase;\n        font-weight: 600;\n    }\n\n    &__user-generated {\n        background-color: darken($color-grey-light-2, 2%);\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 2rem;\n        width: 2rem;\n        border-radius: 10rem;\n\n        margin-left: auto;\n        margin-right: 1.75rem;\n\n        svg {\n            height: 1.2rem;\n            width: 1.2rem;\n            fill: $color-primary;\n        }\n    }\n}\n",".search-results {\n    padding: 3rem 0;\n    display: flex;\n    flex-direction: column;\n}\n\n.results {\n    list-style: none;\n    margin-bottom: 2rem;\n}\n\n.pagination {\n    margin-top: auto;\n    padding: 0 3.5rem;\n\n    &::after {\n        content: '';\n        display: table;\n        clear: both;\n    }\n\n    &__btn {\n        &--prev {\n            float: left;\n        }\n        &--next {\n            float: right;\n        }\n    }\n}\n\n.copyright {\n    color: $color-grey-dark-2;\n    font-size: 1.2rem;\n    padding: 0 3.5rem;\n    margin-top: 4rem;\n\n    .twitter-link:link,\n    .twitter-link:visited {\n        color: $color-grey-dark-2;\n    }\n}\n",".recipe {\n    background-color: $color-grey-light-1;\n\n    ///////////\n    // FIGURE\n    &__fig {\n        height: 32rem;\n        position: relative;\n        // transform: scale(1.04) translateY(-1px);\n        transform-origin: top;\n\n        &::before {\n            content: '';\n            display: block;\n            height: 100%;\n            width: 100%;\n            position: absolute;\n            top: 0;\n            left: 0;\n            background-image: linear-gradient(\n                to right bottom,\n                $color-grad-1,\n                $color-grad-2\n            );\n            opacity: 0.6;\n        }\n    }\n\n    &__img {\n        width: 100%;\n        display: block;\n        height: 100%;\n        object-fit: cover;\n    }\n\n    &__title {\n        position: absolute;\n        bottom: 0;\n        left: 50%;\n        transform: translate(-50%, 20%) skewY(-6deg);\n        color: #fff;\n        font-weight: 700;\n        font-size: 3.25rem;\n        text-transform: uppercase;\n        width: 50%;\n        line-height: 1.95;\n        text-align: center;\n\n        span {\n            -webkit-box-decoration-break: clone;\n            box-decoration-break: clone;\n            padding: 1.3rem 2rem;\n            background-image: linear-gradient(\n                to right bottom,\n                $color-grad-1,\n                $color-grad-2\n            );\n        }\n\n        @media only screen and (max-width: $bp-medium) {\n            width: 70%;\n        }\n    }\n\n    ///////////\n    // DETAILS\n    &__details {\n        display: flex;\n        align-items: center;\n        padding: 7.5rem 8rem 3.5rem 8rem;\n    }\n\n    &__info {\n        font-size: 1.65rem;\n        text-transform: uppercase;\n        display: flex;\n        align-items: center;\n\n        &:not(:last-child) {\n            margin-right: 4.5rem;\n        }\n    }\n\n    &__info-icon {\n        height: 2.35rem;\n        width: 2.35rem;\n        fill: $color-primary;\n        margin-right: 1.15rem;\n    }\n\n    &__info-data {\n        margin-right: 0.5rem;\n        font-weight: 700;\n    }\n\n    &__info-buttons {\n        display: flex;\n        margin-left: 1.6rem;\n        transform: translateY(-1px);\n    }\n\n    &__user-generated {\n        background-color: darken($color-grey-light-2, 2%);\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: 4rem;\n        width: 4rem;\n        border-radius: 10rem;\n\n        margin-left: auto;\n        margin-right: 1.75rem;\n\n        svg {\n            height: 2.25rem;\n            width: 2.25rem;\n            fill: $color-primary;\n        }\n    }\n\n    ///////////\n    // INGREDIENTS\n    &__ingredients {\n        padding: 5rem 8rem;\n        font-size: 1.6rem;\n        line-height: 1.4;\n        background-color: $color-grey-light-2;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    &__ingredient-list {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 2.5rem 3rem;\n        list-style: none;\n    }\n\n    &__ingredient {\n        display: flex;\n    }\n\n    &__icon {\n        height: 2rem;\n        width: 2rem;\n        fill: $color-primary;\n        margin-right: 1.1rem;\n        flex: 0 0 auto;\n        margin-top: 0.1rem;\n    }\n\n    &__quantity {\n        margin-right: 0.5rem;\n        flex: 0 0 auto;\n    }\n\n    ///////////\n    // DIRECTIONS\n    &__directions {\n        padding: 5rem 10rem;\n        padding-bottom: 5rem;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    &__directions-text {\n        font-size: 1.7rem;\n        text-align: center;\n        margin-bottom: 3.5rem;\n        color: $color-grey-dark-2;\n    }\n\n    &__publisher {\n        font-weight: 700;\n    }\n}\n",".add-recipe-window {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 100rem;\n    background-color: white;\n    border-radius: 9px;\n\n    padding: 5rem 6rem;\n    box-shadow: 0 4rem 6rem rgba(0, 0, 0, 0.25);\n    z-index: 1000;\n    transition: all 0.5s;\n\n    .btn--close-modal {\n        font-family: inherit;\n        color: inherit;\n        position: absolute;\n        top: 0.5rem;\n        right: 1.6rem;\n        font-size: 3.5rem;\n        cursor: pointer;\n        border: none;\n        background: none;\n    }\n}\n\n.overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.4);\n    backdrop-filter: blur(4px);\n    z-index: 100;\n    transition: all 0.5s;\n}\n\n.hidden {\n    visibility: hidden;\n    opacity: 0;\n}\n\n.upload {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 4rem 6rem;\n\n    &__column {\n        display: grid;\n        grid-template-columns: 1fr 2.8fr;\n        align-items: center;\n        gap: 1.5rem;\n\n        & label {\n            font-size: 1.5rem;\n            font-weight: 600;\n            color: inherit;\n        }\n\n        & input,\n        textarea {\n            font-size: 1.5rem;\n            padding: 0.8rem 1rem;\n            border: 1px solid #ddd;\n            border-radius: 0.5rem;\n            transition: all 0.2s;\n\n            &::placeholder {\n                color: $color-grey-light-3;\n            }\n\n            &:focus {\n                outline: none;\n                border: 1px solid $color-primary;\n                background-color: $color-grey-light-1;\n            }\n        }\n\n        & button {\n            grid-column: 1 / span 2;\n            justify-self: center;\n            margin-top: 1rem;\n        }\n    }\n\n    &__heading {\n        font-size: 2.25rem;\n        font-weight: 700;\n        text-transform: uppercase;\n        margin-bottom: 1rem;\n        grid-column: 1/-1;\n    }\n\n    &__btn {\n        grid-column: 1 / -1;\n        justify-self: center;\n    }\n}\n"],sourceRoot:""}]);const s=a},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);r&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},7537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},4686:t=>{var e,n;Fraction=function(t,e){if(void 0!==t&&e)"number"==typeof t&&"number"==typeof e?(this.numerator=t,this.denominator=e):"string"==typeof t&&"string"==typeof e&&(this.numerator=parseInt(t),this.denominator=parseInt(e));else if(void 0===e)if(num=t,"number"==typeof num)this.numerator=num,this.denominator=1;else if("string"==typeof num){var n,r,i=num.split(" ");if(i[0]&&(n=i[0]),i[1]&&(r=i[1]),n%1==0&&r&&r.match("/"))return new Fraction(n).add(new Fraction(r));if(!n||r)return;if("string"==typeof n&&n.match("/")){var o=n.split("/");this.numerator=o[0],this.denominator=o[1]}else{if("string"==typeof n&&n.match("."))return new Fraction(parseFloat(n));this.numerator=parseInt(n),this.denominator=1}}this.normalize()},Fraction.prototype.clone=function(){return new Fraction(this.numerator,this.denominator)},Fraction.prototype.toString=function(){if("NaN"===this.denominator)return"NaN";var t=this.numerator/this.denominator>0?Math.floor(this.numerator/this.denominator):Math.ceil(this.numerator/this.denominator),e=this.numerator%this.denominator,n=this.denominator,r=[];return 0!=t&&r.push(t),0!=e&&r.push((0===t?e:Math.abs(e))+"/"+n),r.length>0?r.join(" "):0},Fraction.prototype.rescale=function(t){return this.numerator*=t,this.denominator*=t,this},Fraction.prototype.add=function(t){var e=this.clone();return t=t instanceof Fraction?t.clone():new Fraction(t),td=e.denominator,e.rescale(t.denominator),t.rescale(td),e.numerator+=t.numerator,e.normalize()},Fraction.prototype.subtract=function(t){var e=this.clone();return t=t instanceof Fraction?t.clone():new Fraction(t),td=e.denominator,e.rescale(t.denominator),t.rescale(td),e.numerator-=t.numerator,e.normalize()},Fraction.prototype.multiply=function(t){var e=this.clone();if(t instanceof Fraction)e.numerator*=t.numerator,e.denominator*=t.denominator;else{if("number"!=typeof t)return e.multiply(new Fraction(t));e.numerator*=t}return e.normalize()},Fraction.prototype.divide=function(t){var e=this.clone();if(t instanceof Fraction)e.numerator*=t.denominator,e.denominator*=t.numerator;else{if("number"!=typeof t)return e.divide(new Fraction(t));e.denominator*=t}return e.normalize()},Fraction.prototype.equals=function(t){t instanceof Fraction||(t=new Fraction(t));var e=this.clone().normalize();return t=t.clone().normalize(),e.numerator===t.numerator&&e.denominator===t.denominator},Fraction.prototype.normalize=(e=function(t){return"number"==typeof t&&(t>0&&t%1>0&&t%1<1||t<0&&t%-1<0&&t%-1>-1)},n=function(t,e){if(e){var n=Math.pow(10,e);return Math.round(t*n)/n}return Math.round(t)},function(){if(e(this.denominator)){var t=n(this.denominator,9),r=Math.pow(10,t.toString().split(".")[1].length);this.denominator=Math.round(this.denominator*r),this.numerator*=r}e(this.numerator)&&(t=n(this.numerator,9),r=Math.pow(10,t.toString().split(".")[1].length),this.numerator=Math.round(this.numerator*r),this.denominator*=r);var i=Fraction.gcf(this.numerator,this.denominator);return this.numerator/=i,this.denominator/=i,(this.numerator<0&&this.denominator<0||this.numerator>0&&this.denominator<0)&&(this.numerator*=-1,this.denominator*=-1),this}),Fraction.gcf=function(t,e){var n=[],r=Fraction.primeFactors(t),i=Fraction.primeFactors(e);return r.forEach((function(t){var e=i.indexOf(t);e>=0&&(n.push(t),i.splice(e,1))})),0===n.length?1:function(){var t,e=n[0];for(t=1;t<n.length;t++)e*=n[t];return e}()},Fraction.primeFactors=function(t){for(var e=Math.abs(t),n=[],r=2;r*r<=e;)e%r==0?(n.push(r),e/=r):r++;return 1!=e&&n.push(e),n},t.exports.i=Fraction},5666:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function c(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,n){return t[e]=n}}function u(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,o=Object.create(i.prototype),a=new E(r||[]);return o._invoke=function(t,e,n){var r=f;return function(i,o){if(r===h)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return T()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=_(a,n);if(s){if(s===A)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var c=l(t,e,n);if("normal"===c.type){if(r=n.done?p:d,c.arg===A)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=p,n.method="throw",n.arg=c.arg)}}}(t,n,a),o}function l(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f="suspendedStart",d="suspendedYield",h="executing",p="completed",A={};function g(){}function m(){}function v(){}var y={};y[o]=function(){return this};var b=Object.getPrototypeOf,C=b&&b(b(O([])));C&&C!==n&&r.call(C,o)&&(y=C);var w=v.prototype=g.prototype=Object.create(y);function x(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function k(t,e){function n(i,o,a,s){var c=l(t[i],t,o);if("throw"!==c.type){var u=c.arg,f=u.value;return f&&"object"==typeof f&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){n("next",t,a,s)}),(function(t){n("throw",t,a,s)})):e.resolve(f).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,s)}))}s(c.arg)}var i;this._invoke=function(t,r){function o(){return new e((function(e,i){n(t,r,e,i)}))}return i=i?i.then(o,o):o()}}function _(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,_(t,n),"throw"===n.method))return A;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return A}var i=l(r,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,A;var o=i.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,A):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,A)}function I(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(I,this),this.reset(!0)}function O(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,a=function n(){for(;++i<t.length;)if(r.call(t,i))return n.value=t[i],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:T}}function T(){return{value:e,done:!0}}return m.prototype=w.constructor=v,v.constructor=m,m.displayName=c(v,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,c(t,s,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},x(k.prototype),k.prototype[a]=function(){return this},t.AsyncIterator=k,t.async=function(e,n,r,i,o){void 0===o&&(o=Promise);var a=new k(u(e,n,r,i),o);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},x(w),c(w,s,"Generator"),w[o]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=O,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(S),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function i(r,i){return s.type="throw",s.arg=t,n.next=r,i&&(n.method="next",n.arg=e),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,A):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),A},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),S(n),A}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;S(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:O(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),A}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}},3379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},a=[],s=0;s<t.length;s++){var c=t[s],u=r.base?c[0]+r.base:c[0],l=o[u]||0,f="".concat(u," ").concat(l);o[u]=l+1;var d=n(f),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(h);else{var p=i(h,r);r.byIndex=s,e.splice(s,0,{identifier:f,updater:p,references:1})}a.push(f)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var c=r(t,i),u=0;u<o.length;u++){var l=n(o[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{"use strict";function t(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{};function r(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function i(t,e){return t(e={exports:{}},e.exports),e.exports}var o=i((function(t,e){Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){var t=this;this.locked=new Map,this.addToLocked=function(e,n){var r=t.locked.get(e);void 0===r?void 0===n?t.locked.set(e,[]):t.locked.set(e,[n]):void 0!==n&&(r.unshift(n),t.locked.set(e,r))},this.isLocked=function(e){return t.locked.has(e)},this.lock=function(e){return new Promise((function(n,r){t.isLocked(e)?t.addToLocked(e,n):(t.addToLocked(e),n())}))},this.unlock=function(e){var n=t.locked.get(e);if(void 0!==n&&0!==n.length){var r=n.pop();t.locked.set(e,n),void 0!==r&&setTimeout(r,0)}else t.locked.delete(e)}}return t.getInstance=function(){return void 0===t.instance&&(t.instance=new t),t.instance},t}();e.default=function(){return n.getInstance()}}));r(o);var a=r(i((function(t,n){var r=e&&e.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{c(r.next(t))}catch(t){o(t)}}function s(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(a,s)}c((r=r.apply(t,e||[])).next())}))},i=e&&e.__generator||function(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(n,"__esModule",{value:!0});var a="browser-tabs-lock-key";function s(t){return new Promise((function(e){return setTimeout(e,t)}))}function c(t){for(var e="",n=0;n<t;n++)e+="0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz"[Math.floor(61*Math.random())];return e}var u=function(){function t(){this.acquiredIatSet=new Set,this.id=Date.now().toString()+c(15),this.acquireLock=this.acquireLock.bind(this),this.releaseLock=this.releaseLock.bind(this),this.releaseLock__private__=this.releaseLock__private__.bind(this),this.waitForSomethingToChange=this.waitForSomethingToChange.bind(this),this.refreshLockWhileAcquired=this.refreshLockWhileAcquired.bind(this),void 0===t.waiters&&(t.waiters=[])}return t.prototype.acquireLock=function(e,n){return void 0===n&&(n=5e3),r(this,void 0,void 0,(function(){var r,o,u,l,f,d;return i(this,(function(i){switch(i.label){case 0:r=Date.now()+c(4),o=Date.now()+n,u=a+"-"+e,l=window.localStorage,i.label=1;case 1:return Date.now()<o?[4,s(30)]:[3,8];case 2:return i.sent(),null!==l.getItem(u)?[3,5]:(f=this.id+"-"+e+"-"+r,[4,s(Math.floor(25*Math.random()))]);case 3:return i.sent(),l.setItem(u,JSON.stringify({id:this.id,iat:r,timeoutKey:f,timeAcquired:Date.now(),timeRefreshed:Date.now()})),[4,s(30)];case 4:return i.sent(),null!==(d=l.getItem(u))&&(d=JSON.parse(d)).id===this.id&&d.iat===r?(this.acquiredIatSet.add(r),this.refreshLockWhileAcquired(u,r),[2,!0]):[3,7];case 5:return t.lockCorrector(),[4,this.waitForSomethingToChange(o)];case 6:i.sent(),i.label=7;case 7:return r=Date.now()+c(4),[3,1];case 8:return[2,!1]}}))}))},t.prototype.refreshLockWhileAcquired=function(t,e){return r(this,void 0,void 0,(function(){var n=this;return i(this,(function(a){return setTimeout((function(){return r(n,void 0,void 0,(function(){var n,r;return i(this,(function(i){switch(i.label){case 0:return[4,o.default().lock(e)];case 1:return i.sent(),this.acquiredIatSet.has(e)?(n=window.localStorage,null===(r=n.getItem(t))?(o.default().unlock(e),[2]):((r=JSON.parse(r)).timeRefreshed=Date.now(),n.setItem(t,JSON.stringify(r)),o.default().unlock(e),this.refreshLockWhileAcquired(t,e),[2])):(o.default().unlock(e),[2])}}))}))}),1e3),[2]}))}))},t.prototype.waitForSomethingToChange=function(e){return r(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return[4,new Promise((function(n){var r=!1,i=Date.now(),o=!1;function a(){if(o||(window.removeEventListener("storage",a),t.removeFromWaiting(a),clearTimeout(s),o=!0),!r){r=!0;var e=50-(Date.now()-i);e>0?setTimeout(n,e):n()}}window.addEventListener("storage",a),t.addToWaiting(a);var s=setTimeout(a,Math.max(0,e-Date.now()))}))];case 1:return n.sent(),[2]}}))}))},t.addToWaiting=function(e){this.removeFromWaiting(e),void 0!==t.waiters&&t.waiters.push(e)},t.removeFromWaiting=function(e){void 0!==t.waiters&&(t.waiters=t.waiters.filter((function(t){return t!==e})))},t.notifyWaiters=function(){void 0!==t.waiters&&t.waiters.slice().forEach((function(t){return t()}))},t.prototype.releaseLock=function(t){return r(this,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,this.releaseLock__private__(t)];case 1:return[2,e.sent()]}}))}))},t.prototype.releaseLock__private__=function(e){return r(this,void 0,void 0,(function(){var n,r,s;return i(this,(function(i){switch(i.label){case 0:return n=window.localStorage,r=a+"-"+e,null===(s=n.getItem(r))?[2]:(s=JSON.parse(s)).id!==this.id?[3,2]:[4,o.default().lock(s.iat)];case 1:i.sent(),this.acquiredIatSet.delete(s.iat),n.removeItem(r),o.default().unlock(s.iat),t.notifyWaiters(),i.label=2;case 2:return[2]}}))}))},t.lockCorrector=function(){for(var e=Date.now()-5e3,n=window.localStorage,r=Object.keys(n),i=!1,o=0;o<r.length;o++){var s=r[o];if(s.includes(a)){var c=n.getItem(s);null!==c&&(void 0===(c=JSON.parse(c)).timeRefreshed&&c.timeAcquired<e||void 0!==c.timeRefreshed&&c.timeRefreshed<e)&&(n.removeItem(s),i=!0)}}i&&t.notifyWaiters()},t.waiters=void 0,t}();n.default=u})));const s={timeoutInSeconds:60},c={name:"auth0-spa-js",version:"2.0.8"},u=()=>Date.now();class l extends Error{constructor(t,e){super(e),this.error=t,this.error_description=e,Object.setPrototypeOf(this,l.prototype)}static fromPayload({error:t,error_description:e}){return new l(t,e)}}class f extends l{constructor(t,e,n,r=null){super(t,e),this.state=n,this.appState=r,Object.setPrototypeOf(this,f.prototype)}}class d extends l{constructor(){super("timeout","Timeout"),Object.setPrototypeOf(this,d.prototype)}}class h extends d{constructor(t){super(),this.popup=t,Object.setPrototypeOf(this,h.prototype)}}class p extends l{constructor(t){super("cancelled","Popup closed"),this.popup=t,Object.setPrototypeOf(this,p.prototype)}}class A extends l{constructor(t,e,n){super(t,e),this.mfa_token=n,Object.setPrototypeOf(this,A.prototype)}}class g extends l{constructor(t,e){super("missing_refresh_token",`Missing Refresh Token (audience: '${m(t,["default"])}', scope: '${m(e)}')`),this.audience=t,this.scope=e,Object.setPrototypeOf(this,g.prototype)}}function m(t,e=[]){return t&&!e.includes(t)?t:""}const v=()=>window.crypto,y=()=>{let t="";return Array.from(v().getRandomValues(new Uint8Array(43))).forEach((e=>t+="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_~."[e%66])),t},b=t=>btoa(t),C=e=>{var{clientId:n}=e,r=t(e,["clientId"]);return new URLSearchParams((t=>Object.keys(t).filter((e=>void 0!==t[e])).reduce(((e,n)=>Object.assign(Object.assign({},e),{[n]:t[n]})),{}))(Object.assign({client_id:n},r))).toString()},w=t=>(t=>decodeURIComponent(atob(t).split("").map((t=>"%"+("00"+t.charCodeAt(0).toString(16)).slice(-2))).join("")))(t.replace(/_/g,"/").replace(/-/g,"+")),x=async(t,e)=>{const n=await fetch(t,e);return{ok:n.ok,json:await n.json()}},k=async(t,e,n,r,i,o,a=1e4)=>i?(async(t,e,n,r,i,o,a)=>{return s={auth:{audience:e,scope:n},timeout:i,fetchUrl:t,fetchOptions:r,useFormData:a},c=o,new Promise((function(t,e){const n=new MessageChannel;n.port1.onmessage=function(r){r.data.error?e(new Error(r.data.error)):t(r.data),n.port1.close()},c.postMessage(s,[n.port2])}));var s,c})(t,e,n,r,a,i,o):(async(t,e,n)=>{const r=new AbortController;let i;return e.signal=r.signal,Promise.race([x(t,e),new Promise(((t,e)=>{i=setTimeout((()=>{r.abort(),e(new Error("Timeout when executing 'fetch'"))}),n)}))]).finally((()=>{clearTimeout(i)}))})(t,r,a);async function _(e,n){var{baseUrl:r,timeout:i,audience:o,scope:a,auth0Client:s,useFormData:u}=e,f=t(e,["baseUrl","timeout","audience","scope","auth0Client","useFormData"]);const d=u?C(f):JSON.stringify(f);return await async function(e,n,r,i,o,a,s){let c,u=null;for(let t=0;t<3;t++)try{c=await k(e,r,i,o,a,s,n),u=null;break}catch(t){u=t}if(u)throw u;const f=c.json,{error:d,error_description:h}=f,p=t(f,["error","error_description"]),{ok:m}=c;if(!m){const t=h||`HTTP error. Unable to fetch ${e}`;if("mfa_required"===d)throw new A(d,t,p.mfa_token);if("missing_refresh_token"===d)throw new g(r,i);throw new l(d||"request_error",t)}return p}(`${r}/oauth/token`,i,o||"default",a,{method:"POST",body:d,headers:{"Content-Type":u?"application/x-www-form-urlencoded":"application/json","Auth0-Client":btoa(JSON.stringify(s||c))}},n,u)}const I=(...t)=>{return(e=t.filter(Boolean).join(" ").trim().split(/\s+/),Array.from(new Set(e))).join(" ");var e};class S{constructor(t,e="@@auth0spajs@@",n){this.prefix=e,this.suffix=n,this.clientId=t.clientId,this.scope=t.scope,this.audience=t.audience}toKey(){return[this.prefix,this.clientId,this.audience,this.scope,this.suffix].filter(Boolean).join("::")}static fromKey(t){const[e,n,r,i]=t.split("::");return new S({clientId:n,scope:i,audience:r},e)}static fromCacheEntry(t){const{scope:e,audience:n,client_id:r}=t;return new S({scope:e,audience:n,clientId:r})}}class E{set(t,e){localStorage.setItem(t,JSON.stringify(e))}get(t){const e=window.localStorage.getItem(t);if(e)try{return JSON.parse(e)}catch(t){return}}remove(t){localStorage.removeItem(t)}allKeys(){return Object.keys(window.localStorage).filter((t=>t.startsWith("@@auth0spajs@@")))}}class O{constructor(){this.enclosedCache=function(){let t={};return{set(e,n){t[e]=n},get(e){const n=t[e];if(n)return n},remove(e){delete t[e]},allKeys:()=>Object.keys(t)}}()}}class T{constructor(t,e,n){this.cache=t,this.keyManifest=e,this.nowProvider=n||u}async setIdToken(t,e,n){var r;const i=this.getIdTokenCacheKey(t);await this.cache.set(i,{id_token:e,decodedToken:n}),await(null===(r=this.keyManifest)||void 0===r?void 0:r.add(i))}async getIdToken(t){const e=await this.cache.get(this.getIdTokenCacheKey(t.clientId));if(!e&&t.scope&&t.audience){const e=await this.get(t);if(!e)return;if(!e.id_token||!e.decodedToken)return;return{id_token:e.id_token,decodedToken:e.decodedToken}}if(e)return{id_token:e.id_token,decodedToken:e.decodedToken}}async get(t,e=0){var n;let r=await this.cache.get(t.toKey());if(!r){const e=await this.getCacheKeys();if(!e)return;const n=this.matchExistingCacheKey(t,e);n&&(r=await this.cache.get(n))}if(!r)return;const i=await this.nowProvider(),o=Math.floor(i/1e3);return r.expiresAt-e<o?r.body.refresh_token?(r.body={refresh_token:r.body.refresh_token},await this.cache.set(t.toKey(),r),r.body):(await this.cache.remove(t.toKey()),void await(null===(n=this.keyManifest)||void 0===n?void 0:n.remove(t.toKey()))):r.body}async set(t){var e;const n=new S({clientId:t.client_id,scope:t.scope,audience:t.audience}),r=await this.wrapCacheEntry(t);await this.cache.set(n.toKey(),r),await(null===(e=this.keyManifest)||void 0===e?void 0:e.add(n.toKey()))}async clear(t){var e;const n=await this.getCacheKeys();n&&(await n.filter((e=>!t||e.includes(t))).reduce((async(t,e)=>{await t,await this.cache.remove(e)}),Promise.resolve()),await(null===(e=this.keyManifest)||void 0===e?void 0:e.clear()))}async wrapCacheEntry(t){const e=await this.nowProvider();return{body:t,expiresAt:Math.floor(e/1e3)+t.expires_in}}async getCacheKeys(){var t;return this.keyManifest?null===(t=await this.keyManifest.get())||void 0===t?void 0:t.keys:this.cache.allKeys?this.cache.allKeys():void 0}getIdTokenCacheKey(t){return new S({clientId:t},"@@auth0spajs@@","@@user@@").toKey()}matchExistingCacheKey(t,e){return e.filter((e=>{var n;const r=S.fromKey(e),i=new Set(r.scope&&r.scope.split(" ")),o=(null===(n=t.scope)||void 0===n?void 0:n.split(" "))||[],a=r.scope&&o.reduce(((t,e)=>t&&i.has(e)),!0);return"@@auth0spajs@@"===r.prefix&&r.clientId===t.clientId&&r.audience===t.audience&&a}))[0]}}class B{constructor(t,e,n){this.storage=t,this.clientId=e,this.cookieDomain=n,this.storageKey=`a0.spajs.txs.${this.clientId}`}create(t){this.storage.save(this.storageKey,t,{daysUntilExpire:1,cookieDomain:this.cookieDomain})}get(){return this.storage.get(this.storageKey)}remove(){this.storage.remove(this.storageKey,{cookieDomain:this.cookieDomain})}}const j=t=>"number"==typeof t,R=["iss","aud","exp","nbf","iat","jti","azp","nonce","auth_time","at_hash","c_hash","acr","amr","sub_jwk","cnf","sip_from_tag","sip_date","sip_callid","sip_cseq_num","sip_via_branch","orig","dest","mky","events","toe","txn","rph","sid","vot","vtm"];var L=i((function(t,n){var r=e&&e.__assign||function(){return r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},r.apply(this,arguments)};function i(t,e){if(!e)return"";var n="; "+t;return!0===e?n:n+"="+e}function o(t,e,n){return encodeURIComponent(t).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/\(/g,"%28").replace(/\)/g,"%29")+"="+encodeURIComponent(e).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent)+function(t){if("number"==typeof t.expires){var e=new Date;e.setMilliseconds(e.getMilliseconds()+864e5*t.expires),t.expires=e}return i("Expires",t.expires?t.expires.toUTCString():"")+i("Domain",t.domain)+i("Path",t.path)+i("Secure",t.secure)+i("SameSite",t.sameSite)}(n)}function a(t){for(var e={},n=t?t.split("; "):[],r=/(%[\dA-F]{2})+/gi,i=0;i<n.length;i++){var o=n[i].split("="),a=o.slice(1).join("=");'"'===a.charAt(0)&&(a=a.slice(1,-1));try{e[o[0].replace(r,decodeURIComponent)]=a.replace(r,decodeURIComponent)}catch(t){}}return e}function s(){return a(document.cookie)}function c(t,e,n){document.cookie=o(t,e,r({path:"/"},n))}n.__esModule=!0,n.encode=o,n.parse=a,n.getAll=s,n.get=function(t){return s()[t]},n.set=c,n.remove=function(t,e){c(t,"",r(r({},e),{expires:-1}))}}));r(L),L.encode,L.parse,L.getAll;var M=L.get,P=L.set,z=L.remove;const F={get(t){const e=M(t);if(void 0!==e)return JSON.parse(e)},save(t,e,n){let r={};"https:"===window.location.protocol&&(r={secure:!0,sameSite:"none"}),(null==n?void 0:n.daysUntilExpire)&&(r.expires=n.daysUntilExpire),(null==n?void 0:n.cookieDomain)&&(r.domain=n.cookieDomain),P(t,JSON.stringify(e),r)},remove(t,e){let n={};(null==e?void 0:e.cookieDomain)&&(n.domain=e.cookieDomain),z(t,n)}},U={get:t=>F.get(t)||F.get(`_legacy_${t}`),save(t,e,n){let r={};"https:"===window.location.protocol&&(r={secure:!0}),(null==n?void 0:n.daysUntilExpire)&&(r.expires=n.daysUntilExpire),(null==n?void 0:n.cookieDomain)&&(r.domain=n.cookieDomain),P(`_legacy_${t}`,JSON.stringify(e),r),F.save(t,e,n)},remove(t,e){let n={};(null==e?void 0:e.cookieDomain)&&(n.domain=e.cookieDomain),z(t,n),F.remove(t,e),F.remove(`_legacy_${t}`,e)}},N={get(t){if("undefined"==typeof sessionStorage)return;const e=sessionStorage.getItem(t);return null!=e?JSON.parse(e):void 0},save(t,e){sessionStorage.setItem(t,JSON.stringify(e))},remove(t){sessionStorage.removeItem(t)}};var D,$=function(t){return D=D||function(t,e,n){var r=function(t,e){var n=atob(t);return n}("Lyogcm9sbHVwLXBsdWdpbi13ZWItd29ya2VyLWxvYWRlciAqLwohZnVuY3Rpb24oKXsidXNlIHN0cmljdCI7Y2xhc3MgZSBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKHQscil7c3VwZXIociksdGhpcy5lcnJvcj10LHRoaXMuZXJyb3JfZGVzY3JpcHRpb249cixPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcyxlLnByb3RvdHlwZSl9c3RhdGljIGZyb21QYXlsb2FkKHtlcnJvcjp0LGVycm9yX2Rlc2NyaXB0aW9uOnJ9KXtyZXR1cm4gbmV3IGUodCxyKX19Y2xhc3MgdCBleHRlbmRzIGV7Y29uc3RydWN0b3IoZSxzKXtzdXBlcigibWlzc2luZ19yZWZyZXNoX3Rva2VuIixgTWlzc2luZyBSZWZyZXNoIFRva2VuIChhdWRpZW5jZTogJyR7cihlLFsiZGVmYXVsdCJdKX0nLCBzY29wZTogJyR7cihzKX0nKWApLHRoaXMuYXVkaWVuY2U9ZSx0aGlzLnNjb3BlPXMsT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsdC5wcm90b3R5cGUpfX1mdW5jdGlvbiByKGUsdD1bXSl7cmV0dXJuIGUmJiF0LmluY2x1ZGVzKGUpP2U6IiJ9Y29uc3Qgcz1lPT57dmFye2NsaWVudElkOnR9PWUscj1mdW5jdGlvbihlLHQpe3ZhciByPXt9O2Zvcih2YXIgcyBpbiBlKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHMpJiZ0LmluZGV4T2Yocyk8MCYmKHJbc109ZVtzXSk7aWYobnVsbCE9ZSYmImZ1bmN0aW9uIj09dHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBvPTA7Zm9yKHM9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTtvPHMubGVuZ3RoO28rKyl0LmluZGV4T2Yoc1tvXSk8MCYmT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGUsc1tvXSkmJihyW3Nbb11dPWVbc1tvXV0pfXJldHVybiByfShlLFsiY2xpZW50SWQiXSk7cmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoKGU9Pk9iamVjdC5rZXlzKGUpLmZpbHRlcigodD0+dm9pZCAwIT09ZVt0XSkpLnJlZHVjZSgoKHQscik9Pk9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSx0KSx7W3JdOmVbcl19KSkse30pKShPYmplY3QuYXNzaWduKHtjbGllbnRfaWQ6dH0scikpKS50b1N0cmluZygpfTtsZXQgbz17fTtjb25zdCBuPShlLHQpPT5gJHtlfXwke3R9YDthZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwoYXN5bmMoe2RhdGE6e3RpbWVvdXQ6ZSxhdXRoOnIsZmV0Y2hVcmw6aSxmZXRjaE9wdGlvbnM6Yyx1c2VGb3JtRGF0YTphfSxwb3J0czpbZl19KT0+e2xldCBwO2NvbnN0e2F1ZGllbmNlOmwsc2NvcGU6dX09cnx8e307dHJ5e2NvbnN0IHI9YT8oZT0+e2NvbnN0IHQ9bmV3IFVSTFNlYXJjaFBhcmFtcyhlKSxyPXt9O3JldHVybiB0LmZvckVhY2goKChlLHQpPT57clt0XT1lfSkpLHJ9KShjLmJvZHkpOkpTT04ucGFyc2UoYy5ib2R5KTtpZighci5yZWZyZXNoX3Rva2VuJiYicmVmcmVzaF90b2tlbiI9PT1yLmdyYW50X3R5cGUpe2NvbnN0IGU9KChlLHQpPT5vW24oZSx0KV0pKGwsdSk7aWYoIWUpdGhyb3cgbmV3IHQobCx1KTtjLmJvZHk9YT9zKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxyKSx7cmVmcmVzaF90b2tlbjplfSkpOkpTT04uc3RyaW5naWZ5KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxyKSx7cmVmcmVzaF90b2tlbjplfSkpfWxldCBkLGc7ImZ1bmN0aW9uIj09dHlwZW9mIEFib3J0Q29udHJvbGxlciYmKGQ9bmV3IEFib3J0Q29udHJvbGxlcixjLnNpZ25hbD1kLnNpZ25hbCk7dHJ5e2c9YXdhaXQgUHJvbWlzZS5yYWNlKFsoaD1lLG5ldyBQcm9taXNlKChlPT5zZXRUaW1lb3V0KGUsaCkpKSksZmV0Y2goaSxPYmplY3QuYXNzaWduKHt9LGMpKV0pfWNhdGNoKGUpe3JldHVybiB2b2lkIGYucG9zdE1lc3NhZ2Uoe2Vycm9yOmUubWVzc2FnZX0pfWlmKCFnKXJldHVybiBkJiZkLmFib3J0KCksdm9pZCBmLnBvc3RNZXNzYWdlKHtlcnJvcjoiVGltZW91dCB3aGVuIGV4ZWN1dGluZyAnZmV0Y2gnIn0pO3A9YXdhaXQgZy5qc29uKCkscC5yZWZyZXNoX3Rva2VuPygoKGUsdCxyKT0+e29bbih0LHIpXT1lfSkocC5yZWZyZXNoX3Rva2VuLGwsdSksZGVsZXRlIHAucmVmcmVzaF90b2tlbik6KChlLHQpPT57ZGVsZXRlIG9bbihlLHQpXX0pKGwsdSksZi5wb3N0TWVzc2FnZSh7b2s6Zy5vayxqc29uOnB9KX1jYXRjaChlKXtmLnBvc3RNZXNzYWdlKHtvazohMSxqc29uOntlcnJvcjplLmVycm9yLGVycm9yX2Rlc2NyaXB0aW9uOmUubWVzc2FnZX19KX12YXIgaH0pKX0oKTsKCg=="),i=r.indexOf("\n",10)+1,o=r.substring(i)+"",a=new Blob([o],{type:"application/javascript"});return URL.createObjectURL(a)}(),new Worker(D,t)};const W={};class Y{constructor(t,e){this.cache=t,this.clientId=e,this.manifestKey=this.createManifestKeyFrom(this.clientId)}async add(t){var e;const n=new Set((null===(e=await this.cache.get(this.manifestKey))||void 0===e?void 0:e.keys)||[]);n.add(t),await this.cache.set(this.manifestKey,{keys:[...n]})}async remove(t){const e=await this.cache.get(this.manifestKey);if(e){const n=new Set(e.keys);return n.delete(t),n.size>0?await this.cache.set(this.manifestKey,{keys:[...n]}):await this.cache.remove(this.manifestKey)}}get(){return this.cache.get(this.manifestKey)}clear(){return this.cache.remove(this.manifestKey)}createManifestKeyFrom(t){return`@@auth0spajs@@::${t}`}}const G={memory:()=>(new O).enclosedCache,localstorage:()=>new E},J=t=>G[t],K=e=>{const{openUrl:n,onRedirect:r}=e,i=t(e,["openUrl","onRedirect"]);return Object.assign(Object.assign({},i),{openUrl:!1===n||n?n:r})},q=new a;class Z{constructor(t){let e,n;if(this.userCache=(new O).enclosedCache,this.defaultOptions={authorizationParams:{scope:"openid profile email"},useRefreshTokensFallback:!1,useFormData:!0},this._releaseLockOnPageHide=async()=>{await q.releaseLock("auth0.lock.getTokenSilently"),window.removeEventListener("pagehide",this._releaseLockOnPageHide)},this.options=Object.assign(Object.assign(Object.assign({},this.defaultOptions),t),{authorizationParams:Object.assign(Object.assign({},this.defaultOptions.authorizationParams),t.authorizationParams)}),"undefined"!=typeof window&&(()=>{if(!v())throw new Error("For security reasons, `window.crypto` is required to run `auth0-spa-js`.");if(void 0===v().subtle)throw new Error("\n      auth0-spa-js must run on a secure origin. See https://github.com/auth0/auth0-spa-js/blob/master/FAQ.md#why-do-i-get-auth0-spa-js-must-run-on-a-secure-origin for more information.\n    ")})(),t.cache&&t.cacheLocation&&console.warn("Both `cache` and `cacheLocation` options have been specified in the Auth0Client configuration; ignoring `cacheLocation` and using `cache`."),t.cache)n=t.cache;else{if(e=t.cacheLocation||"memory",!J(e))throw new Error(`Invalid cache location "${e}"`);n=J(e)()}this.httpTimeoutMs=t.httpTimeoutInSeconds?1e3*t.httpTimeoutInSeconds:1e4,this.cookieStorage=!1===t.legacySameSiteCookie?F:U,this.orgHintCookieName=`auth0.${this.options.clientId}.organization_hint`,this.isAuthenticatedCookieName=(t=>`auth0.${this.options.clientId}.is.authenticated`)(),this.sessionCheckExpiryDays=t.sessionCheckExpiryDays||1;const r=t.useCookiesForTransactions?this.cookieStorage:N;var i;this.scope=I("openid",this.options.authorizationParams.scope,this.options.useRefreshTokens?"offline_access":""),this.transactionManager=new B(r,this.options.clientId,this.options.cookieDomain),this.nowProvider=this.options.nowProvider||u,this.cacheManager=new T(n,n.allKeys?void 0:new Y(n,this.options.clientId),this.nowProvider),this.domainUrl=(i=this.options.domain,/^https?:\/\//.test(i)?i:`https://${i}`),this.tokenIssuer=((t,e)=>t?t.startsWith("https://")?t:`https://${t}/`:`${e}/`)(this.options.issuer,this.domainUrl),"undefined"!=typeof window&&window.Worker&&this.options.useRefreshTokens&&"memory"===e&&(this.worker=new $)}_url(t){const e=encodeURIComponent(btoa(JSON.stringify(this.options.auth0Client||c)));return`${this.domainUrl}${t}&auth0Client=${e}`}_authorizeUrl(t){return this._url(`/authorize?${C(t)}`)}async _verifyIdToken(t,e,n){const r=await this.nowProvider();return(t=>{if(!t.id_token)throw new Error("ID token is required but missing");const e=(t=>{const e=t.split("."),[n,r,i]=e;if(3!==e.length||!n||!r||!i)throw new Error("ID token could not be decoded");const o=JSON.parse(w(r)),a={__raw:t},s={};return Object.keys(o).forEach((t=>{a[t]=o[t],R.includes(t)||(s[t]=o[t])})),{encoded:{header:n,payload:r,signature:i},header:JSON.parse(w(n)),claims:a,user:s}})(t.id_token);if(!e.claims.iss)throw new Error("Issuer (iss) claim must be a string present in the ID token");if(e.claims.iss!==t.iss)throw new Error(`Issuer (iss) claim mismatch in the ID token; expected "${t.iss}", found "${e.claims.iss}"`);if(!e.user.sub)throw new Error("Subject (sub) claim must be a string present in the ID token");if("RS256"!==e.header.alg)throw new Error(`Signature algorithm of "${e.header.alg}" is not supported. Expected the ID token to be signed with "RS256".`);if(!e.claims.aud||"string"!=typeof e.claims.aud&&!Array.isArray(e.claims.aud))throw new Error("Audience (aud) claim must be a string or array of strings present in the ID token");if(Array.isArray(e.claims.aud)){if(!e.claims.aud.includes(t.aud))throw new Error(`Audience (aud) claim mismatch in the ID token; expected "${t.aud}" but was not one of "${e.claims.aud.join(", ")}"`);if(e.claims.aud.length>1){if(!e.claims.azp)throw new Error("Authorized Party (azp) claim must be a string present in the ID token when Audience (aud) claim has multiple values");if(e.claims.azp!==t.aud)throw new Error(`Authorized Party (azp) claim mismatch in the ID token; expected "${t.aud}", found "${e.claims.azp}"`)}}else if(e.claims.aud!==t.aud)throw new Error(`Audience (aud) claim mismatch in the ID token; expected "${t.aud}" but found "${e.claims.aud}"`);if(t.nonce){if(!e.claims.nonce)throw new Error("Nonce (nonce) claim must be a string present in the ID token");if(e.claims.nonce!==t.nonce)throw new Error(`Nonce (nonce) claim mismatch in the ID token; expected "${t.nonce}", found "${e.claims.nonce}"`)}if(t.max_age&&!j(e.claims.auth_time))throw new Error("Authentication Time (auth_time) claim must be a number present in the ID token when Max Age (max_age) is specified");if(null==e.claims.exp||!j(e.claims.exp))throw new Error("Expiration Time (exp) claim must be a number present in the ID token");if(!j(e.claims.iat))throw new Error("Issued At (iat) claim must be a number present in the ID token");const n=t.leeway||60,r=new Date(t.now||Date.now()),i=new Date(0);if(i.setUTCSeconds(e.claims.exp+n),r>i)throw new Error(`Expiration Time (exp) claim error in the ID token; current time (${r}) is after expiration time (${i})`);if(null!=e.claims.nbf&&j(e.claims.nbf)){const t=new Date(0);if(t.setUTCSeconds(e.claims.nbf-n),r<t)throw new Error(`Not Before time (nbf) claim in the ID token indicates that this token can't be used just yet. Current time (${r}) is before ${t}`)}if(null!=e.claims.auth_time&&j(e.claims.auth_time)){const i=new Date(0);if(i.setUTCSeconds(parseInt(e.claims.auth_time)+t.max_age+n),r>i)throw new Error(`Authentication Time (auth_time) claim in the ID token indicates that too much time has passed since the last end-user authentication. Current time (${r}) is after last auth at ${i}`)}if(t.organizationId){if(!e.claims.org_id)throw new Error("Organization ID (org_id) claim must be a string present in the ID token");if(t.organizationId!==e.claims.org_id)throw new Error(`Organization ID (org_id) claim mismatch in the ID token; expected "${t.organizationId}", found "${e.claims.org_id}"`)}return e})({iss:this.tokenIssuer,aud:this.options.clientId,id_token:t,nonce:e,organizationId:n,leeway:this.options.leeway,max_age:(i=this.options.authorizationParams.max_age,"string"!=typeof i?i:parseInt(i,10)||void 0),now:r});var i}_processOrgIdHint(t){t?this.cookieStorage.save(this.orgHintCookieName,t,{daysUntilExpire:this.sessionCheckExpiryDays,cookieDomain:this.options.cookieDomain}):this.cookieStorage.remove(this.orgHintCookieName,{cookieDomain:this.options.cookieDomain})}async _prepareAuthorizeUrl(t,e,n){const r=b(y()),i=b(y()),o=y(),a=(t=>{const e=new Uint8Array(t);return(t=>{const e={"+":"-","/":"_","=":""};return t.replace(/[+/=]/g,(t=>e[t]))})(window.btoa(String.fromCharCode(...Array.from(e))))})(await(async t=>{const e=v().subtle.digest({name:"SHA-256"},(new TextEncoder).encode(t));return await e})(o)),s=((t,e,n,r,i,o,a,s)=>Object.assign(Object.assign(Object.assign({client_id:t.clientId},t.authorizationParams),n),{scope:I(e,n.scope),response_type:"code",response_mode:s||"query",state:r,nonce:i,redirect_uri:a||t.authorizationParams.redirect_uri,code_challenge:o,code_challenge_method:"S256"}))(this.options,this.scope,t,r,i,a,t.redirect_uri||this.options.authorizationParams.redirect_uri||n,null==e?void 0:e.response_mode),c=this._authorizeUrl(s);return{nonce:i,code_verifier:o,scope:s.scope,audience:s.audience||"default",redirect_uri:s.redirect_uri,state:r,url:c}}async loginWithPopup(t,e){var n;if(t=t||{},!(e=e||{}).popup&&(e.popup=(t=>{const e=window.screenX+(window.innerWidth-400)/2,n=window.screenY+(window.innerHeight-600)/2;return window.open("","auth0:authorize:popup",`left=${e},top=${n},width=400,height=600,resizable,scrollbars=yes,status=1`)})(),!e.popup))throw new Error("Unable to open a popup for loginWithPopup - window.open returned `null`");const r=await this._prepareAuthorizeUrl(t.authorizationParams||{},{response_mode:"web_message"},window.location.origin);e.popup.location.href=r.url;const i=await(t=>new Promise(((e,n)=>{let r;const i=setInterval((()=>{t.popup&&t.popup.closed&&(clearInterval(i),clearTimeout(o),window.removeEventListener("message",r,!1),n(new p(t.popup)))}),1e3),o=setTimeout((()=>{clearInterval(i),n(new h(t.popup)),window.removeEventListener("message",r,!1)}),1e3*(t.timeoutInSeconds||60));r=function(a){if(a.data&&"authorization_response"===a.data.type){if(clearTimeout(o),clearInterval(i),window.removeEventListener("message",r,!1),t.popup.close(),a.data.response.error)return n(l.fromPayload(a.data.response));e(a.data.response)}},window.addEventListener("message",r)})))(Object.assign(Object.assign({},e),{timeoutInSeconds:e.timeoutInSeconds||this.options.authorizeTimeoutInSeconds||60}));if(r.state!==i.state)throw new l("state_mismatch","Invalid state");const o=(null===(n=t.authorizationParams)||void 0===n?void 0:n.organization)||this.options.authorizationParams.organization;await this._requestToken({audience:r.audience,scope:r.scope,code_verifier:r.code_verifier,grant_type:"authorization_code",code:i.code,redirect_uri:r.redirect_uri},{nonceIn:r.nonce,organizationId:o})}async getUser(){var t;const e=await this._getIdTokenFromCache();return null===(t=null==e?void 0:e.decodedToken)||void 0===t?void 0:t.user}async getIdTokenClaims(){var t;const e=await this._getIdTokenFromCache();return null===(t=null==e?void 0:e.decodedToken)||void 0===t?void 0:t.claims}async loginWithRedirect(e={}){var n;const r=K(e),{openUrl:i,fragment:o,appState:a}=r,s=t(r,["openUrl","fragment","appState"]),c=(null===(n=s.authorizationParams)||void 0===n?void 0:n.organization)||this.options.authorizationParams.organization,u=await this._prepareAuthorizeUrl(s.authorizationParams||{}),{url:l}=u,f=t(u,["url"]);this.transactionManager.create(Object.assign(Object.assign(Object.assign({},f),{appState:a}),c&&{organizationId:c}));const d=o?`${l}#${o}`:l;i?await i(d):window.location.assign(d)}async handleRedirectCallback(t=window.location.href){const e=t.split("?").slice(1);if(0===e.length)throw new Error("There are no query params available for parsing.");const{state:n,code:r,error:i,error_description:o}=(t=>{t.indexOf("#")>-1&&(t=t.substring(0,t.indexOf("#")));const e=new URLSearchParams(t);return{state:e.get("state"),code:e.get("code")||void 0,error:e.get("error")||void 0,error_description:e.get("error_description")||void 0}})(e.join("")),a=this.transactionManager.get();if(!a)throw new l("missing_transaction","Invalid state");if(this.transactionManager.remove(),i)throw new f(i,o||i,n,a.appState);if(!a.code_verifier||a.state&&a.state!==n)throw new l("state_mismatch","Invalid state");const s=a.organizationId,c=a.nonce,u=a.redirect_uri;return await this._requestToken(Object.assign({audience:a.audience,scope:a.scope,code_verifier:a.code_verifier,grant_type:"authorization_code",code:r},u?{redirect_uri:u}:{}),{nonceIn:c,organizationId:s}),{appState:a.appState}}async checkSession(t){if(!this.cookieStorage.get(this.isAuthenticatedCookieName)){if(!this.cookieStorage.get("auth0.is.authenticated"))return;this.cookieStorage.save(this.isAuthenticatedCookieName,!0,{daysUntilExpire:this.sessionCheckExpiryDays,cookieDomain:this.options.cookieDomain}),this.cookieStorage.remove("auth0.is.authenticated")}try{await this.getTokenSilently(t)}catch(t){}}async getTokenSilently(t={}){var e;const n=Object.assign(Object.assign({cacheMode:"on"},t),{authorizationParams:Object.assign(Object.assign(Object.assign({},this.options.authorizationParams),t.authorizationParams),{scope:I(this.scope,null===(e=t.authorizationParams)||void 0===e?void 0:e.scope)})}),r=await((t,e)=>{let n=W[e];return n||(n=t().finally((()=>{delete W[e],n=null})),W[e]=n),n})((()=>this._getTokenSilently(n)),`${this.options.clientId}::${n.authorizationParams.audience}::${n.authorizationParams.scope}`);return t.detailedResponse?r:null==r?void 0:r.access_token}async _getTokenSilently(e){const{cacheMode:n}=e,r=t(e,["cacheMode"]);if("off"!==n){const t=await this._getEntryFromCache({scope:r.authorizationParams.scope,audience:r.authorizationParams.audience||"default",clientId:this.options.clientId});if(t)return t}if("cache-only"!==n){if(!await(async(t,e=3)=>{for(let n=0;n<e;n++)if(await t())return!0;return!1})((()=>q.acquireLock("auth0.lock.getTokenSilently",5e3)),10))throw new d;try{if(window.addEventListener("pagehide",this._releaseLockOnPageHide),"off"!==n){const t=await this._getEntryFromCache({scope:r.authorizationParams.scope,audience:r.authorizationParams.audience||"default",clientId:this.options.clientId});if(t)return t}const t=this.options.useRefreshTokens?await this._getTokenUsingRefreshToken(r):await this._getTokenFromIFrame(r),{id_token:e,access_token:i,oauthTokenScope:o,expires_in:a}=t;return Object.assign(Object.assign({id_token:e,access_token:i},o?{scope:o}:null),{expires_in:a})}finally{await q.releaseLock("auth0.lock.getTokenSilently"),window.removeEventListener("pagehide",this._releaseLockOnPageHide)}}}async getTokenWithPopup(t={},e={}){var n;const r=Object.assign(Object.assign({},t),{authorizationParams:Object.assign(Object.assign(Object.assign({},this.options.authorizationParams),t.authorizationParams),{scope:I(this.scope,null===(n=t.authorizationParams)||void 0===n?void 0:n.scope)})});return e=Object.assign(Object.assign({},s),e),await this.loginWithPopup(r,e),(await this.cacheManager.get(new S({scope:r.authorizationParams.scope,audience:r.authorizationParams.audience||"default",clientId:this.options.clientId}))).access_token}async isAuthenticated(){return!!await this.getUser()}_buildLogoutUrl(e){null!==e.clientId?e.clientId=e.clientId||this.options.clientId:delete e.clientId;const n=e.logoutParams||{},{federated:r}=n,i=t(n,["federated"]),o=r?"&federated":"";return this._url(`/v2/logout?${C(Object.assign({clientId:e.clientId},i))}`)+o}async logout(e={}){const n=K(e),{openUrl:r}=n,i=t(n,["openUrl"]);null===e.clientId?await this.cacheManager.clear():await this.cacheManager.clear(e.clientId||this.options.clientId),this.cookieStorage.remove(this.orgHintCookieName,{cookieDomain:this.options.cookieDomain}),this.cookieStorage.remove(this.isAuthenticatedCookieName,{cookieDomain:this.options.cookieDomain}),this.userCache.remove("@@user@@");const o=this._buildLogoutUrl(i);r?await r(o):!1!==r&&window.location.assign(o)}async _getTokenFromIFrame(t){const e=Object.assign(Object.assign({},t.authorizationParams),{prompt:"none"}),n=this.cookieStorage.get(this.orgHintCookieName);n&&!e.organization&&(e.organization=n);const{url:r,state:i,nonce:o,code_verifier:a,redirect_uri:s,scope:c,audience:u}=await this._prepareAuthorizeUrl(e,{response_mode:"web_message"},window.location.origin);try{if(window.crossOriginIsolated)throw new l("login_required","The application is running in a Cross-Origin Isolated context, silently retrieving a token without refresh token is not possible.");const e=t.timeoutInSeconds||this.options.authorizeTimeoutInSeconds,n=await((t,e,n=60)=>new Promise(((r,i)=>{const o=window.document.createElement("iframe");o.setAttribute("width","0"),o.setAttribute("height","0"),o.style.display="none";const a=()=>{window.document.body.contains(o)&&(window.document.body.removeChild(o),window.removeEventListener("message",s,!1))};let s;const c=setTimeout((()=>{i(new d),a()}),1e3*n);s=function(t){if(t.origin!=e)return;if(!t.data||"authorization_response"!==t.data.type)return;const n=t.source;n&&n.close(),t.data.response.error?i(l.fromPayload(t.data.response)):r(t.data.response),clearTimeout(c),window.removeEventListener("message",s,!1),setTimeout(a,2e3)},window.addEventListener("message",s,!1),window.document.body.appendChild(o),o.setAttribute("src",t)})))(r,this.domainUrl,e);if(i!==n.state)throw new l("state_mismatch","Invalid state");const f=await this._requestToken(Object.assign(Object.assign({},t.authorizationParams),{code_verifier:a,code:n.code,grant_type:"authorization_code",redirect_uri:s,timeout:t.authorizationParams.timeout||this.httpTimeoutMs}),{nonceIn:o});return Object.assign(Object.assign({},f),{scope:c,oauthTokenScope:f.scope,audience:u})}catch(t){throw"login_required"===t.error&&this.logout({openUrl:!1}),t}}async _getTokenUsingRefreshToken(t){const e=await this.cacheManager.get(new S({scope:t.authorizationParams.scope,audience:t.authorizationParams.audience||"default",clientId:this.options.clientId}));if(!(e&&e.refresh_token||this.worker)){if(this.options.useRefreshTokensFallback)return await this._getTokenFromIFrame(t);throw new g(t.authorizationParams.audience||"default",t.authorizationParams.scope)}const n=t.authorizationParams.redirect_uri||this.options.authorizationParams.redirect_uri||window.location.origin,r="number"==typeof t.timeoutInSeconds?1e3*t.timeoutInSeconds:null;try{const i=await this._requestToken(Object.assign(Object.assign(Object.assign({},t.authorizationParams),{grant_type:"refresh_token",refresh_token:e&&e.refresh_token,redirect_uri:n}),r&&{timeout:r}));return Object.assign(Object.assign({},i),{scope:t.authorizationParams.scope,oauthTokenScope:i.scope,audience:t.authorizationParams.audience||"default"})}catch(e){if((e.message.indexOf("Missing Refresh Token")>-1||e.message&&e.message.indexOf("invalid refresh token")>-1)&&this.options.useRefreshTokensFallback)return await this._getTokenFromIFrame(t);throw e}}async _saveEntryInCache(e){const{id_token:n,decodedToken:r}=e,i=t(e,["id_token","decodedToken"]);this.userCache.set("@@user@@",{id_token:n,decodedToken:r}),await this.cacheManager.setIdToken(this.options.clientId,e.id_token,e.decodedToken),await this.cacheManager.set(i)}async _getIdTokenFromCache(){const t=this.options.authorizationParams.audience||"default",e=await this.cacheManager.getIdToken(new S({clientId:this.options.clientId,audience:t,scope:this.scope})),n=this.userCache.get("@@user@@");return e&&e.id_token===(null==n?void 0:n.id_token)?n:(this.userCache.set("@@user@@",e),e)}async _getEntryFromCache({scope:t,audience:e,clientId:n}){const r=await this.cacheManager.get(new S({scope:t,audience:e,clientId:n}),60);if(r&&r.access_token){const{access_token:t,oauthTokenScope:e,expires_in:n}=r,i=await this._getIdTokenFromCache();return i&&Object.assign(Object.assign({id_token:i.id_token,access_token:t},e?{scope:e}:null),{expires_in:n})}}async _requestToken(t,e){const{nonceIn:n,organizationId:r}=e||{},i=await _(Object.assign({baseUrl:this.domainUrl,client_id:this.options.clientId,auth0Client:this.options.auth0Client,useFormData:this.options.useFormData,timeout:this.httpTimeoutMs},t),this.worker),o=await this._verifyIdToken(i.id_token,n,r);return await this._saveEntryInCache(Object.assign(Object.assign(Object.assign(Object.assign({},i),{decodedToken:o,scope:t.scope,audience:t.audience||"default"}),i.scope?{oauthTokenScope:i.scope}:null),{client_id:this.options.clientId})),this.cookieStorage.save(this.isAuthenticatedCookieName,!0,{daysUntilExpire:this.sessionCheckExpiryDays,cookieDomain:this.options.cookieDomain}),this._processOrgIdHint(o.claims.org_id),Object.assign(Object.assign({},i),{decodedToken:o})}}const H="https://forkify-fvelk.ondigitalocean.app/api/v1/recipes",V=function(t){return new Promise((function(e,n){setTimeout((function(){n(new Error(`Request took too long! Timeout after ${t} second`))}),1e3*t)}))},X=async function({auth0Client:t,url:e,method:n,uploadData:r}){const i={};let o;if(t){const e=await t.getTokenSilently();i.Authorization=`Bearer ${e}`}r&&(i["Content-Type"]="application/json",o=JSON.stringify(r));const a=fetch(e,{method:n,headers:i,body:o}),s=await Promise.race([a,V(10)]),c=await s.json();if(!s.ok)throw new Error(`${c.message} (${s.status})`);return c},Q={recipe:{},search:{query:"",results:[],page:1,resultsPerPage:10},bookmarks:[],user:{}},tt=function(t){const{recipe:e}=t.data;return{id:e._id,title:e.title,publisher:e.publisher,image:e.image,servings:e.servings,cookingTime:e.cookingTime,ingredients:e.ingredients,cookingDirections:e.cookingDirections,...e.userID&&{userID:e.userID}}},et=function(t=Q.search.page){Q.search.page=t;const e=(t-1)*Q.search.resultsPerPage,n=t*Q.search.resultsPerPage;return Q.search.results.slice(e,n)},nt=function(){localStorage.setItem("bookmarks",JSON.stringify(Q.bookmarks))},rt=function(t){Q.bookmarks.push(t),t.id===Q.recipe.id&&(Q.recipe.bookmarked=!0),nt()};!function(){const t=localStorage.getItem("bookmarks");t&&(Q.bookmarks=JSON.parse(t))}();class it{_data;render(t,e=!0){if(!t||Array.isArray(t)&&0===t.length)return this.renderError();this._data=t;const n=this._generateMarkup();if(!e)return n;this._clear(),this._parentElement.insertAdjacentHTML("afterbegin",n)}update(t){this._data=t;const e=this._generateMarkup(),n=document.createRange().createContextualFragment(e),r=Array.from(n.querySelectorAll("*")),i=Array.from(this._parentElement.querySelectorAll("*"));r.forEach(((t,e)=>{const n=i[e];t.isEqualNode(n)||""===t.firstChild?.nodeValue.trim()||(n.textContent=t.textContent),t.isEqualNode(n)||Array.from(t.attributes).forEach((t=>n.setAttribute(t.name,t.value)))}))}_clear(){this._parentElement.innerHTML=""}renderSpinner(){this._clear(),this._parentElement.insertAdjacentHTML("afterbegin",'\n      <div class="spinner">\n        <svg>\n          <use href="./img/icons.svg#icon-loader"></use>\n        </svg>\n      </div>\n    ')}renderError(t=this._errorMessage){const e=`\n      <div class="error">\n        <div>\n          <svg>\n            <use href="./img/icons.svg#icon-alert-triangle"></use>\n          </svg>\n        </div>\n        <p>${t}</p>\n      </div>\n    `;this._clear(),this._parentElement.insertAdjacentHTML("afterbegin",e)}renderMessage(t=this._message){const e=`\n      <div class="message">\n        <div>\n          <svg>\n            <use href="./img/icons.svg#icon-smile"></use>\n          </svg>\n        </div>\n        <p>${t}</p>\n      </div>\n    `;this._clear(),this._parentElement.insertAdjacentHTML("afterbegin",e)}}var ot=n(4686);const at=new class extends it{_parentElement=document.querySelector(".recipe");_errorMessage="We could not find that recipe. Please try another one!";_message="";addHandlerRender(t){["hashchange","load"].forEach((e=>window.addEventListener(e,t)))}addHandlerUpdateServings(t){this._parentElement.addEventListener("click",(function(e){const n=e.target.closest(".btn--update-servings");if(!n)return;const{updateTo:r}=n.dataset;+r>0&&t(+r)}))}addHandlerAddBookmark(t){this._parentElement.addEventListener("click",(function(e){e.target.closest(".btn--bookmark")&&t()}))}addHandlerDeleteRecipe(t){this._parentElement.addEventListener("click",(function(e){e.target.closest(".btn--delete")&&t()}))}_generateMarkup(){const t=Q.user.sub,e=this._data,n=()=>t&&t===e.userID?"":"hidden";return`\n      <figure class="recipe__fig">\n        <img src="${this._data.image}" alt="${this._data.title}" class="recipe__img" />\n        <h1 class="recipe__title">\n          <span>${this._data.title}</span>\n        </h1>\n      </figure>\n\n      <div class="recipe__details">\n        <div class="recipe__info">\n          <svg class="recipe__info-icon">\n            <use href="./img/icons.svg#icon-clock"></use>\n          </svg>\n          <span class="recipe__info-data recipe__info-data--minutes">${this._data.cookingTime}</span>\n          <span class="recipe__info-text">minutes</span>\n        </div>\n        <div class="recipe__info">\n          <svg class="recipe__info-icon">\n            <use href="./img/icons.svg#icon-users"></use>\n          </svg>\n          <span class="recipe__info-data recipe__info-data--people">${this._data.servings}</span>\n          <span class="recipe__info-text">servings</span>\n\n          <div class="recipe__info-buttons">\n            <button class="btn--tiny btn--update-servings" data-update-to="${this._data.servings-1}">\n              <svg>\n                <use href="./img/icons.svg#icon-minus-circle"></use>\n              </svg>\n            </button>\n            <button class="btn--tiny btn--update-servings" data-update-to="${this._data.servings+1}">\n              <svg>\n                <use href="./img/icons.svg#icon-plus-circle"></use>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        <button class="btn--round btn--bookmark">\n          <svg>\n            <use href="./img/icons.svg#icon-bookmark${(()=>this._data.bookmarked?"-fill":"")()}"/>\n          </svg>\n        </button>\n\n        <button class="btn--round btn--delete ${n()}">\n          <svg>\n            <use href="./img/icons.svg#icon-delete"/>\n          </svg>\n        </button>\n\n        <button class="btn--round btn--edit ${n()}">\n          <svg>\n            <use href="./img/icons.svg#icon-edit"/>\n          </svg>\n        </button>\n      </div>\n\n      <div class="recipe__ingredients">\n        <h2 class="heading--2">Recipe ingredients</h2>\n        <ul class="recipe__ingredient-list">\n          ${this._data.ingredients.map(this._generateMarkupIngredient).join("")}\n      </div>\n\n      <div class="recipe__directions">\n        <h2 class="heading--2">How to cook it</h2>\n        <p class="recipe__directions-text">\n        ${this._data.cookingDirections}\n        </p>\n      </div>\n    `}_generateMarkupIngredient(t){return`\n    <li class="recipe__ingredient">\n      <svg class="recipe__icon">\n        <use href="./img/icons.svg#icon-check"></use>\n      </svg>\n      <div class="recipe__quantity">${t.quantity?new ot.i(t.quantity).toString():""}</div>\n      <div class="recipe__description">\n        <span class="recipe__unit">${t.unit}</span>\n        ${t.description}\n      </div>\n    </li>\n  `}},st=new class{_parentEl=document.querySelector(".search");getQuery(){const t=this._parentEl.querySelector(".search__field").value;return this._clearInput(),t}_clearInput(){this._parentEl.querySelector(".search__field").value=""}addHandlerSearch(t){this._parentEl.addEventListener("submit",(function(e){e.preventDefault(),t()}))}},ct=new class extends it{_parentElement="";_generateMarkup(){const t=window.location.hash.slice(1);return`\n      <li class="preview">\n        <a class="preview__link ${this._data.id===t?"preview__link--active":""}" href="#${this._data.id}">\n          <figure class="preview__fig">\n            <img src="${this._data.image}" alt="${this._data.title}" />\n          </figure>\n          <div class="preview__data">\n            <h4 class="preview__title">${this._data.title}</h4>\n            <p class="preview__publisher">${this._data.publisher}</p>\n            <div class="preview__user-generated ${this._data.key?"":"hidden"}">\n              <svg>\n              <use href="./img/icons.svg#icon-user"></use>\n              </svg>\n            </div>\n          </div>\n        </a>\n      </li>\n    `}},ut=new class extends it{_parentElement=document.querySelector(".results");_errorMessage="No recipes found for your query! Please try again ;)";_message="";_generateMarkup(){return this._data.map((t=>ct.render(t,!1))).join("")}},lt=new class extends it{_parentElement=document.querySelector(".pagination");addHandlerClick(t){this._parentElement.addEventListener("click",(function(e){const n=e.target.closest(".btn--inline");if(!n)return;const r=+n.dataset.goto;t(r)}))}_generateMarkup(){const t=this._data.page,e=Math.ceil(this._data.results.length/this._data.resultsPerPage);return 1===t&&e>1?`\n        <button data-goto="${t+1}" class="btn--inline pagination__btn--next">\n          <span>Page ${t+1}</span>\n          <svg class="search__icon">\n            <use href="./img/icons.svg#icon-arrow-right"></use>\n          </svg>\n        </button>\n      `:t===e&&e>1?`\n        <button data-goto="${t-1}" class="btn--inline pagination__btn--prev">\n          <svg class="search__icon">\n            <use href="./img/icons.svg#icon-arrow-left"></use>\n          </svg>\n          <span>Page ${t-1}</span>\n        </button>\n      `:t<e?`\n        <button data-goto="${t-1}" class="btn--inline pagination__btn--prev">\n          <svg class="search__icon">\n            <use href="./img/icons.svg#icon-arrow-left"></use>\n          </svg>\n          <span>Page ${t-1}</span>\n        </button>\n        <button data-goto="${t+1}" class="btn--inline pagination__btn--next">\n          <span>Page ${t+1}</span>\n          <svg class="search__icon">\n            <use href="./img/icons.svg#icon-arrow-right"></use>\n          </svg>\n        </button>\n      `:""}},ft=new class extends it{_parentElement=document.querySelector(".bookmarks__list");_errorMessage="No bookmarks yet. Find a nice recipe and bookmark it ;)";_message="";addHandlerRender(t){window.addEventListener("load",t)}_generateMarkup(){return this._data.map((t=>ct.render(t,!1))).join("")}},dt=new class extends it{_parentElement=document.querySelector(".upload");_message="Recipe was successfully uploaded :)";_window=document.querySelector(".add-recipe-window");_overlay=document.querySelector(".overlay");_btnOpen=document.querySelector(".nav__btn--add-recipe");_btnClose=document.querySelector(".btn--close-modal");constructor(){super(),this._addHandlerShowWindow(),this._addHandlerHideWindow()}toggleWindow(){this._overlay.classList.toggle("hidden"),this._window.classList.toggle("hidden")}_addHandlerShowWindow(){this._btnOpen.addEventListener("click",this.toggleWindow.bind(this))}_addHandlerHideWindow(){this._btnClose.addEventListener("click",this.toggleWindow.bind(this)),this._overlay.addEventListener("click",this.toggleWindow.bind(this))}addHandlerUpload(t){this._parentElement.addEventListener("submit",(function(e){e.preventDefault();const n=[...new FormData(this)],r=Object.fromEntries(n);t(r)}))}_generateMarkup(){}},ht=new class{_btnLogin=document.querySelector(".nav__btn--login");_btnLogout=document.querySelector(".nav__btn--logout");addHandlerLogin(t){this._btnLogin.addEventListener("click",(function(e){e.preventDefault(),t()}))}addHandlerLogout(t){this._btnLogout.addEventListener("click",(function(e){e.preventDefault(),t()}))}renderLogin(){this._btnLogout.classList.add("hidden"),this._btnLogin.classList.remove("hidden")}renderLogout(){this._btnLogin.classList.add("hidden"),this._btnLogout.classList.remove("hidden")}addHandlerRender(t){window.addEventListener("load",t)}};n(8594),n(5666);var pt=n(3379),At=n.n(pt),gt=n(7795),mt=n.n(gt),vt=n(569),yt=n.n(vt),bt=n(3565),Ct=n.n(bt),wt=n(9216),xt=n.n(wt),kt=n(4589),_t=n.n(kt),It=n(9151),St={};St.styleTagTransform=_t(),St.setAttributes=Ct(),St.insert=yt().bind(null,"head"),St.domAPI=mt(),St.insertStyleElement=xt(),At()(It.Z,St),It.Z&&It.Z.locals&&It.Z.locals;let Et=null;const Ot=async()=>{Et=await async function(t){const e=new Z({domain:"dev-5hwndgvebevysof6.eu.auth0.com",clientId:"Ks6wUNCpcoNJzejw9JC5yNupXMK183Qm",authorizationParams:{audience:"https://forkify-fvelk.ondigitalocean.app/api/v1"},useRefreshTokens:!0,cacheLocation:"localstorage"});return await e.checkSession(),e}();const t=window.location.search;t.includes("code=")&&t.includes("state=")&&(await Et.handleRedirectCallback(),window.history.replaceState({},document.title,"/")),await Et.isAuthenticated()&&(Q.user=await Et.getUser()),Object.keys(Q.user).length?ht.renderLogout():ht.renderLogin()},Tt=async function(){try{const t=window.location.hash.slice(1);if(!t)return;at.renderSpinner(),ut.update(et()),ft.update(Q.bookmarks),await async function(t){try{const e=await X({url:`${H}/${t}`,method:"GET"});Q.recipe=tt(e),Q.bookmarks.some((e=>e.id===t))?Q.recipe.bookmarked=!0:Q.recipe.bookmarked=!1}catch(t){throw console.error(`${t} 💥💥💥💥`),t}}(t),at.render(Q.recipe)}catch(t){at.renderError(),console.error(t)}},Bt=async function(){try{ut.renderSpinner();const t=st.getQuery();if(!t)return;await async function(t){try{Q.search.query=t;const e=await X({url:`${H}?search=${t}`,method:"GET"});Q.search.results=e.data.recipes.map((t=>({id:t._id,title:t.title,publisher:t.publisher,image:t.image_url,...t.userID&&{userID:t.userID}}))),Q.search.page=1}catch(t){throw console.error(`${t} 💥💥💥💥`),t}}(t),ut.render(et()),lt.render(Q.search)}catch(t){console.log(t)}},jt=function(t){ut.render(et(t)),lt.render(Q.search)},Rt=function(t){!function(t){Q.recipe.ingredients.forEach((e=>{e.quantity=e.quantity*t/Q.recipe.servings})),Q.recipe.servings=t}(t),at.update(Q.recipe)},Lt=function(){Q.recipe.bookmarked?function(t){const e=Q.bookmarks.findIndex((e=>e.id===t));Q.bookmarks.splice(e,1),t===Q.recipe.id&&(Q.recipe.bookmarked=!1),nt()}(Q.recipe.id):rt(Q.recipe),at.update(Q.recipe),ft.render(Q.bookmarks)},Mt=function(){ft.render(Q.bookmarks)},Pt=async function(t){try{dt.renderSpinner(),await async function(t,e){const n=Object.entries(e).filter((t=>t[0].startsWith("ingredient")&&""!==t[1])).map((t=>{const e=t[1].split(",").map((t=>t.trim()));if(3!==e.length)throw new Error("Wrong ingredient fromat! Please use the correct format :)");const[n,r,i]=e;return{quantity:n?+n:null,unit:r,description:i}})),r=e.cookingDirections,i={title:e.title,image_url:e.image,publisher:e.publisher,cookingTime:+e.cookingTime,servings:+e.servings,ingredients:n,cookingDirections:r},o=await X({auth0Client:t,url:`${H}`,method:"POST",uploadData:i});Q.recipe=tt(o),rt(Q.recipe)}(Et,t),at.render(Q.recipe),dt.renderMessage(),ft.render(Q.bookmarks),window.history.pushState(null,"",`#${Q.recipe.id}`)}catch(t){console.error("💥",t),dt.renderError(t.message)}},zt=async()=>{await Et.loginWithRedirect({authorizationParams:{redirect_uri:window.location.origin}})},Ft=()=>{Et.logout({logoutParams:{returnTo:window.location.origin}})},Ut=async()=>{const t=window.location.hash.slice(1);if(!t)throw Error("Can not delete recipe. Recipe id is missing");at.renderSpinner(),await async function(t,e){await X({auth0Client:t,url:`${H}/${e}`,method:"DELETE"})}(Et,t),window.history.replaceState(null,"",location.origin),Q.search.results=Q.search.results.filter((e=>e.id!==t)),Q.search.results.length?ut.render(et()):at.renderMessage(""),at.renderMessage("Recipe is deleted. </br> Search for a recipe or an ingredient.")};(async()=>{ft.addHandlerRender(Mt),at.addHandlerRender(Tt),at.addHandlerUpdateServings(Rt),at.addHandlerAddBookmark(Lt),at.addHandlerDeleteRecipe(Ut),st.addHandlerSearch(Bt),lt.addHandlerClick(jt),dt.addHandlerUpload(Pt),ht.addHandlerRender(Ot),ht.addHandlerLogin(zt),ht.addHandlerLogout(Ft)})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,